var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/react/cjs/react.production.js
var require_react_production = __commonJS({
  "node_modules/react/cjs/react.production.js"(exports2) {
    "use strict";
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var REACT_POSTPONE_TYPE = Symbol.for("react.postpone");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    function getIteratorFn(maybeIterable) {
      if (null === maybeIterable || "object" !== typeof maybeIterable)
        return null;
      maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
      return "function" === typeof maybeIterable ? maybeIterable : null;
    }
    var ReactNoopUpdateQueue = {
      isMounted: function() {
        return false;
      },
      enqueueForceUpdate: function() {
      },
      enqueueReplaceState: function() {
      },
      enqueueSetState: function() {
      }
    };
    var assign = Object.assign;
    var emptyObject = {};
    function Component(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    Component.prototype.setState = function(partialState, callback) {
      if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState)
        throw Error(
          "takes an object of state variables to update or a function which returns an object of state variables."
        );
      this.updater.enqueueSetState(this, partialState, callback, "setState");
    };
    Component.prototype.forceUpdate = function(callback) {
      this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
    };
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent;
    assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    var isArrayImpl = Array.isArray;
    var ReactSharedInternals = { H: null, A: null, T: null };
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function ReactElement(type, key, _ref, self, source, owner, props) {
      _ref = props.ref;
      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        ref: void 0 !== _ref ? _ref : null,
        props
      };
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      return ReactElement(
        oldElement.type,
        newKey,
        null,
        void 0,
        void 0,
        void 0,
        oldElement.props
      );
    }
    function isValidElement(object) {
      return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function escape(key) {
      var escaperLookup = { "=": "=0", ":": "=2" };
      return "$" + key.replace(/[=:]/g, function(match) {
        return escaperLookup[match];
      });
    }
    var userProvidedKeyEscapeRegex = /\/+/g;
    function getElementKey(element, index) {
      return "object" === typeof element && null !== element && null != element.key ? escape("" + element.key) : index.toString(36);
    }
    function noop$1() {
    }
    function resolveThenable(thenable) {
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenable.reason;
        default:
          switch ("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(
            function(fulfilledValue) {
              "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
            },
            function(error) {
              "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
            }
          )), thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenable.reason;
          }
      }
      throw thenable;
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = typeof children;
      if ("undefined" === type || "boolean" === type)
        children = null;
      var invokeCallback = false;
      if (null === children)
        invokeCallback = true;
      else
        switch (type) {
          case "bigint":
          case "string":
          case "number":
            invokeCallback = true;
            break;
          case "object":
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
                break;
              case REACT_LAZY_TYPE:
                return invokeCallback = children._init, mapIntoArray(
                  invokeCallback(children._payload),
                  array,
                  escapedPrefix,
                  nameSoFar,
                  callback
                );
            }
        }
      if (invokeCallback)
        return callback = callback(children), invokeCallback = "" === nameSoFar ? "." + getElementKey(children, 0) : nameSoFar, isArrayImpl(callback) ? (escapedPrefix = "", null != invokeCallback && (escapedPrefix = invokeCallback.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
          return c;
        })) : null != callback && (isValidElement(callback) && (callback = cloneAndReplaceKey(
          callback,
          escapedPrefix + (!callback.key || children && children.key === callback.key ? "" : ("" + callback.key).replace(
            userProvidedKeyEscapeRegex,
            "$&/"
          ) + "/") + invokeCallback
        )), array.push(callback)), 1;
      invokeCallback = 0;
      var nextNamePrefix = "" === nameSoFar ? "." : nameSoFar + ":";
      if (isArrayImpl(children))
        for (var i = 0; i < children.length; i++)
          nameSoFar = children[i], type = nextNamePrefix + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(
            nameSoFar,
            array,
            escapedPrefix,
            type,
            callback
          );
      else if (i = getIteratorFn(children), "function" === typeof i)
        for (children = i.call(children), i = 0; !(nameSoFar = children.next()).done; )
          nameSoFar = nameSoFar.value, type = nextNamePrefix + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(
            nameSoFar,
            array,
            escapedPrefix,
            type,
            callback
          );
      else if ("object" === type) {
        if ("function" === typeof children.then)
          return mapIntoArray(
            resolveThenable(children),
            array,
            escapedPrefix,
            nameSoFar,
            callback
          );
        array = String(children);
        throw Error(
          "Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead."
        );
      }
      return invokeCallback;
    }
    function mapChildren(children, func, context) {
      if (null == children)
        return children;
      var result = [], count = 0;
      mapIntoArray(children, result, "", "", function(child) {
        return func.call(context, child, count++);
      });
      return result;
    }
    function lazyInitializer(payload) {
      if (-1 === payload._status) {
        var ctor = payload._result;
        ctor = ctor();
        ctor.then(
          function(moduleObject) {
            if (0 === payload._status || -1 === payload._status)
              payload._status = 1, payload._result = moduleObject;
          },
          function(error) {
            if (0 === payload._status || -1 === payload._status)
              payload._status = 2, payload._result = error;
          }
        );
        -1 === payload._status && (payload._status = 0, payload._result = ctor);
      }
      if (1 === payload._status)
        return payload._result.default;
      throw payload._result;
    }
    function useOptimistic(passthrough, reducer) {
      return ReactSharedInternals.H.useOptimistic(passthrough, reducer);
    }
    var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
      if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
        var event = new window.ErrorEvent("error", {
          bubbles: true,
          cancelable: true,
          message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
          error
        });
        if (!window.dispatchEvent(event))
          return;
      } else if ("object" === typeof process && "function" === typeof process.emit) {
        process.emit("uncaughtException", error);
        return;
      }
      console.error(error);
    };
    function noop() {
    }
    exports2.Children = {
      map: mapChildren,
      forEach: function(children, forEachFunc, forEachContext) {
        mapChildren(
          children,
          function() {
            forEachFunc.apply(this, arguments);
          },
          forEachContext
        );
      },
      count: function(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      },
      toArray: function(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      },
      only: function(children) {
        if (!isValidElement(children))
          throw Error(
            "React.Children.only expected to receive a single React element child."
          );
        return children;
      }
    };
    exports2.Component = Component;
    exports2.Fragment = REACT_FRAGMENT_TYPE;
    exports2.Profiler = REACT_PROFILER_TYPE;
    exports2.PureComponent = PureComponent;
    exports2.StrictMode = REACT_STRICT_MODE_TYPE;
    exports2.Suspense = REACT_SUSPENSE_TYPE;
    exports2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
    exports2.act = function() {
      throw Error("act(...) is not supported in production builds of React.");
    };
    exports2.cache = function(fn) {
      return function() {
        return fn.apply(null, arguments);
      };
    };
    exports2.cloneElement = function(element, config, children) {
      if (null === element || void 0 === element)
        throw Error(
          "The argument must be a React element, but you passed " + element + "."
        );
      var props = assign({}, element.props), key = element.key, owner = void 0;
      if (null != config)
        for (propName in void 0 !== config.ref && (owner = void 0), void 0 !== config.key && (key = "" + config.key), config)
          !hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
      var propName = arguments.length - 2;
      if (1 === propName)
        props.children = children;
      else if (1 < propName) {
        for (var childArray = Array(propName), i = 0; i < propName; i++)
          childArray[i] = arguments[i + 2];
        props.children = childArray;
      }
      return ReactElement(element.type, key, null, void 0, void 0, owner, props);
    };
    exports2.createContext = function(defaultValue) {
      defaultValue = {
        $$typeof: REACT_CONTEXT_TYPE,
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        _threadCount: 0,
        Provider: null,
        Consumer: null
      };
      defaultValue.Provider = defaultValue;
      defaultValue.Consumer = {
        $$typeof: REACT_CONSUMER_TYPE,
        _context: defaultValue
      };
      return defaultValue;
    };
    exports2.createElement = function(type, config, children) {
      var propName, props = {}, key = null;
      if (null != config)
        for (propName in void 0 !== config.key && (key = "" + config.key), config)
          hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (props[propName] = config[propName]);
      var childrenLength = arguments.length - 2;
      if (1 === childrenLength)
        props.children = children;
      else if (1 < childrenLength) {
        for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
          childArray[i] = arguments[i + 2];
        props.children = childArray;
      }
      if (type && type.defaultProps)
        for (propName in childrenLength = type.defaultProps, childrenLength)
          void 0 === props[propName] && (props[propName] = childrenLength[propName]);
      return ReactElement(type, key, null, void 0, void 0, null, props);
    };
    exports2.createRef = function() {
      return { current: null };
    };
    exports2.experimental_useEffectEvent = function(callback) {
      return ReactSharedInternals.H.useEffectEvent(callback);
    };
    exports2.experimental_useOptimistic = function(passthrough, reducer) {
      return useOptimistic(passthrough, reducer);
    };
    exports2.forwardRef = function(render) {
      return { $$typeof: REACT_FORWARD_REF_TYPE, render };
    };
    exports2.isValidElement = isValidElement;
    exports2.lazy = function(ctor) {
      return {
        $$typeof: REACT_LAZY_TYPE,
        _payload: { _status: -1, _result: ctor },
        _init: lazyInitializer
      };
    };
    exports2.memo = function(type, compare) {
      return {
        $$typeof: REACT_MEMO_TYPE,
        type,
        compare: void 0 === compare ? null : compare
      };
    };
    exports2.startTransition = function(scope) {
      var prevTransition = ReactSharedInternals.T, callbacks = /* @__PURE__ */ new Set();
      ReactSharedInternals.T = { _callbacks: callbacks };
      var currentTransition = ReactSharedInternals.T;
      try {
        var returnValue = scope();
        "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && (callbacks.forEach(function(callback) {
          return callback(currentTransition, returnValue);
        }), returnValue.then(noop, reportGlobalError));
      } catch (error) {
        reportGlobalError(error);
      } finally {
        ReactSharedInternals.T = prevTransition;
      }
    };
    exports2.unstable_Activity = REACT_OFFSCREEN_TYPE;
    exports2.unstable_DebugTracingMode = REACT_DEBUG_TRACING_MODE_TYPE;
    exports2.unstable_SuspenseList = REACT_SUSPENSE_LIST_TYPE;
    exports2.unstable_getCacheForType = function(resourceType) {
      var dispatcher = ReactSharedInternals.A;
      return dispatcher ? dispatcher.getCacheForType(resourceType) : resourceType();
    };
    exports2.unstable_postpone = function(reason) {
      reason = Error(reason);
      reason.$$typeof = REACT_POSTPONE_TYPE;
      throw reason;
    };
    exports2.unstable_useCacheRefresh = function() {
      return ReactSharedInternals.H.useCacheRefresh();
    };
    exports2.use = function(usable) {
      return ReactSharedInternals.H.use(usable);
    };
    exports2.useActionState = function(action, initialState, permalink) {
      return ReactSharedInternals.H.useActionState(action, initialState, permalink);
    };
    exports2.useCallback = function(callback, deps) {
      return ReactSharedInternals.H.useCallback(callback, deps);
    };
    exports2.useContext = function(Context) {
      return ReactSharedInternals.H.useContext(Context);
    };
    exports2.useDebugValue = function() {
    };
    exports2.useDeferredValue = function(value, initialValue) {
      return ReactSharedInternals.H.useDeferredValue(value, initialValue);
    };
    exports2.useEffect = function(create, deps) {
      return ReactSharedInternals.H.useEffect(create, deps);
    };
    exports2.useId = function() {
      return ReactSharedInternals.H.useId();
    };
    exports2.useImperativeHandle = function(ref, create, deps) {
      return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);
    };
    exports2.useInsertionEffect = function(create, deps) {
      return ReactSharedInternals.H.useInsertionEffect(create, deps);
    };
    exports2.useLayoutEffect = function(create, deps) {
      return ReactSharedInternals.H.useLayoutEffect(create, deps);
    };
    exports2.useMemo = function(create, deps) {
      return ReactSharedInternals.H.useMemo(create, deps);
    };
    exports2.useOptimistic = useOptimistic;
    exports2.useReducer = function(reducer, initialArg, init) {
      return ReactSharedInternals.H.useReducer(reducer, initialArg, init);
    };
    exports2.useRef = function(initialValue) {
      return ReactSharedInternals.H.useRef(initialValue);
    };
    exports2.useState = function(initialState) {
      return ReactSharedInternals.H.useState(initialState);
    };
    exports2.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
      return ReactSharedInternals.H.useSyncExternalStore(
        subscribe,
        getSnapshot,
        getServerSnapshot
      );
    };
    exports2.useTransition = function() {
      return ReactSharedInternals.H.useTransition();
    };
    exports2.version = "19.0.0-experimental-4508873393-20240430";
  }
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactSharedInternals = {
          H: null,
          A: null,
          T: null
        };
        {
          ReactSharedInternals.actQueue = null;
          ReactSharedInternals.isBatchingLegacy = false;
          ReactSharedInternals.didScheduleLegacyUpdate = false;
          ReactSharedInternals.didUsePromise = false;
          ReactSharedInternals.thrownErrors = [];
          var currentExtraStackFrame = null;
          ReactSharedInternals.setExtraStackFrame = function(stack) {
            currentExtraStackFrame = stack;
          };
          ReactSharedInternals.getCurrentStack = null;
          ReactSharedInternals.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactSharedInternals.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var stack = ReactSharedInternals.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var ReactVersion = "19.0.0-experimental-4508873393-20240430";
        var enableScopeAPI = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableRefAsProp = true;
        var disableLegacyMode = true;
        var enableRenderableContext = true;
        var enableDebugTracing = false;
        var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_POSTPONE_TYPE = Symbol.for("react.postpone");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function(publicInstance) {
            return false;
          },
          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        var REACT_CLIENT_REFERENCE$2 = Symbol.for("react.client.reference");
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          if (typeof type === "function") {
            if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {
              return null;
            }
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE: {
                return null;
              }
              case REACT_CONTEXT_TYPE:
                var context = type;
                {
                  return getContextName(context) + ".Provider";
                }
              case REACT_CONSUMER_TYPE: {
                var consumer = type;
                return getContextName(consumer._context) + ".Consumer";
              }
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference");
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || !enableRenderableContext || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var prefix;
        function describeBuiltInComponentFrame(name) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher = null;
          {
            previousDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = null;
            disableLogs();
          }
          var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
              var control;
              try {
                if (construct) {
                  var Fake = function() {
                    throw Error();
                  };
                  Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  });
                  if (typeof Reflect === "object" && Reflect.construct) {
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x) {
                      control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x) {
                      control = x;
                    }
                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x) {
                    control = x;
                  }
                  var maybePromise = fn();
                  if (maybePromise && typeof maybePromise.catch === "function") {
                    maybePromise.catch(function() {
                    });
                  }
                }
              } catch (sample) {
                if (sample && control && typeof sample.stack === "string") {
                  return [sample.stack, control.stack];
                }
              }
              return [null, null];
            }
          };
          RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
          if (namePropDescriptor && namePropDescriptor.configurable) {
            Object.defineProperty(
              RunInRootFrame.DetermineComponentFrameRoot,
              // Configurable properties can be updated even if its writable descriptor
              // is set to `false`.
              // $FlowFixMe[cannot-write]
              "name",
              {
                value: "DetermineComponentFrameRoot"
              }
            );
          }
          try {
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
              var sampleLines = sampleStack.split("\n");
              var controlLines = controlStack.split("\n");
              var s = 0;
              var c = 0;
              while (s < sampleLines.length && !sampleLines[s].includes("DetermineComponentFrameRoot")) {
                s++;
              }
              while (c < controlLines.length && !controlLines[c].includes("DetermineComponentFrameRoot")) {
                c++;
              }
              if (s === sampleLines.length || c === controlLines.length) {
                s = sampleLines.length - 1;
                c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        if (true) {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactSharedInternals.H = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload));
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
        function getOwner() {
          {
            var dispatcher = ReactSharedInternals.A;
            if (dispatcher === null) {
              return null;
            }
            return dispatcher.getOwner();
          }
        }
        var specialPropKeyWarningShown;
        var didWarnAboutElementRef;
        var didWarnAboutOldJSXRuntime;
        {
          didWarnAboutElementRef = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function elementRefGetterWithDeprecationWarning() {
          {
            var componentName = getComponentNameFromType(this.type);
            if (!didWarnAboutElementRef[componentName]) {
              didWarnAboutElementRef[componentName] = true;
              error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.");
            }
            var refProp = this.props.ref;
            return refProp !== void 0 ? refProp : null;
          }
        }
        function ReactElement(type, key, _ref, self, source, owner, props) {
          var ref;
          {
            var refProp = props.ref;
            ref = refProp !== void 0 ? refProp : null;
          }
          var element;
          {
            element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            if (ref !== null) {
              Object.defineProperty(element, "ref", {
                enumerable: false,
                get: elementRefGetterWithDeprecationWarning
              });
            } else {
              Object.defineProperty(element, "ref", {
                enumerable: false,
                value: null
              });
            }
          }
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_debugInfo", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: null
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        }
        function createElement(type, config, children) {
          {
            if (!isValidElementType(type)) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            } else {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
          }
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          if (config != null) {
            {
              if (!didWarnAboutOldJSXRuntime && "__self" in config && // Do not assume this is the result of an oudated JSX transform if key
              // is present, because the modern JSX transform sometimes outputs
              // createElement to preserve precedence between a static key and a
              // spread key. To avoid false positive warnings, we never warn if
              // there's a key.
              !("key" in config)) {
                didWarnAboutOldJSXRuntime = true;
                warn("Your app (or one of its dependencies) is using an outdated JSX transform. Update to the modern JSX transform for faster performance: https://react.dev/link/new-jsx-transform");
              }
            }
            if (hasValidRef(config))
              ;
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names
              propName !== "key" && enableRefAsProp && // Even though we don't use these anymore in the runtime, we don't want
              // them to appear as props, so in createElement we filter them out.
              // We don't have to do this in the jsx() runtime because the jsx()
              // transform never passed these as props; it used separate arguments.
              propName !== "__self" && propName !== "__source") {
                {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var _i = 0; _i < childrenLength; _i++) {
              childArray[_i] = arguments[_i + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || !enableRefAsProp) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
            }
          }
          var element = ReactElement(type, key, ref, void 0, void 0, getOwner(), props);
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          }
          return element;
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          return ReactElement(
            oldElement.type,
            newKey,
            // When enableRefAsProp is on, this argument is ignored. This check only
            // exists to avoid the `ref` access warning.
            null,
            void 0,
            void 0,
            oldElement._owner,
            oldElement.props
          );
        }
        function cloneElement(element, config, children) {
          if (element === null || element === void 0) {
            throw new Error("The argument must be a React element, but you passed " + element + ".");
          }
          var propName;
          var props = assign({}, element.props);
          var key = element.key;
          var ref = null;
          var owner = element._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              owner = getOwner();
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            for (propName in config) {
              if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names
              propName !== "key" && enableRefAsProp && // ...and maybe these, too, though we currently rely on them for
              // warnings and debug information in dev. Need to decide if we're OK
              // with dropping them. In the jsx() runtime it's not an issue because
              // the data gets passed as separate arguments instead of props, but
              // it would be nice to stop relying on them entirely so we can drop
              // them from the internal Fiber field.
              propName !== "__self" && propName !== "__source" && // Undefined `ref` is ignored by cloneElement. We treat it the same as
              // if the property were missing. This is mostly for
              // backwards compatibility.
              !(propName === "ref" && config.ref === void 0)) {
                {
                  {
                    props[propName] = config[propName];
                  }
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2];
            }
            props.children = childArray;
          }
          var clonedElement = ReactElement(element.type, key, ref, void 0, void 0, owner, props);
          for (var _i2 = 2; _i2 < arguments.length; _i2++) {
            validateChildKeys(arguments[_i2], clonedElement.type);
          }
          return clonedElement;
        }
        function getDeclarationErrorAddendum() {
          {
            var owner = getOwner();
            if (owner) {
              var name = getComponentNameFromType(owner.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object" || !node) {
              return;
            }
            if (node.$$typeof === REACT_CLIENT_REFERENCE)
              ;
            else if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  if (iterator !== node) {
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var ownerHasKeyUseWarning = {};
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner != null && element._owner !== getOwner()) {
              var ownerName = null;
              if (typeof element._owner.tag === "number") {
                ownerName = getComponentNameFromType(element._owner.type);
              } else if (typeof element._owner.name === "string") {
                ownerName = element._owner.name;
              }
              childOwner = " It was passed a child from " + ownerName + ".";
            }
            setCurrentlyValidatingElement(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement(null);
          }
        }
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var stack = describeUnknownElementTypeFrameInDEV(element.type);
              ReactSharedInternals.setExtraStackFrame(stack);
            } else {
              ReactSharedInternals.setExtraStackFrame(null);
            }
          }
        }
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = getComponentNameFromType(parentType);
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement(null);
                break;
              }
            }
          }
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            {
              checkKeyStringCoercion(element.key);
            }
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function noop$1() {
        }
        function resolveThenable(thenable) {
          switch (thenable.status) {
            case "fulfilled": {
              var fulfilledValue = thenable.value;
              return fulfilledValue;
            }
            case "rejected": {
              var rejectedError = thenable.reason;
              throw rejectedError;
            }
            default: {
              if (typeof thenable.status === "string") {
                thenable.then(noop$1, noop$1);
              } else {
                var pendingThenable = thenable;
                pendingThenable.status = "pending";
                pendingThenable.then(function(fulfilledValue2) {
                  if (thenable.status === "pending") {
                    var fulfilledThenable2 = thenable;
                    fulfilledThenable2.status = "fulfilled";
                    fulfilledThenable2.value = fulfilledValue2;
                  }
                }, function(error2) {
                  if (thenable.status === "pending") {
                    var rejectedThenable2 = thenable;
                    rejectedThenable2.status = "rejected";
                    rejectedThenable2.reason = error2;
                  }
                });
              }
              switch (thenable.status) {
                case "fulfilled": {
                  var fulfilledThenable = thenable;
                  return fulfilledThenable.value;
                }
                case "rejected": {
                  var rejectedThenable = thenable;
                  var _rejectedError = rejectedThenable.reason;
                  throw _rejectedError;
                }
              }
            }
          }
          throw thenable;
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "bigint":
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = children._payload;
                    var init = children._init;
                    return mapIntoArray(init(payload), array, escapedPrefix, nameSoFar, callback);
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                return c;
              });
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe[incompatible-type] Flow incorrectly thinks React.Portal doesn't have a key
                  (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey(
                    // $FlowFixMe[unsafe-addition]
                    "" + mappedChild.key
                    // eslint-disable-line react-internal/safe-string-coercion
                  ) + "/" : "") + childKey
                );
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i];
              nextName = nextNamePrefix + getElementKey(child, i);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              if (typeof children.then === "function") {
                return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);
              }
              var childrenString = String(children);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(
            children,
            // $FlowFixMe[missing-this-annot]
            function() {
              forEachFunc.apply(this, arguments);
            },
            forEachContext
          );
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement(children)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children;
        }
        function createContext(defaultValue) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
          };
          {
            context.Provider = context;
            context.Consumer = {
              $$typeof: REACT_CONSUMER_TYPE,
              _context: context
            };
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          return lazyType;
        }
        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null) {
                error("forwardRef render functions do not support defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function noopCache(fn) {
          return function() {
            return fn.apply(null, arguments);
          };
        }
        var cache = noopCache;
        function postpone(reason) {
          var postponeInstance = new Error(reason);
          postponeInstance.$$typeof = REACT_POSTPONE_TYPE;
          throw postponeInstance;
        }
        function resolveDispatcher() {
          var dispatcher = ReactSharedInternals.H;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function getCacheForType(resourceType) {
          var dispatcher = ReactSharedInternals.A;
          if (!dispatcher) {
            return resourceType();
          }
          return dispatcher.getCacheForType(resourceType);
        }
        function useContext(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context.$$typeof === REACT_CONSUMER_TYPE) {
              error("Calling useContext(Context.Consumer) is not supported and will cause bugs. Did you mean to call useContext(Context) instead?");
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState2(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create, deps);
        }
        function useInsertionEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create, deps);
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create, deps);
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create, deps);
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value, initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value, initialValue);
        }
        function useId() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        function useCacheRefresh() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCacheRefresh();
        }
        function use2(usable) {
          var dispatcher = resolveDispatcher();
          return dispatcher.use(usable);
        }
        function useEffectEvent(callback) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffectEvent(callback);
        }
        function useOptimistic(passthrough, reducer) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useOptimistic(passthrough, reducer);
        }
        function useActionState(action, initialState, permalink) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useActionState(action, initialState, permalink);
          }
        }
        var reportGlobalError = typeof reportError === "function" ? (
          // In modern browsers, reportError will dispatch an error event,
          // emulating an uncaught JavaScript error.
          reportError
        ) : function(error2) {
          if (typeof window === "object" && typeof window.ErrorEvent === "function") {
            var message = typeof error2 === "object" && error2 !== null && typeof error2.message === "string" ? (
              // eslint-disable-next-line react-internal/safe-string-coercion
              String(error2.message)
            ) : (
              // eslint-disable-next-line react-internal/safe-string-coercion
              String(error2)
            );
            var event = new window.ErrorEvent("error", {
              bubbles: true,
              cancelable: true,
              message,
              error: error2
            });
            var shouldLog = window.dispatchEvent(event);
            if (!shouldLog) {
              return;
            }
          } else if (typeof process === "object" && // $FlowFixMe[method-unbinding]
          typeof process.emit === "function") {
            process.emit("uncaughtException", error2);
            return;
          }
          console["error"](error2);
        };
        function startTransition(scope, options) {
          var prevTransition = ReactSharedInternals.T;
          var callbacks = /* @__PURE__ */ new Set();
          var transition = {
            _callbacks: callbacks
          };
          ReactSharedInternals.T = transition;
          var currentTransition = ReactSharedInternals.T;
          {
            ReactSharedInternals.T._updatedFibers = /* @__PURE__ */ new Set();
          }
          {
            try {
              var returnValue = scope();
              if (typeof returnValue === "object" && returnValue !== null && typeof returnValue.then === "function") {
                callbacks.forEach(function(callback) {
                  return callback(currentTransition, returnValue);
                });
                returnValue.then(noop, reportGlobalError);
              }
            } catch (error2) {
              reportGlobalError(error2);
            } finally {
              warnAboutTransitionSubscriptions(prevTransition, currentTransition);
              ReactSharedInternals.T = prevTransition;
            }
          }
        }
        function warnAboutTransitionSubscriptions(prevTransition, currentTransition) {
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              currentTransition._updatedFibers.clear();
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
            }
          }
        }
        function noop() {
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function aggregateErrors(errors) {
          if (errors.length > 1 && typeof AggregateError === "function") {
            return new AggregateError(errors);
          }
          return errors[0];
        }
        function act(callback) {
          {
            var prevIsBatchingLegacy = false;
            var prevActQueue = ReactSharedInternals.actQueue;
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            var queue = ReactSharedInternals.actQueue = prevActQueue !== null ? prevActQueue : [];
            var result;
            var didAwaitActCall = false;
            try {
              if (!disableLegacyMode)
                ;
              result = callback();
              var didScheduleLegacyUpdate = !disableLegacyMode ? ReactSharedInternals.didScheduleLegacyUpdate : false;
              if (!prevIsBatchingLegacy && didScheduleLegacyUpdate) {
                flushActQueue(queue);
              }
              if (!disableLegacyMode)
                ;
            } catch (error2) {
              ReactSharedInternals.thrownErrors.push(error2);
            }
            if (ReactSharedInternals.thrownErrors.length > 0) {
              popActScope(prevActQueue, prevActScopeDepth);
              var thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);
              ReactSharedInternals.thrownErrors.length = 0;
              throw thrownError;
            }
            if (result !== null && typeof result === "object" && // $FlowFixMe[method-unbinding]
            typeof result.then === "function") {
              var thenable = result;
              queueSeveralMicrotasks(function() {
                if (!didAwaitActCall && !didWarnNoAwaitAct) {
                  didWarnNoAwaitAct = true;
                  error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                }
              });
              return {
                then: function(resolve, reject) {
                  didAwaitActCall = true;
                  thenable.then(function(returnValue2) {
                    popActScope(prevActQueue, prevActScopeDepth);
                    if (prevActScopeDepth === 0) {
                      try {
                        flushActQueue(queue);
                        enqueueTask(function() {
                          return (
                            // Recursively flush tasks scheduled by a microtask.
                            recursivelyFlushAsyncActWork(returnValue2, resolve, reject)
                          );
                        });
                      } catch (error2) {
                        ReactSharedInternals.thrownErrors.push(error2);
                      }
                      if (ReactSharedInternals.thrownErrors.length > 0) {
                        var _thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);
                        ReactSharedInternals.thrownErrors.length = 0;
                        reject(_thrownError);
                      }
                    } else {
                      resolve(returnValue2);
                    }
                  }, function(error2) {
                    popActScope(prevActQueue, prevActScopeDepth);
                    if (ReactSharedInternals.thrownErrors.length > 0) {
                      var _thrownError2 = aggregateErrors(ReactSharedInternals.thrownErrors);
                      ReactSharedInternals.thrownErrors.length = 0;
                      reject(_thrownError2);
                    } else {
                      reject(error2);
                    }
                  });
                }
              };
            } else {
              var returnValue = result;
              popActScope(prevActQueue, prevActScopeDepth);
              if (prevActScopeDepth === 0) {
                flushActQueue(queue);
                if (queue.length !== 0) {
                  queueSeveralMicrotasks(function() {
                    if (!didAwaitActCall && !didWarnNoAwaitAct) {
                      didWarnNoAwaitAct = true;
                      error("A component suspended inside an `act` scope, but the `act` call was not awaited. When testing React components that depend on asynchronous data, you must await the result:\n\nawait act(() => ...)");
                    }
                  });
                }
                ReactSharedInternals.actQueue = null;
              }
              if (ReactSharedInternals.thrownErrors.length > 0) {
                var _thrownError3 = aggregateErrors(ReactSharedInternals.thrownErrors);
                ReactSharedInternals.thrownErrors.length = 0;
                throw _thrownError3;
              }
              return {
                then: function(resolve, reject) {
                  didAwaitActCall = true;
                  if (prevActScopeDepth === 0) {
                    ReactSharedInternals.actQueue = queue;
                    enqueueTask(function() {
                      return (
                        // Recursively flush tasks scheduled by a microtask.
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject)
                      );
                    });
                  } else {
                    resolve(returnValue);
                  }
                }
              };
            }
          }
        }
        function popActScope(prevActQueue, prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
          {
            var queue = ReactSharedInternals.actQueue;
            if (queue !== null) {
              if (queue.length !== 0) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    return recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  });
                  return;
                } catch (error2) {
                  ReactSharedInternals.thrownErrors.push(error2);
                }
              } else {
                ReactSharedInternals.actQueue = null;
              }
            }
            if (ReactSharedInternals.thrownErrors.length > 0) {
              var thrownError = aggregateErrors(ReactSharedInternals.thrownErrors);
              ReactSharedInternals.thrownErrors.length = 0;
              reject(thrownError);
            } else {
              resolve(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i = 0;
              try {
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    ReactSharedInternals.didUsePromise = false;
                    var continuation = callback(false);
                    if (continuation !== null) {
                      if (ReactSharedInternals.didUsePromise) {
                        queue[i] = callback;
                        queue.splice(0, i);
                        return;
                      }
                      callback = continuation;
                    } else {
                      break;
                    }
                  } while (true);
                }
                queue.length = 0;
              } catch (error2) {
                queue.splice(0, i + 1);
                ReactSharedInternals.thrownErrors.push(error2);
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var queueSeveralMicrotasks = typeof queueMicrotask === "function" ? function(callback) {
          queueMicrotask(function() {
            return queueMicrotask(callback);
          });
        } : enqueueTask;
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        function experimental_useOptimistic(passthrough, reducer) {
          {
            error("useOptimistic is now in canary. Remove the experimental_ prefix. The prefixed alias will be removed in an upcoming release.");
          }
          return useOptimistic(passthrough, reducer);
        }
        exports2.Children = Children;
        exports2.Component = Component;
        exports2.Fragment = REACT_FRAGMENT_TYPE;
        exports2.Profiler = REACT_PROFILER_TYPE;
        exports2.PureComponent = PureComponent;
        exports2.StrictMode = REACT_STRICT_MODE_TYPE;
        exports2.Suspense = REACT_SUSPENSE_TYPE;
        exports2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
        exports2.act = act;
        exports2.cache = cache;
        exports2.cloneElement = cloneElement;
        exports2.createContext = createContext;
        exports2.createElement = createElement;
        exports2.createRef = createRef;
        exports2.experimental_useEffectEvent = useEffectEvent;
        exports2.experimental_useOptimistic = experimental_useOptimistic;
        exports2.forwardRef = forwardRef;
        exports2.isValidElement = isValidElement;
        exports2.lazy = lazy;
        exports2.memo = memo;
        exports2.startTransition = startTransition;
        exports2.unstable_Activity = REACT_OFFSCREEN_TYPE;
        exports2.unstable_DebugTracingMode = REACT_DEBUG_TRACING_MODE_TYPE;
        exports2.unstable_SuspenseList = REACT_SUSPENSE_LIST_TYPE;
        exports2.unstable_getCacheForType = getCacheForType;
        exports2.unstable_postpone = postpone;
        exports2.unstable_useCacheRefresh = useCacheRefresh;
        exports2.use = use2;
        exports2.useActionState = useActionState;
        exports2.useCallback = useCallback;
        exports2.useContext = useContext;
        exports2.useDebugValue = useDebugValue;
        exports2.useDeferredValue = useDeferredValue;
        exports2.useEffect = useEffect;
        exports2.useId = useId;
        exports2.useImperativeHandle = useImperativeHandle;
        exports2.useInsertionEffect = useInsertionEffect;
        exports2.useLayoutEffect = useLayoutEffect;
        exports2.useMemo = useMemo;
        exports2.useOptimistic = useOptimistic;
        exports2.useReducer = useReducer;
        exports2.useRef = useRef;
        exports2.useState = useState2;
        exports2.useSyncExternalStore = useSyncExternalStore;
        exports2.useTransition = useTransition;
        exports2.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_production();
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.production.js
var require_react_dom_production = __commonJS({
  "node_modules/react-dom/cjs/react-dom.production.js"(exports2) {
    "use strict";
    function formatProdErrorMessage(code) {
      var url = "https://react.dev/errors/" + code;
      if (1 < arguments.length) {
        url += "?args[]=" + encodeURIComponent(arguments[1]);
        for (var i = 2; i < arguments.length; i++)
          url += "&args[]=" + encodeURIComponent(arguments[i]);
      }
      return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var ReactSharedInternals = require_react().__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    function noop() {
    }
    var Internals = {
      d: {
        f: noop,
        r: function() {
          throw Error(formatProdErrorMessage(522));
        },
        D: noop,
        C: noop,
        L: noop,
        m: noop,
        X: noop,
        S: noop,
        M: noop
      },
      p: 0,
      findDOMNode: null
    };
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    function createPortal$1(children, containerInfo, implementation) {
      var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children,
        containerInfo,
        implementation
      };
    }
    function getCrossOriginStringAs(as, input) {
      if ("font" === as)
        return "";
      if ("string" === typeof input)
        return "use-credentials" === input ? input : "";
    }
    exports2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
    exports2.createPortal = function(children, container) {
      var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType)
        throw Error(formatProdErrorMessage(299));
      return createPortal$1(children, container, null, key);
    };
    exports2.flushSync = function(fn) {
      var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
      try {
        if (ReactSharedInternals.T = null, Internals.p = 2, fn)
          return fn();
      } finally {
        ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f();
      }
    };
    exports2.preconnect = function(href, options) {
      "string" === typeof href && (options ? (options = options.crossOrigin, options = "string" === typeof options ? "use-credentials" === options ? options : "" : void 0) : options = null, Internals.d.C(href, options));
    };
    exports2.prefetchDNS = function(href) {
      "string" === typeof href && Internals.d.D(href);
    };
    exports2.preinit = function(href, options) {
      if ("string" === typeof href && options && "string" === typeof options.as) {
        var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = "string" === typeof options.integrity ? options.integrity : void 0, fetchPriority = "string" === typeof options.fetchPriority ? options.fetchPriority : void 0;
        "style" === as ? Internals.d.S(
          href,
          "string" === typeof options.precedence ? options.precedence : void 0,
          {
            crossOrigin,
            integrity,
            fetchPriority
          }
        ) : "script" === as && Internals.d.X(href, {
          crossOrigin,
          integrity,
          fetchPriority,
          nonce: "string" === typeof options.nonce ? options.nonce : void 0
        });
      }
    };
    exports2.preinitModule = function(href, options) {
      if ("string" === typeof href)
        if ("object" === typeof options && null !== options) {
          if (null == options.as || "script" === options.as) {
            var crossOrigin = getCrossOriginStringAs(
              options.as,
              options.crossOrigin
            );
            Internals.d.M(href, {
              crossOrigin,
              integrity: "string" === typeof options.integrity ? options.integrity : void 0,
              nonce: "string" === typeof options.nonce ? options.nonce : void 0
            });
          }
        } else
          null == options && Internals.d.M(href);
    };
    exports2.preload = function(href, options) {
      if ("string" === typeof href && "object" === typeof options && null !== options && "string" === typeof options.as) {
        var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);
        Internals.d.L(href, as, {
          crossOrigin,
          integrity: "string" === typeof options.integrity ? options.integrity : void 0,
          nonce: "string" === typeof options.nonce ? options.nonce : void 0,
          type: "string" === typeof options.type ? options.type : void 0,
          fetchPriority: "string" === typeof options.fetchPriority ? options.fetchPriority : void 0,
          referrerPolicy: "string" === typeof options.referrerPolicy ? options.referrerPolicy : void 0,
          imageSrcSet: "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
          imageSizes: "string" === typeof options.imageSizes ? options.imageSizes : void 0,
          media: "string" === typeof options.media ? options.media : void 0
        });
      }
    };
    exports2.preloadModule = function(href, options) {
      if ("string" === typeof href)
        if (options) {
          var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);
          Internals.d.m(href, {
            as: "string" === typeof options.as && "script" !== options.as ? options.as : void 0,
            crossOrigin,
            integrity: "string" === typeof options.integrity ? options.integrity : void 0
          });
        } else
          Internals.d.m(href);
    };
    exports2.requestFormReset = function(form) {
      Internals.d.r(form);
    };
    exports2.unstable_batchedUpdates = function(fn, a) {
      return fn(a);
    };
    exports2.useFormState = function(action, initialState, permalink) {
      return ReactSharedInternals.H.useFormState(action, initialState, permalink);
    };
    exports2.useFormStatus = function() {
      return ReactSharedInternals.H.useHostTransitionStatus();
    };
    exports2.version = "19.0.0-experimental-4508873393-20240430";
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React = require_react();
        var ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var stack = ReactSharedInternals.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var disableCommentsAsDOMContainers = true;
        var NoLane = (
          /*                          */
          0
        );
        var SyncLane = (
          /*                        */
          2
        );
        var NoEventPriority = NoLane;
        var DiscreteEventPriority = SyncLane;
        function noop() {
        }
        function requestFormReset$1(element) {
          throw new Error("Invalid form element. requestFormReset must be passed a form that was rendered by React.");
        }
        var DefaultDispatcher = {
          f: noop,
          r: requestFormReset$1,
          D: noop,
          C: noop,
          L: noop,
          m: noop,
          X: noop,
          S: noop,
          M: noop
        };
        var Internals = {
          d: DefaultDispatcher,
          p: NoEventPriority,
          findDOMNode: null
        };
        var ReactVersion = "19.0.0-experimental-4508873393-20240430";
        var ELEMENT_NODE = 1;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function createPortal$1(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        function flushSyncImpl(fn) {
          var previousTransition = ReactSharedInternals.T;
          var previousUpdatePriority = Internals.p;
          try {
            ReactSharedInternals.T = null;
            Internals.p = DiscreteEventPriority;
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            ReactSharedInternals.T = previousTransition;
            Internals.p = previousUpdatePriority;
            var wasInRender = Internals.d.f();
            {
              if (wasInRender) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
          }
        }
        var flushSync = flushSyncImpl;
        function getCrossOriginString(input) {
          if (typeof input === "string") {
            return input === "use-credentials" ? input : "";
          }
          return void 0;
        }
        function getCrossOriginStringAs(as, input) {
          if (as === "font") {
            return "";
          }
          if (typeof input === "string") {
            return input === "use-credentials" ? input : "";
          }
          return void 0;
        }
        function prefetchDNS(href) {
          {
            if (typeof href !== "string" || !href) {
              error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
            } else if (arguments.length > 1) {
              var options = arguments[1];
              if (typeof options === "object" && options.hasOwnProperty("crossOrigin")) {
                error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options));
              } else {
                error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.", getValueDescriptorExpectingEnumForWarning(options));
              }
            }
          }
          if (typeof href === "string") {
            Internals.d.D(
              /* prefetchDNS */
              href
            );
          }
        }
        function preconnect(href, options) {
          {
            if (typeof href !== "string" || !href) {
              error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
            } else if (options != null && typeof options !== "object") {
              error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.", getValueDescriptorExpectingEnumForWarning(options));
            } else if (options != null && typeof options.crossOrigin !== "string") {
              error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.", getValueDescriptorExpectingObjectForWarning(options.crossOrigin));
            }
          }
          if (typeof href === "string") {
            var crossOrigin = options ? getCrossOriginString(options.crossOrigin) : null;
            Internals.d.C(
              /* preconnect */
              href,
              crossOrigin
            );
          }
        }
        function preload(href, options) {
          {
            var encountered = "";
            if (typeof href !== "string" || !href) {
              encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".";
            }
            if (options == null || typeof options !== "object") {
              encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + ".";
            } else if (typeof options.as !== "string" || !options.as) {
              encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".";
            }
            if (encountered) {
              error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s', encountered);
            }
          }
          if (typeof href === "string" && // We check existence because we cannot enforce this function is actually called with the stated type
          typeof options === "object" && options !== null && typeof options.as === "string") {
            var as = options.as;
            var crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);
            Internals.d.L(
              /* preload */
              href,
              as,
              {
                crossOrigin,
                integrity: typeof options.integrity === "string" ? options.integrity : void 0,
                nonce: typeof options.nonce === "string" ? options.nonce : void 0,
                type: typeof options.type === "string" ? options.type : void 0,
                fetchPriority: typeof options.fetchPriority === "string" ? options.fetchPriority : void 0,
                referrerPolicy: typeof options.referrerPolicy === "string" ? options.referrerPolicy : void 0,
                imageSrcSet: typeof options.imageSrcSet === "string" ? options.imageSrcSet : void 0,
                imageSizes: typeof options.imageSizes === "string" ? options.imageSizes : void 0,
                media: typeof options.media === "string" ? options.media : void 0
              }
            );
          }
        }
        function preloadModule(href, options) {
          {
            var encountered = "";
            if (typeof href !== "string" || !href) {
              encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".";
            }
            if (options !== void 0 && typeof options !== "object") {
              encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + ".";
            } else if (options && "as" in options && typeof options.as !== "string") {
              encountered += " The `as` option encountered was " + getValueDescriptorExpectingObjectForWarning(options.as) + ".";
            }
            if (encountered) {
              error('ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s', encountered);
            }
          }
          if (typeof href === "string") {
            if (options) {
              var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);
              Internals.d.m(
                /* preloadModule */
                href,
                {
                  as: typeof options.as === "string" && options.as !== "script" ? options.as : void 0,
                  crossOrigin,
                  integrity: typeof options.integrity === "string" ? options.integrity : void 0
                }
              );
            } else {
              Internals.d.m(
                /* preloadModule */
                href
              );
            }
          }
        }
        function preinit(href, options) {
          {
            if (typeof href !== "string" || !href) {
              error("ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.", getValueDescriptorExpectingObjectForWarning(href));
            } else if (options == null || typeof options !== "object") {
              error("ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.", getValueDescriptorExpectingEnumForWarning(options));
            } else if (options.as !== "style" && options.as !== "script") {
              error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".', getValueDescriptorExpectingEnumForWarning(options.as));
            }
          }
          if (typeof href === "string" && options && typeof options.as === "string") {
            var as = options.as;
            var crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);
            var integrity = typeof options.integrity === "string" ? options.integrity : void 0;
            var fetchPriority = typeof options.fetchPriority === "string" ? options.fetchPriority : void 0;
            if (as === "style") {
              Internals.d.S(
                /* preinitStyle */
                href,
                typeof options.precedence === "string" ? options.precedence : void 0,
                {
                  crossOrigin,
                  integrity,
                  fetchPriority
                }
              );
            } else if (as === "script") {
              Internals.d.X(
                /* preinitScript */
                href,
                {
                  crossOrigin,
                  integrity,
                  fetchPriority,
                  nonce: typeof options.nonce === "string" ? options.nonce : void 0
                }
              );
            }
          }
        }
        function preinitModule(href, options) {
          {
            var encountered = "";
            if (typeof href !== "string" || !href) {
              encountered += " The `href` argument encountered was " + getValueDescriptorExpectingObjectForWarning(href) + ".";
            }
            if (options !== void 0 && typeof options !== "object") {
              encountered += " The `options` argument encountered was " + getValueDescriptorExpectingObjectForWarning(options) + ".";
            } else if (options && "as" in options && options.as !== "script") {
              encountered += " The `as` option encountered was " + getValueDescriptorExpectingEnumForWarning(options.as) + ".";
            }
            if (encountered) {
              error("ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s", encountered);
            } else {
              var as = options && typeof options.as === "string" ? options.as : "script";
              switch (as) {
                case "script": {
                  break;
                }
                default: {
                  var typeOfAs = getValueDescriptorExpectingEnumForWarning(as);
                  error('ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)', typeOfAs, href);
                }
              }
            }
          }
          if (typeof href === "string") {
            if (typeof options === "object" && options !== null) {
              if (options.as == null || options.as === "script") {
                var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);
                Internals.d.M(
                  /* preinitModuleScript */
                  href,
                  {
                    crossOrigin,
                    integrity: typeof options.integrity === "string" ? options.integrity : void 0,
                    nonce: typeof options.nonce === "string" ? options.nonce : void 0
                  }
                );
              }
            } else if (options == null) {
              Internals.d.M(
                /* preinitModuleScript */
                href
              );
            }
          }
        }
        function getValueDescriptorExpectingObjectForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : 'something with type "' + typeof thing + '"';
        }
        function getValueDescriptorExpectingEnumForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : typeof thing === "string" ? JSON.stringify(thing) : typeof thing === "number" ? "`" + thing + "`" : 'something with type "' + typeof thing + '"';
        }
        function resolveDispatcher() {
          var dispatcher = ReactSharedInternals.H;
          {
            if (dispatcher === null) {
              error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useFormStatus() {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useHostTransitionStatus();
          }
        }
        function useFormState(action, initialState, permalink) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useFormState(action, initialState, permalink);
          }
        }
        function requestFormReset(form) {
          Internals.d.r(
            /* requestFormReset */
            form
          );
        }
        {
          if (typeof Map !== "function" || // $FlowFixMe[prop-missing] Flow incorrectly thinks Map has no prototype
          Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowFixMe[prop-missing] Flow incorrectly thinks Set has no prototype
          Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        function batchedUpdates(fn, a) {
          return fn(a);
        }
        function createPortal(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal$1(children, container, null, key);
        }
        exports2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
        exports2.createPortal = createPortal;
        exports2.flushSync = flushSync;
        exports2.preconnect = preconnect;
        exports2.prefetchDNS = prefetchDNS;
        exports2.preinit = preinit;
        exports2.preinitModule = preinitModule;
        exports2.preload = preload;
        exports2.preloadModule = preloadModule;
        exports2.requestFormReset = requestFormReset;
        exports2.unstable_batchedUpdates = batchedUpdates;
        exports2.useFormState = useFormState;
        exports2.useFormStatus = useFormStatus;
        exports2.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports2, module2) {
    "use strict";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (process.env.NODE_ENV !== "production") {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (process.env.NODE_ENV === "production") {
      checkDCE();
      module2.exports = require_react_dom_production();
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-server-legacy.node.production.js
var require_react_dom_server_legacy_node_production = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.node.production.js"(exports2) {
    "use strict";
    var React = require_react();
    var ReactDOM = require_react_dom();
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_SCOPE_TYPE = Symbol.for("react.scope");
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
    var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
    var REACT_POSTPONE_TYPE = Symbol.for("react.postpone");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var ASYNC_ITERATOR = Symbol.asyncIterator;
    var isArrayImpl = Array.isArray;
    function murmurhash3_32_gc(key, seed) {
      var remainder = key.length & 3;
      var bytes = key.length - remainder;
      var h1 = seed;
      for (seed = 0; seed < bytes; ) {
        var k1 = key.charCodeAt(seed) & 255 | (key.charCodeAt(++seed) & 255) << 8 | (key.charCodeAt(++seed) & 255) << 16 | (key.charCodeAt(++seed) & 255) << 24;
        ++seed;
        k1 = 3432918353 * (k1 & 65535) + ((3432918353 * (k1 >>> 16) & 65535) << 16) & 4294967295;
        k1 = k1 << 15 | k1 >>> 17;
        k1 = 461845907 * (k1 & 65535) + ((461845907 * (k1 >>> 16) & 65535) << 16) & 4294967295;
        h1 ^= k1;
        h1 = h1 << 13 | h1 >>> 19;
        h1 = 5 * (h1 & 65535) + ((5 * (h1 >>> 16) & 65535) << 16) & 4294967295;
        h1 = (h1 & 65535) + 27492 + (((h1 >>> 16) + 58964 & 65535) << 16);
      }
      k1 = 0;
      switch (remainder) {
        case 3:
          k1 ^= (key.charCodeAt(seed + 2) & 255) << 16;
        case 2:
          k1 ^= (key.charCodeAt(seed + 1) & 255) << 8;
        case 1:
          k1 ^= key.charCodeAt(seed) & 255, k1 = 3432918353 * (k1 & 65535) + ((3432918353 * (k1 >>> 16) & 65535) << 16) & 4294967295, k1 = k1 << 15 | k1 >>> 17, h1 ^= 461845907 * (k1 & 65535) + ((461845907 * (k1 >>> 16) & 65535) << 16) & 4294967295;
      }
      h1 ^= key.length;
      h1 ^= h1 >>> 16;
      h1 = 2246822507 * (h1 & 65535) + ((2246822507 * (h1 >>> 16) & 65535) << 16) & 4294967295;
      h1 ^= h1 >>> 13;
      h1 = 3266489909 * (h1 & 65535) + ((3266489909 * (h1 >>> 16) & 65535) << 16) & 4294967295;
      return (h1 ^ h1 >>> 16) >>> 0;
    }
    var assign = Object.assign;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var VALID_ATTRIBUTE_NAME_REGEX = RegExp(
      "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
    );
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
        return true;
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
        return false;
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
        return validatedAttributeNameCache[attributeName] = true;
      illegalAttributeNameCache[attributeName] = true;
      return false;
    }
    var unitlessNumbers = new Set(
      "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
        " "
      )
    );
    var aliases = /* @__PURE__ */ new Map([
      ["acceptCharset", "accept-charset"],
      ["htmlFor", "for"],
      ["httpEquiv", "http-equiv"],
      ["crossOrigin", "crossorigin"],
      ["accentHeight", "accent-height"],
      ["alignmentBaseline", "alignment-baseline"],
      ["arabicForm", "arabic-form"],
      ["baselineShift", "baseline-shift"],
      ["capHeight", "cap-height"],
      ["clipPath", "clip-path"],
      ["clipRule", "clip-rule"],
      ["colorInterpolation", "color-interpolation"],
      ["colorInterpolationFilters", "color-interpolation-filters"],
      ["colorProfile", "color-profile"],
      ["colorRendering", "color-rendering"],
      ["dominantBaseline", "dominant-baseline"],
      ["enableBackground", "enable-background"],
      ["fillOpacity", "fill-opacity"],
      ["fillRule", "fill-rule"],
      ["floodColor", "flood-color"],
      ["floodOpacity", "flood-opacity"],
      ["fontFamily", "font-family"],
      ["fontSize", "font-size"],
      ["fontSizeAdjust", "font-size-adjust"],
      ["fontStretch", "font-stretch"],
      ["fontStyle", "font-style"],
      ["fontVariant", "font-variant"],
      ["fontWeight", "font-weight"],
      ["glyphName", "glyph-name"],
      ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
      ["glyphOrientationVertical", "glyph-orientation-vertical"],
      ["horizAdvX", "horiz-adv-x"],
      ["horizOriginX", "horiz-origin-x"],
      ["imageRendering", "image-rendering"],
      ["letterSpacing", "letter-spacing"],
      ["lightingColor", "lighting-color"],
      ["markerEnd", "marker-end"],
      ["markerMid", "marker-mid"],
      ["markerStart", "marker-start"],
      ["overlinePosition", "overline-position"],
      ["overlineThickness", "overline-thickness"],
      ["paintOrder", "paint-order"],
      ["panose-1", "panose-1"],
      ["pointerEvents", "pointer-events"],
      ["renderingIntent", "rendering-intent"],
      ["shapeRendering", "shape-rendering"],
      ["stopColor", "stop-color"],
      ["stopOpacity", "stop-opacity"],
      ["strikethroughPosition", "strikethrough-position"],
      ["strikethroughThickness", "strikethrough-thickness"],
      ["strokeDasharray", "stroke-dasharray"],
      ["strokeDashoffset", "stroke-dashoffset"],
      ["strokeLinecap", "stroke-linecap"],
      ["strokeLinejoin", "stroke-linejoin"],
      ["strokeMiterlimit", "stroke-miterlimit"],
      ["strokeOpacity", "stroke-opacity"],
      ["strokeWidth", "stroke-width"],
      ["textAnchor", "text-anchor"],
      ["textDecoration", "text-decoration"],
      ["textRendering", "text-rendering"],
      ["transformOrigin", "transform-origin"],
      ["underlinePosition", "underline-position"],
      ["underlineThickness", "underline-thickness"],
      ["unicodeBidi", "unicode-bidi"],
      ["unicodeRange", "unicode-range"],
      ["unitsPerEm", "units-per-em"],
      ["vAlphabetic", "v-alphabetic"],
      ["vHanging", "v-hanging"],
      ["vIdeographic", "v-ideographic"],
      ["vMathematical", "v-mathematical"],
      ["vectorEffect", "vector-effect"],
      ["vertAdvY", "vert-adv-y"],
      ["vertOriginX", "vert-origin-x"],
      ["vertOriginY", "vert-origin-y"],
      ["wordSpacing", "word-spacing"],
      ["writingMode", "writing-mode"],
      ["xmlnsXlink", "xmlns:xlink"],
      ["xHeight", "x-height"]
    ]);
    var matchHtmlRegExp = /["'&<>]/;
    function escapeTextForBrowser(text) {
      if ("boolean" === typeof text || "number" === typeof text || "bigint" === typeof text)
        return "" + text;
      text = "" + text;
      var match = matchHtmlRegExp.exec(text);
      if (match) {
        var html = "", index, lastIndex = 0;
        for (index = match.index; index < text.length; index++) {
          switch (text.charCodeAt(index)) {
            case 34:
              match = "&quot;";
              break;
            case 38:
              match = "&amp;";
              break;
            case 39:
              match = "&#x27;";
              break;
            case 60:
              match = "&lt;";
              break;
            case 62:
              match = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index && (html += text.slice(lastIndex, index));
          lastIndex = index + 1;
          html += match;
        }
        text = lastIndex !== index ? html + text.slice(lastIndex, index) : html;
      }
      return text;
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
    function sanitizeURL(url) {
      return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
    }
    var ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    var ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    var sharedNotPendingObject = {
      pending: false,
      data: null,
      method: null,
      action: null
    };
    var previousDispatcher = ReactDOMSharedInternals.d;
    ReactDOMSharedInternals.d = {
      f: previousDispatcher.f,
      r: previousDispatcher.r,
      D: prefetchDNS,
      C: preconnect,
      L: preload,
      m: preloadModule,
      X: preinitScript,
      S: preinitStyle,
      M: preinitModuleScript
    };
    var PRELOAD_NO_CREDS = [];
    var scriptRegex = /(<\/|<)(s)(cript)/gi;
    function scriptReplacer(match, prefix2, s, suffix) {
      return "" + prefix2 + ("s" === s ? "\\u0073" : "\\u0053") + suffix;
    }
    function createResumableState(identifierPrefix, externalRuntimeConfig, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
      var streamingFormat = 0;
      void 0 !== externalRuntimeConfig && (streamingFormat = 1);
      return {
        idPrefix: void 0 === identifierPrefix ? "" : identifierPrefix,
        nextFormID: 0,
        streamingFormat,
        bootstrapScriptContent,
        bootstrapScripts,
        bootstrapModules,
        instructions: 0,
        hasBody: false,
        hasHtml: false,
        unknownResources: {},
        dnsResources: {},
        connectResources: { default: {}, anonymous: {}, credentials: {} },
        imageResources: {},
        styleResources: {},
        scriptResources: {},
        moduleUnknownResources: {},
        moduleScriptResources: {}
      };
    }
    function createFormatContext(insertionMode, selectedValue, tagScope) {
      return {
        insertionMode,
        selectedValue,
        tagScope
      };
    }
    function getChildFormatContext(parentContext, type, props) {
      switch (type) {
        case "noscript":
          return createFormatContext(2, null, parentContext.tagScope | 1);
        case "select":
          return createFormatContext(
            2,
            null != props.value ? props.value : props.defaultValue,
            parentContext.tagScope
          );
        case "svg":
          return createFormatContext(3, null, parentContext.tagScope);
        case "picture":
          return createFormatContext(2, null, parentContext.tagScope | 2);
        case "math":
          return createFormatContext(4, null, parentContext.tagScope);
        case "foreignObject":
          return createFormatContext(2, null, parentContext.tagScope);
        case "table":
          return createFormatContext(5, null, parentContext.tagScope);
        case "thead":
        case "tbody":
        case "tfoot":
          return createFormatContext(6, null, parentContext.tagScope);
        case "colgroup":
          return createFormatContext(8, null, parentContext.tagScope);
        case "tr":
          return createFormatContext(7, null, parentContext.tagScope);
      }
      return 5 <= parentContext.insertionMode ? createFormatContext(2, null, parentContext.tagScope) : 0 === parentContext.insertionMode ? "html" === type ? createFormatContext(1, null, parentContext.tagScope) : createFormatContext(2, null, parentContext.tagScope) : 1 === parentContext.insertionMode ? createFormatContext(2, null, parentContext.tagScope) : parentContext;
    }
    var styleNameCache = /* @__PURE__ */ new Map();
    function pushStyleAttribute(target, style) {
      if ("object" !== typeof style)
        throw Error(
          "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
        );
      var isFirst = true, styleName;
      for (styleName in style)
        if (hasOwnProperty.call(style, styleName)) {
          var styleValue = style[styleName];
          if (null != styleValue && "boolean" !== typeof styleValue && "" !== styleValue) {
            if (0 === styleName.indexOf("--")) {
              var nameChunk = escapeTextForBrowser(styleName);
              styleValue = escapeTextForBrowser(("" + styleValue).trim());
            } else
              nameChunk = styleNameCache.get(styleName), void 0 === nameChunk && (nameChunk = escapeTextForBrowser(
                styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-")
              ), styleNameCache.set(styleName, nameChunk)), styleValue = "number" === typeof styleValue ? 0 === styleValue || unitlessNumbers.has(styleName) ? "" + styleValue : styleValue + "px" : escapeTextForBrowser(("" + styleValue).trim());
            isFirst ? (isFirst = false, target.push(' style="', nameChunk, ":", styleValue)) : target.push(";", nameChunk, ":", styleValue);
          }
        }
      isFirst || target.push('"');
    }
    function pushBooleanAttribute(target, name, value) {
      value && "function" !== typeof value && "symbol" !== typeof value && target.push(" ", name, '=""');
    }
    function pushStringAttribute(target, name, value) {
      "function" !== typeof value && "symbol" !== typeof value && "boolean" !== typeof value && target.push(" ", name, '="', escapeTextForBrowser(value), '"');
    }
    var actionJavaScriptURL = escapeTextForBrowser(
      "javascript:throw new Error('React form unexpectedly submitted.')"
    );
    function pushAdditionalFormField(value, key) {
      this.push('<input type="hidden"');
      if ("string" !== typeof value)
        throw Error(
          "File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action."
        );
      pushStringAttribute(this, "name", key);
      pushStringAttribute(this, "value", value);
      this.push("/>");
    }
    function getCustomFormFields(resumableState, formAction) {
      if ("function" === typeof formAction.$$FORM_ACTION) {
        var id = resumableState.nextFormID++;
        resumableState = resumableState.idPrefix + id;
        try {
          return formAction.$$FORM_ACTION(resumableState);
        } catch (x) {
          if ("object" === typeof x && null !== x && "function" === typeof x.then)
            throw x;
        }
      }
      return null;
    }
    function pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name) {
      var formData = null;
      if ("function" === typeof formAction) {
        var customFields = getCustomFormFields(resumableState, formAction);
        null !== customFields ? (name = customFields.name, formAction = customFields.action || "", formEncType = customFields.encType, formMethod = customFields.method, formTarget = customFields.target, formData = customFields.data) : (target.push(" ", "formAction", '="', actionJavaScriptURL, '"'), formTarget = formMethod = formEncType = formAction = name = null, injectFormReplayingRuntime(resumableState, renderState));
      }
      null != name && pushAttribute(target, "name", name);
      null != formAction && pushAttribute(target, "formAction", formAction);
      null != formEncType && pushAttribute(target, "formEncType", formEncType);
      null != formMethod && pushAttribute(target, "formMethod", formMethod);
      null != formTarget && pushAttribute(target, "formTarget", formTarget);
      return formData;
    }
    function pushAttribute(target, name, value) {
      switch (name) {
        case "className":
          pushStringAttribute(target, "class", value);
          break;
        case "tabIndex":
          pushStringAttribute(target, "tabindex", value);
          break;
        case "dir":
        case "role":
        case "viewBox":
        case "width":
        case "height":
          pushStringAttribute(target, name, value);
          break;
        case "style":
          pushStyleAttribute(target, value);
          break;
        case "src":
        case "href":
          if ("" === value)
            break;
        case "action":
        case "formAction":
          if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value)
            break;
          value = sanitizeURL("" + value);
          target.push(" ", name, '="', escapeTextForBrowser(value), '"');
          break;
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "ref":
          break;
        case "autoFocus":
        case "multiple":
        case "muted":
          pushBooleanAttribute(target, name.toLowerCase(), value);
          break;
        case "xlinkHref":
          if ("function" === typeof value || "symbol" === typeof value || "boolean" === typeof value)
            break;
          value = sanitizeURL("" + value);
          target.push(" ", "xlink:href", '="', escapeTextForBrowser(value), '"');
          break;
        case "contentEditable":
        case "spellCheck":
        case "draggable":
        case "value":
        case "autoReverse":
        case "externalResourcesRequired":
        case "focusable":
        case "preserveAlpha":
          "function" !== typeof value && "symbol" !== typeof value && target.push(" ", name, '="', escapeTextForBrowser(value), '"');
          break;
        case "inert":
        case "allowFullScreen":
        case "async":
        case "autoPlay":
        case "controls":
        case "default":
        case "defer":
        case "disabled":
        case "disablePictureInPicture":
        case "disableRemotePlayback":
        case "formNoValidate":
        case "hidden":
        case "loop":
        case "noModule":
        case "noValidate":
        case "open":
        case "playsInline":
        case "readOnly":
        case "required":
        case "reversed":
        case "scoped":
        case "seamless":
        case "itemScope":
          value && "function" !== typeof value && "symbol" !== typeof value && target.push(" ", name, '=""');
          break;
        case "capture":
        case "download":
          true === value ? target.push(" ", name, '=""') : false !== value && "function" !== typeof value && "symbol" !== typeof value && target.push(" ", name, '="', escapeTextForBrowser(value), '"');
          break;
        case "cols":
        case "rows":
        case "size":
        case "span":
          "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value && target.push(" ", name, '="', escapeTextForBrowser(value), '"');
          break;
        case "rowSpan":
        case "start":
          "function" === typeof value || "symbol" === typeof value || isNaN(value) || target.push(" ", name, '="', escapeTextForBrowser(value), '"');
          break;
        case "xlinkActuate":
          pushStringAttribute(target, "xlink:actuate", value);
          break;
        case "xlinkArcrole":
          pushStringAttribute(target, "xlink:arcrole", value);
          break;
        case "xlinkRole":
          pushStringAttribute(target, "xlink:role", value);
          break;
        case "xlinkShow":
          pushStringAttribute(target, "xlink:show", value);
          break;
        case "xlinkTitle":
          pushStringAttribute(target, "xlink:title", value);
          break;
        case "xlinkType":
          pushStringAttribute(target, "xlink:type", value);
          break;
        case "xmlBase":
          pushStringAttribute(target, "xml:base", value);
          break;
        case "xmlLang":
          pushStringAttribute(target, "xml:lang", value);
          break;
        case "xmlSpace":
          pushStringAttribute(target, "xml:space", value);
          break;
        default:
          if (!(2 < name.length) || "o" !== name[0] && "O" !== name[0] || "n" !== name[1] && "N" !== name[1]) {
            if (name = aliases.get(name) || name, isAttributeNameSafe(name)) {
              switch (typeof value) {
                case "function":
                case "symbol":
                  return;
                case "boolean":
                  var prefix$8 = name.toLowerCase().slice(0, 5);
                  if ("data-" !== prefix$8 && "aria-" !== prefix$8)
                    return;
              }
              target.push(" ", name, '="', escapeTextForBrowser(value), '"');
            }
          }
      }
    }
    function pushInnerHTML(target, innerHTML, children) {
      if (null != innerHTML) {
        if (null != children)
          throw Error(
            "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
          );
        if ("object" !== typeof innerHTML || !("__html" in innerHTML))
          throw Error(
            "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
          );
        innerHTML = innerHTML.__html;
        null !== innerHTML && void 0 !== innerHTML && target.push("" + innerHTML);
      }
    }
    function flattenOptionChildren(children) {
      var content = "";
      React.Children.forEach(children, function(child) {
        null != child && (content += child);
      });
      return content;
    }
    function injectFormReplayingRuntime(resumableState, renderState) {
      0 !== (resumableState.instructions & 16) || renderState.externalRuntimeScript || (resumableState.instructions |= 16, renderState.bootstrapChunks.unshift(
        renderState.startInlineScript,
        `addEventListener("submit",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute("formAction");null!=f&&(e=f,b=null)}"javascript:throw new Error('React form unexpectedly submitted.')"===e&&(a.preventDefault(),b?(a=document.createElement("input"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.ownerDocument||c,(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,d,b))}});`,
        "</script>"
      ));
    }
    function pushLinkImpl(target, props) {
      target.push(startChunkForTag("link"));
      for (var propKey in props)
        if (hasOwnProperty.call(props, propKey)) {
          var propValue = props[propKey];
          if (null != propValue)
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(
                  "link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                );
              default:
                pushAttribute(target, propKey, propValue);
            }
        }
      target.push("/>");
      return null;
    }
    var styleRegex = /(<\/|<)(s)(tyle)/gi;
    function styleReplacer(match, prefix2, s, suffix) {
      return "" + prefix2 + ("s" === s ? "\\73 " : "\\53 ") + suffix;
    }
    function pushSelfClosing(target, props, tag) {
      target.push(startChunkForTag(tag));
      for (var propKey in props)
        if (hasOwnProperty.call(props, propKey)) {
          var propValue = props[propKey];
          if (null != propValue)
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(
                  tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                );
              default:
                pushAttribute(target, propKey, propValue);
            }
        }
      target.push("/>");
      return null;
    }
    function pushTitleImpl(target, props) {
      target.push(startChunkForTag("title"));
      var children = null, innerHTML = null, propKey;
      for (propKey in props)
        if (hasOwnProperty.call(props, propKey)) {
          var propValue = props[propKey];
          if (null != propValue)
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, propKey, propValue);
            }
        }
      target.push(">");
      props = Array.isArray(children) ? 2 > children.length ? children[0] : null : children;
      "function" !== typeof props && "symbol" !== typeof props && null !== props && void 0 !== props && target.push(escapeTextForBrowser("" + props));
      pushInnerHTML(target, innerHTML, children);
      target.push(endChunkForTag("title"));
      return null;
    }
    function pushScriptImpl(target, props) {
      target.push(startChunkForTag("script"));
      var children = null, innerHTML = null, propKey;
      for (propKey in props)
        if (hasOwnProperty.call(props, propKey)) {
          var propValue = props[propKey];
          if (null != propValue)
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, propKey, propValue);
            }
        }
      target.push(">");
      pushInnerHTML(target, innerHTML, children);
      "string" === typeof children && target.push(("" + children).replace(scriptRegex, scriptReplacer));
      target.push(endChunkForTag("script"));
      return null;
    }
    function pushStartGenericElement(target, props, tag) {
      target.push(startChunkForTag(tag));
      var innerHTML = tag = null, propKey;
      for (propKey in props)
        if (hasOwnProperty.call(props, propKey)) {
          var propValue = props[propKey];
          if (null != propValue)
            switch (propKey) {
              case "children":
                tag = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, propKey, propValue);
            }
        }
      target.push(">");
      pushInnerHTML(target, innerHTML, tag);
      return "string" === typeof tag ? (target.push(escapeTextForBrowser(tag)), null) : tag;
    }
    var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
    var validatedTagCache = /* @__PURE__ */ new Map();
    function startChunkForTag(tag) {
      var tagStartChunk = validatedTagCache.get(tag);
      if (void 0 === tagStartChunk) {
        if (!VALID_TAG_REGEX.test(tag))
          throw Error("Invalid tag: " + tag);
        tagStartChunk = "<" + tag;
        validatedTagCache.set(tag, tagStartChunk);
      }
      return tagStartChunk;
    }
    function pushStartInstance(target$jscomp$0, type, props, resumableState, renderState, hoistableState, formatContext, textEmbedded, isFallback) {
      switch (type) {
        case "div":
        case "span":
        case "svg":
        case "path":
          break;
        case "a":
          target$jscomp$0.push(startChunkForTag("a"));
          var children = null, innerHTML = null, propKey;
          for (propKey in props)
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (null != propValue)
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "href":
                    "" === propValue ? pushStringAttribute(target$jscomp$0, "href", "") : pushAttribute(target$jscomp$0, propKey, propValue);
                    break;
                  default:
                    pushAttribute(target$jscomp$0, propKey, propValue);
                }
            }
          target$jscomp$0.push(">");
          pushInnerHTML(target$jscomp$0, innerHTML, children);
          if ("string" === typeof children) {
            target$jscomp$0.push(escapeTextForBrowser(children));
            var JSCompiler_inline_result = null;
          } else
            JSCompiler_inline_result = children;
          return JSCompiler_inline_result;
        case "g":
        case "p":
        case "li":
          break;
        case "select":
          target$jscomp$0.push(startChunkForTag("select"));
          var children$jscomp$0 = null, innerHTML$jscomp$0 = null, propKey$jscomp$0;
          for (propKey$jscomp$0 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$0)) {
              var propValue$jscomp$0 = props[propKey$jscomp$0];
              if (null != propValue$jscomp$0)
                switch (propKey$jscomp$0) {
                  case "children":
                    children$jscomp$0 = propValue$jscomp$0;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML$jscomp$0 = propValue$jscomp$0;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$0,
                      propValue$jscomp$0
                    );
                }
            }
          target$jscomp$0.push(">");
          pushInnerHTML(target$jscomp$0, innerHTML$jscomp$0, children$jscomp$0);
          return children$jscomp$0;
        case "option":
          var selectedValue = formatContext.selectedValue;
          target$jscomp$0.push(startChunkForTag("option"));
          var children$jscomp$1 = null, value = null, selected = null, innerHTML$jscomp$1 = null, propKey$jscomp$1;
          for (propKey$jscomp$1 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$1)) {
              var propValue$jscomp$1 = props[propKey$jscomp$1];
              if (null != propValue$jscomp$1)
                switch (propKey$jscomp$1) {
                  case "children":
                    children$jscomp$1 = propValue$jscomp$1;
                    break;
                  case "selected":
                    selected = propValue$jscomp$1;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML$jscomp$1 = propValue$jscomp$1;
                    break;
                  case "value":
                    value = propValue$jscomp$1;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$1,
                      propValue$jscomp$1
                    );
                }
            }
          if (null != selectedValue) {
            var stringValue = null !== value ? "" + value : flattenOptionChildren(children$jscomp$1);
            if (isArrayImpl(selectedValue))
              for (var i = 0; i < selectedValue.length; i++) {
                if ("" + selectedValue[i] === stringValue) {
                  target$jscomp$0.push(' selected=""');
                  break;
                }
              }
            else
              "" + selectedValue === stringValue && target$jscomp$0.push(' selected=""');
          } else
            selected && target$jscomp$0.push(' selected=""');
          target$jscomp$0.push(">");
          pushInnerHTML(target$jscomp$0, innerHTML$jscomp$1, children$jscomp$1);
          return children$jscomp$1;
        case "textarea":
          target$jscomp$0.push(startChunkForTag("textarea"));
          var value$jscomp$0 = null, defaultValue = null, children$jscomp$2 = null, propKey$jscomp$2;
          for (propKey$jscomp$2 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$2)) {
              var propValue$jscomp$2 = props[propKey$jscomp$2];
              if (null != propValue$jscomp$2)
                switch (propKey$jscomp$2) {
                  case "children":
                    children$jscomp$2 = propValue$jscomp$2;
                    break;
                  case "value":
                    value$jscomp$0 = propValue$jscomp$2;
                    break;
                  case "defaultValue":
                    defaultValue = propValue$jscomp$2;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                    );
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$2,
                      propValue$jscomp$2
                    );
                }
            }
          null === value$jscomp$0 && null !== defaultValue && (value$jscomp$0 = defaultValue);
          target$jscomp$0.push(">");
          if (null != children$jscomp$2) {
            if (null != value$jscomp$0)
              throw Error(
                "If you supply `defaultValue` on a <textarea>, do not pass children."
              );
            if (isArrayImpl(children$jscomp$2)) {
              if (1 < children$jscomp$2.length)
                throw Error("<textarea> can only have at most one child.");
              value$jscomp$0 = "" + children$jscomp$2[0];
            }
            value$jscomp$0 = "" + children$jscomp$2;
          }
          "string" === typeof value$jscomp$0 && "\n" === value$jscomp$0[0] && target$jscomp$0.push("\n");
          null !== value$jscomp$0 && target$jscomp$0.push(escapeTextForBrowser("" + value$jscomp$0));
          return null;
        case "input":
          target$jscomp$0.push(startChunkForTag("input"));
          var name = null, formAction = null, formEncType = null, formMethod = null, formTarget = null, value$jscomp$1 = null, defaultValue$jscomp$0 = null, checked = null, defaultChecked = null, propKey$jscomp$3;
          for (propKey$jscomp$3 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$3)) {
              var propValue$jscomp$3 = props[propKey$jscomp$3];
              if (null != propValue$jscomp$3)
                switch (propKey$jscomp$3) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  case "name":
                    name = propValue$jscomp$3;
                    break;
                  case "formAction":
                    formAction = propValue$jscomp$3;
                    break;
                  case "formEncType":
                    formEncType = propValue$jscomp$3;
                    break;
                  case "formMethod":
                    formMethod = propValue$jscomp$3;
                    break;
                  case "formTarget":
                    formTarget = propValue$jscomp$3;
                    break;
                  case "defaultChecked":
                    defaultChecked = propValue$jscomp$3;
                    break;
                  case "defaultValue":
                    defaultValue$jscomp$0 = propValue$jscomp$3;
                    break;
                  case "checked":
                    checked = propValue$jscomp$3;
                    break;
                  case "value":
                    value$jscomp$1 = propValue$jscomp$3;
                    break;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$3,
                      propValue$jscomp$3
                    );
                }
            }
          var formData = pushFormActionAttribute(
            target$jscomp$0,
            resumableState,
            renderState,
            formAction,
            formEncType,
            formMethod,
            formTarget,
            name
          );
          null !== checked ? pushBooleanAttribute(target$jscomp$0, "checked", checked) : null !== defaultChecked && pushBooleanAttribute(target$jscomp$0, "checked", defaultChecked);
          null !== value$jscomp$1 ? pushAttribute(target$jscomp$0, "value", value$jscomp$1) : null !== defaultValue$jscomp$0 && pushAttribute(target$jscomp$0, "value", defaultValue$jscomp$0);
          target$jscomp$0.push("/>");
          null != formData && formData.forEach(pushAdditionalFormField, target$jscomp$0);
          return null;
        case "button":
          target$jscomp$0.push(startChunkForTag("button"));
          var children$jscomp$3 = null, innerHTML$jscomp$2 = null, name$jscomp$0 = null, formAction$jscomp$0 = null, formEncType$jscomp$0 = null, formMethod$jscomp$0 = null, formTarget$jscomp$0 = null, propKey$jscomp$4;
          for (propKey$jscomp$4 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$4)) {
              var propValue$jscomp$4 = props[propKey$jscomp$4];
              if (null != propValue$jscomp$4)
                switch (propKey$jscomp$4) {
                  case "children":
                    children$jscomp$3 = propValue$jscomp$4;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML$jscomp$2 = propValue$jscomp$4;
                    break;
                  case "name":
                    name$jscomp$0 = propValue$jscomp$4;
                    break;
                  case "formAction":
                    formAction$jscomp$0 = propValue$jscomp$4;
                    break;
                  case "formEncType":
                    formEncType$jscomp$0 = propValue$jscomp$4;
                    break;
                  case "formMethod":
                    formMethod$jscomp$0 = propValue$jscomp$4;
                    break;
                  case "formTarget":
                    formTarget$jscomp$0 = propValue$jscomp$4;
                    break;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$4,
                      propValue$jscomp$4
                    );
                }
            }
          var formData$jscomp$0 = pushFormActionAttribute(
            target$jscomp$0,
            resumableState,
            renderState,
            formAction$jscomp$0,
            formEncType$jscomp$0,
            formMethod$jscomp$0,
            formTarget$jscomp$0,
            name$jscomp$0
          );
          target$jscomp$0.push(">");
          null != formData$jscomp$0 && formData$jscomp$0.forEach(pushAdditionalFormField, target$jscomp$0);
          pushInnerHTML(target$jscomp$0, innerHTML$jscomp$2, children$jscomp$3);
          if ("string" === typeof children$jscomp$3) {
            target$jscomp$0.push(escapeTextForBrowser(children$jscomp$3));
            var JSCompiler_inline_result$jscomp$0 = null;
          } else
            JSCompiler_inline_result$jscomp$0 = children$jscomp$3;
          return JSCompiler_inline_result$jscomp$0;
        case "form":
          target$jscomp$0.push(startChunkForTag("form"));
          var children$jscomp$4 = null, innerHTML$jscomp$3 = null, formAction$jscomp$1 = null, formEncType$jscomp$1 = null, formMethod$jscomp$1 = null, formTarget$jscomp$1 = null, propKey$jscomp$5;
          for (propKey$jscomp$5 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$5)) {
              var propValue$jscomp$5 = props[propKey$jscomp$5];
              if (null != propValue$jscomp$5)
                switch (propKey$jscomp$5) {
                  case "children":
                    children$jscomp$4 = propValue$jscomp$5;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML$jscomp$3 = propValue$jscomp$5;
                    break;
                  case "action":
                    formAction$jscomp$1 = propValue$jscomp$5;
                    break;
                  case "encType":
                    formEncType$jscomp$1 = propValue$jscomp$5;
                    break;
                  case "method":
                    formMethod$jscomp$1 = propValue$jscomp$5;
                    break;
                  case "target":
                    formTarget$jscomp$1 = propValue$jscomp$5;
                    break;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$5,
                      propValue$jscomp$5
                    );
                }
            }
          var formData$jscomp$1 = null, formActionName = null;
          if ("function" === typeof formAction$jscomp$1) {
            var customFields = getCustomFormFields(
              resumableState,
              formAction$jscomp$1
            );
            null !== customFields ? (formAction$jscomp$1 = customFields.action || "", formEncType$jscomp$1 = customFields.encType, formMethod$jscomp$1 = customFields.method, formTarget$jscomp$1 = customFields.target, formData$jscomp$1 = customFields.data, formActionName = customFields.name) : (target$jscomp$0.push(
              " ",
              "action",
              '="',
              actionJavaScriptURL,
              '"'
            ), formTarget$jscomp$1 = formMethod$jscomp$1 = formEncType$jscomp$1 = formAction$jscomp$1 = null, injectFormReplayingRuntime(resumableState, renderState));
          }
          null != formAction$jscomp$1 && pushAttribute(target$jscomp$0, "action", formAction$jscomp$1);
          null != formEncType$jscomp$1 && pushAttribute(target$jscomp$0, "encType", formEncType$jscomp$1);
          null != formMethod$jscomp$1 && pushAttribute(target$jscomp$0, "method", formMethod$jscomp$1);
          null != formTarget$jscomp$1 && pushAttribute(target$jscomp$0, "target", formTarget$jscomp$1);
          target$jscomp$0.push(">");
          null !== formActionName && (target$jscomp$0.push('<input type="hidden"'), pushStringAttribute(target$jscomp$0, "name", formActionName), target$jscomp$0.push("/>"), null != formData$jscomp$1 && formData$jscomp$1.forEach(pushAdditionalFormField, target$jscomp$0));
          pushInnerHTML(target$jscomp$0, innerHTML$jscomp$3, children$jscomp$4);
          if ("string" === typeof children$jscomp$4) {
            target$jscomp$0.push(escapeTextForBrowser(children$jscomp$4));
            var JSCompiler_inline_result$jscomp$1 = null;
          } else
            JSCompiler_inline_result$jscomp$1 = children$jscomp$4;
          return JSCompiler_inline_result$jscomp$1;
        case "menuitem":
          target$jscomp$0.push(startChunkForTag("menuitem"));
          for (var propKey$jscomp$6 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$6)) {
              var propValue$jscomp$6 = props[propKey$jscomp$6];
              if (null != propValue$jscomp$6)
                switch (propKey$jscomp$6) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "menuitems cannot have `children` nor `dangerouslySetInnerHTML`."
                    );
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$6,
                      propValue$jscomp$6
                    );
                }
            }
          target$jscomp$0.push(">");
          return null;
        case "title":
          if (3 === formatContext.insertionMode || formatContext.tagScope & 1 || null != props.itemProp)
            var JSCompiler_inline_result$jscomp$2 = pushTitleImpl(
              target$jscomp$0,
              props
            );
          else
            isFallback ? JSCompiler_inline_result$jscomp$2 = null : (pushTitleImpl(renderState.hoistableChunks, props), JSCompiler_inline_result$jscomp$2 = void 0);
          return JSCompiler_inline_result$jscomp$2;
        case "link":
          var rel = props.rel, href = props.href, precedence = props.precedence;
          if (3 === formatContext.insertionMode || formatContext.tagScope & 1 || null != props.itemProp || "string" !== typeof rel || "string" !== typeof href || "" === href) {
            pushLinkImpl(target$jscomp$0, props);
            var JSCompiler_inline_result$jscomp$3 = null;
          } else if ("stylesheet" === props.rel)
            if ("string" !== typeof precedence || null != props.disabled || props.onLoad || props.onError)
              JSCompiler_inline_result$jscomp$3 = pushLinkImpl(
                target$jscomp$0,
                props
              );
            else {
              var styleQueue = renderState.styles.get(precedence), resourceState = resumableState.styleResources.hasOwnProperty(href) ? resumableState.styleResources[href] : void 0;
              if (null !== resourceState) {
                resumableState.styleResources[href] = null;
                styleQueue || (styleQueue = {
                  precedence: escapeTextForBrowser(precedence),
                  rules: [],
                  hrefs: [],
                  sheets: /* @__PURE__ */ new Map()
                }, renderState.styles.set(precedence, styleQueue));
                var resource = {
                  state: 0,
                  props: assign({}, props, {
                    "data-precedence": props.precedence,
                    precedence: null
                  })
                };
                if (resourceState) {
                  2 === resourceState.length && adoptPreloadCredentials(resource.props, resourceState);
                  var preloadResource = renderState.preloads.stylesheets.get(href);
                  preloadResource && 0 < preloadResource.length ? preloadResource.length = 0 : resource.state = 1;
                }
                styleQueue.sheets.set(href, resource);
                hoistableState && hoistableState.stylesheets.add(resource);
              } else if (styleQueue) {
                var resource$9 = styleQueue.sheets.get(href);
                resource$9 && hoistableState && hoistableState.stylesheets.add(resource$9);
              }
              textEmbedded && target$jscomp$0.push("<!-- -->");
              JSCompiler_inline_result$jscomp$3 = null;
            }
          else
            props.onLoad || props.onError ? JSCompiler_inline_result$jscomp$3 = pushLinkImpl(
              target$jscomp$0,
              props
            ) : (textEmbedded && target$jscomp$0.push("<!-- -->"), JSCompiler_inline_result$jscomp$3 = isFallback ? null : pushLinkImpl(renderState.hoistableChunks, props));
          return JSCompiler_inline_result$jscomp$3;
        case "script":
          var asyncProp = props.async;
          if ("string" !== typeof props.src || !props.src || !asyncProp || "function" === typeof asyncProp || "symbol" === typeof asyncProp || props.onLoad || props.onError || 3 === formatContext.insertionMode || formatContext.tagScope & 1 || null != props.itemProp)
            var JSCompiler_inline_result$jscomp$4 = pushScriptImpl(
              target$jscomp$0,
              props
            );
          else {
            var key = props.src;
            if ("module" === props.type) {
              var resources = resumableState.moduleScriptResources;
              var preloads = renderState.preloads.moduleScripts;
            } else
              resources = resumableState.scriptResources, preloads = renderState.preloads.scripts;
            var resourceState$jscomp$0 = resources.hasOwnProperty(key) ? resources[key] : void 0;
            if (null !== resourceState$jscomp$0) {
              resources[key] = null;
              var scriptProps = props;
              if (resourceState$jscomp$0) {
                2 === resourceState$jscomp$0.length && (scriptProps = assign({}, props), adoptPreloadCredentials(scriptProps, resourceState$jscomp$0));
                var preloadResource$jscomp$0 = preloads.get(key);
                preloadResource$jscomp$0 && (preloadResource$jscomp$0.length = 0);
              }
              var resource$jscomp$0 = [];
              renderState.scripts.add(resource$jscomp$0);
              pushScriptImpl(resource$jscomp$0, scriptProps);
            }
            textEmbedded && target$jscomp$0.push("<!-- -->");
            JSCompiler_inline_result$jscomp$4 = null;
          }
          return JSCompiler_inline_result$jscomp$4;
        case "style":
          var precedence$jscomp$0 = props.precedence, href$jscomp$0 = props.href;
          if (3 === formatContext.insertionMode || formatContext.tagScope & 1 || null != props.itemProp || "string" !== typeof precedence$jscomp$0 || "string" !== typeof href$jscomp$0 || "" === href$jscomp$0) {
            target$jscomp$0.push(startChunkForTag("style"));
            var children$jscomp$5 = null, innerHTML$jscomp$4 = null, propKey$jscomp$7;
            for (propKey$jscomp$7 in props)
              if (hasOwnProperty.call(props, propKey$jscomp$7)) {
                var propValue$jscomp$7 = props[propKey$jscomp$7];
                if (null != propValue$jscomp$7)
                  switch (propKey$jscomp$7) {
                    case "children":
                      children$jscomp$5 = propValue$jscomp$7;
                      break;
                    case "dangerouslySetInnerHTML":
                      innerHTML$jscomp$4 = propValue$jscomp$7;
                      break;
                    default:
                      pushAttribute(
                        target$jscomp$0,
                        propKey$jscomp$7,
                        propValue$jscomp$7
                      );
                  }
              }
            target$jscomp$0.push(">");
            var child = Array.isArray(children$jscomp$5) ? 2 > children$jscomp$5.length ? children$jscomp$5[0] : null : children$jscomp$5;
            "function" !== typeof child && "symbol" !== typeof child && null !== child && void 0 !== child && target$jscomp$0.push(("" + child).replace(styleRegex, styleReplacer));
            pushInnerHTML(target$jscomp$0, innerHTML$jscomp$4, children$jscomp$5);
            target$jscomp$0.push(endChunkForTag("style"));
            var JSCompiler_inline_result$jscomp$5 = null;
          } else {
            var styleQueue$jscomp$0 = renderState.styles.get(precedence$jscomp$0);
            if (null !== (resumableState.styleResources.hasOwnProperty(href$jscomp$0) ? resumableState.styleResources[href$jscomp$0] : void 0)) {
              resumableState.styleResources[href$jscomp$0] = null;
              styleQueue$jscomp$0 ? styleQueue$jscomp$0.hrefs.push(
                escapeTextForBrowser(href$jscomp$0)
              ) : (styleQueue$jscomp$0 = {
                precedence: escapeTextForBrowser(precedence$jscomp$0),
                rules: [],
                hrefs: [escapeTextForBrowser(href$jscomp$0)],
                sheets: /* @__PURE__ */ new Map()
              }, renderState.styles.set(precedence$jscomp$0, styleQueue$jscomp$0));
              var target = styleQueue$jscomp$0.rules, children$jscomp$6 = null, innerHTML$jscomp$5 = null, propKey$jscomp$8;
              for (propKey$jscomp$8 in props)
                if (hasOwnProperty.call(props, propKey$jscomp$8)) {
                  var propValue$jscomp$8 = props[propKey$jscomp$8];
                  if (null != propValue$jscomp$8)
                    switch (propKey$jscomp$8) {
                      case "children":
                        children$jscomp$6 = propValue$jscomp$8;
                        break;
                      case "dangerouslySetInnerHTML":
                        innerHTML$jscomp$5 = propValue$jscomp$8;
                    }
                }
              var child$jscomp$0 = Array.isArray(children$jscomp$6) ? 2 > children$jscomp$6.length ? children$jscomp$6[0] : null : children$jscomp$6;
              "function" !== typeof child$jscomp$0 && "symbol" !== typeof child$jscomp$0 && null !== child$jscomp$0 && void 0 !== child$jscomp$0 && target.push(
                ("" + child$jscomp$0).replace(styleRegex, styleReplacer)
              );
              pushInnerHTML(target, innerHTML$jscomp$5, children$jscomp$6);
            }
            styleQueue$jscomp$0 && hoistableState && hoistableState.styles.add(styleQueue$jscomp$0);
            textEmbedded && target$jscomp$0.push("<!-- -->");
            JSCompiler_inline_result$jscomp$5 = void 0;
          }
          return JSCompiler_inline_result$jscomp$5;
        case "meta":
          if (3 === formatContext.insertionMode || formatContext.tagScope & 1 || null != props.itemProp)
            var JSCompiler_inline_result$jscomp$6 = pushSelfClosing(
              target$jscomp$0,
              props,
              "meta"
            );
          else
            textEmbedded && target$jscomp$0.push("<!-- -->"), JSCompiler_inline_result$jscomp$6 = isFallback ? null : "string" === typeof props.charSet ? pushSelfClosing(renderState.charsetChunks, props, "meta") : "viewport" === props.name ? pushSelfClosing(renderState.viewportChunks, props, "meta") : pushSelfClosing(renderState.hoistableChunks, props, "meta");
          return JSCompiler_inline_result$jscomp$6;
        case "listing":
        case "pre":
          target$jscomp$0.push(startChunkForTag(type));
          var children$jscomp$7 = null, innerHTML$jscomp$6 = null, propKey$jscomp$9;
          for (propKey$jscomp$9 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$9)) {
              var propValue$jscomp$9 = props[propKey$jscomp$9];
              if (null != propValue$jscomp$9)
                switch (propKey$jscomp$9) {
                  case "children":
                    children$jscomp$7 = propValue$jscomp$9;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML$jscomp$6 = propValue$jscomp$9;
                    break;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$9,
                      propValue$jscomp$9
                    );
                }
            }
          target$jscomp$0.push(">");
          if (null != innerHTML$jscomp$6) {
            if (null != children$jscomp$7)
              throw Error(
                "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
              );
            if ("object" !== typeof innerHTML$jscomp$6 || !("__html" in innerHTML$jscomp$6))
              throw Error(
                "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
              );
            var html = innerHTML$jscomp$6.__html;
            null !== html && void 0 !== html && ("string" === typeof html && 0 < html.length && "\n" === html[0] ? target$jscomp$0.push("\n", html) : target$jscomp$0.push("" + html));
          }
          "string" === typeof children$jscomp$7 && "\n" === children$jscomp$7[0] && target$jscomp$0.push("\n");
          return children$jscomp$7;
        case "img":
          var src = props.src, srcSet = props.srcSet;
          if (!("lazy" === props.loading || !src && !srcSet || "string" !== typeof src && null != src || "string" !== typeof srcSet && null != srcSet) && "low" !== props.fetchPriority && false === !!(formatContext.tagScope & 3) && ("string" !== typeof src || ":" !== src[4] || "d" !== src[0] && "D" !== src[0] || "a" !== src[1] && "A" !== src[1] || "t" !== src[2] && "T" !== src[2] || "a" !== src[3] && "A" !== src[3]) && ("string" !== typeof srcSet || ":" !== srcSet[4] || "d" !== srcSet[0] && "D" !== srcSet[0] || "a" !== srcSet[1] && "A" !== srcSet[1] || "t" !== srcSet[2] && "T" !== srcSet[2] || "a" !== srcSet[3] && "A" !== srcSet[3])) {
            var sizes = "string" === typeof props.sizes ? props.sizes : void 0, key$jscomp$0 = srcSet ? srcSet + "\n" + (sizes || "") : src, promotablePreloads = renderState.preloads.images, resource$jscomp$1 = promotablePreloads.get(key$jscomp$0);
            if (resource$jscomp$1) {
              if ("high" === props.fetchPriority || 10 > renderState.highImagePreloads.size)
                promotablePreloads.delete(key$jscomp$0), renderState.highImagePreloads.add(resource$jscomp$1);
            } else if (!resumableState.imageResources.hasOwnProperty(key$jscomp$0)) {
              resumableState.imageResources[key$jscomp$0] = PRELOAD_NO_CREDS;
              var input = props.crossOrigin;
              var JSCompiler_inline_result$jscomp$7 = "string" === typeof input ? "use-credentials" === input ? input : "" : void 0;
              var headers = renderState.headers, header;
              headers && 0 < headers.remainingCapacity && ("high" === props.fetchPriority || 500 > headers.highImagePreloads.length) && (header = getPreloadAsHeader(src, "image", {
                imageSrcSet: props.srcSet,
                imageSizes: props.sizes,
                crossOrigin: JSCompiler_inline_result$jscomp$7,
                integrity: props.integrity,
                nonce: props.nonce,
                type: props.type,
                fetchPriority: props.fetchPriority,
                referrerPolicy: props.refererPolicy
              }), 2 <= (headers.remainingCapacity -= header.length)) ? (renderState.resets.image[key$jscomp$0] = PRELOAD_NO_CREDS, headers.highImagePreloads && (headers.highImagePreloads += ", "), headers.highImagePreloads += header) : (resource$jscomp$1 = [], pushLinkImpl(resource$jscomp$1, {
                rel: "preload",
                as: "image",
                href: srcSet ? void 0 : src,
                imageSrcSet: srcSet,
                imageSizes: sizes,
                crossOrigin: JSCompiler_inline_result$jscomp$7,
                integrity: props.integrity,
                type: props.type,
                fetchPriority: props.fetchPriority,
                referrerPolicy: props.referrerPolicy
              }), "high" === props.fetchPriority || 10 > renderState.highImagePreloads.size ? renderState.highImagePreloads.add(resource$jscomp$1) : (renderState.bulkPreloads.add(resource$jscomp$1), promotablePreloads.set(key$jscomp$0, resource$jscomp$1)));
            }
          }
          return pushSelfClosing(target$jscomp$0, props, "img");
        case "base":
        case "area":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "keygen":
        case "param":
        case "source":
        case "track":
        case "wbr":
          return pushSelfClosing(target$jscomp$0, props, type);
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          break;
        case "head":
          if (2 > formatContext.insertionMode && null === renderState.headChunks) {
            renderState.headChunks = [];
            var JSCompiler_inline_result$jscomp$8 = pushStartGenericElement(
              renderState.headChunks,
              props,
              "head"
            );
          } else
            JSCompiler_inline_result$jscomp$8 = pushStartGenericElement(
              target$jscomp$0,
              props,
              "head"
            );
          return JSCompiler_inline_result$jscomp$8;
        case "html":
          if (0 === formatContext.insertionMode && null === renderState.htmlChunks) {
            renderState.htmlChunks = [""];
            var JSCompiler_inline_result$jscomp$9 = pushStartGenericElement(
              renderState.htmlChunks,
              props,
              "html"
            );
          } else
            JSCompiler_inline_result$jscomp$9 = pushStartGenericElement(
              target$jscomp$0,
              props,
              "html"
            );
          return JSCompiler_inline_result$jscomp$9;
        default:
          if (-1 !== type.indexOf("-")) {
            target$jscomp$0.push(startChunkForTag(type));
            var children$jscomp$8 = null, innerHTML$jscomp$7 = null, propKey$jscomp$10;
            for (propKey$jscomp$10 in props)
              if (hasOwnProperty.call(props, propKey$jscomp$10)) {
                var propValue$jscomp$10 = props[propKey$jscomp$10];
                if (null != propValue$jscomp$10) {
                  var attributeName = propKey$jscomp$10;
                  switch (propKey$jscomp$10) {
                    case "children":
                      children$jscomp$8 = propValue$jscomp$10;
                      break;
                    case "dangerouslySetInnerHTML":
                      innerHTML$jscomp$7 = propValue$jscomp$10;
                      break;
                    case "style":
                      pushStyleAttribute(target$jscomp$0, propValue$jscomp$10);
                      break;
                    case "suppressContentEditableWarning":
                    case "suppressHydrationWarning":
                    case "ref":
                      break;
                    case "className":
                      attributeName = "class";
                    default:
                      if (isAttributeNameSafe(propKey$jscomp$10) && "function" !== typeof propValue$jscomp$10 && "symbol" !== typeof propValue$jscomp$10 && false !== propValue$jscomp$10) {
                        if (true === propValue$jscomp$10)
                          propValue$jscomp$10 = "";
                        else if ("object" === typeof propValue$jscomp$10)
                          continue;
                        target$jscomp$0.push(
                          " ",
                          attributeName,
                          '="',
                          escapeTextForBrowser(propValue$jscomp$10),
                          '"'
                        );
                      }
                  }
                }
              }
            target$jscomp$0.push(">");
            pushInnerHTML(target$jscomp$0, innerHTML$jscomp$7, children$jscomp$8);
            return children$jscomp$8;
          }
      }
      return pushStartGenericElement(target$jscomp$0, props, type);
    }
    var endTagCache = /* @__PURE__ */ new Map();
    function endChunkForTag(tag) {
      var chunk = endTagCache.get(tag);
      void 0 === chunk && (chunk = "</" + tag + ">", endTagCache.set(tag, chunk));
      return chunk;
    }
    function writeBootstrap(destination, renderState) {
      renderState = renderState.bootstrapChunks;
      for (var i = 0; i < renderState.length - 1; i++)
        destination.push(renderState[i]);
      return i < renderState.length ? (i = renderState[i], renderState.length = 0, destination.push(i)) : true;
    }
    function writeStartPendingSuspenseBoundary(destination, renderState, id) {
      destination.push('<!--$?--><template id="');
      if (null === id)
        throw Error(
          "An ID must have been assigned before we can complete the boundary."
        );
      destination.push(renderState.boundaryPrefix);
      renderState = id.toString(16);
      destination.push(renderState);
      return destination.push('"></template>');
    }
    function writeStartSegment(destination, renderState, formatContext, id) {
      switch (formatContext.insertionMode) {
        case 0:
        case 1:
        case 2:
          return destination.push('<div hidden id="'), destination.push(renderState.segmentPrefix), renderState = id.toString(16), destination.push(renderState), destination.push('">');
        case 3:
          return destination.push('<svg aria-hidden="true" style="display:none" id="'), destination.push(renderState.segmentPrefix), renderState = id.toString(16), destination.push(renderState), destination.push('">');
        case 4:
          return destination.push('<math aria-hidden="true" style="display:none" id="'), destination.push(renderState.segmentPrefix), renderState = id.toString(16), destination.push(renderState), destination.push('">');
        case 5:
          return destination.push('<table hidden id="'), destination.push(renderState.segmentPrefix), renderState = id.toString(16), destination.push(renderState), destination.push('">');
        case 6:
          return destination.push('<table hidden><tbody id="'), destination.push(renderState.segmentPrefix), renderState = id.toString(16), destination.push(renderState), destination.push('">');
        case 7:
          return destination.push('<table hidden><tr id="'), destination.push(renderState.segmentPrefix), renderState = id.toString(16), destination.push(renderState), destination.push('">');
        case 8:
          return destination.push('<table hidden><colgroup id="'), destination.push(renderState.segmentPrefix), renderState = id.toString(16), destination.push(renderState), destination.push('">');
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    function writeEndSegment(destination, formatContext) {
      switch (formatContext.insertionMode) {
        case 0:
        case 1:
        case 2:
          return destination.push("</div>");
        case 3:
          return destination.push("</svg>");
        case 4:
          return destination.push("</math>");
        case 5:
          return destination.push("</table>");
        case 6:
          return destination.push("</tbody></table>");
        case 7:
          return destination.push("</tr></table>");
        case 8:
          return destination.push("</colgroup></table>");
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    var regexForJSStringsInInstructionScripts = /[<\u2028\u2029]/g;
    function escapeJSStringsForInstructionScripts(input) {
      return JSON.stringify(input).replace(
        regexForJSStringsInInstructionScripts,
        function(match) {
          switch (match) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw Error(
                "escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
              );
          }
        }
      );
    }
    var regexForJSStringsInScripts = /[&><\u2028\u2029]/g;
    function escapeJSObjectForInstructionScripts(input) {
      return JSON.stringify(input).replace(
        regexForJSStringsInScripts,
        function(match) {
          switch (match) {
            case "&":
              return "\\u0026";
            case ">":
              return "\\u003e";
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw Error(
                "escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
              );
          }
        }
      );
    }
    var currentlyRenderingBoundaryHasStylesToHoist = false;
    var destinationHasCapacity = true;
    function flushStyleTagsLateForBoundary(styleQueue) {
      var rules = styleQueue.rules, hrefs = styleQueue.hrefs, i = 0;
      if (hrefs.length) {
        this.push('<style media="not all" data-precedence="');
        this.push(styleQueue.precedence);
        for (this.push('" data-href="'); i < hrefs.length - 1; i++)
          this.push(hrefs[i]), this.push(" ");
        this.push(hrefs[i]);
        this.push('">');
        for (i = 0; i < rules.length; i++)
          this.push(rules[i]);
        destinationHasCapacity = this.push("</style>");
        currentlyRenderingBoundaryHasStylesToHoist = true;
        rules.length = 0;
        hrefs.length = 0;
      }
    }
    function hasStylesToHoist(stylesheet) {
      return 2 !== stylesheet.state ? currentlyRenderingBoundaryHasStylesToHoist = true : false;
    }
    function writeHoistablesForBoundary(destination, hoistableState, renderState) {
      currentlyRenderingBoundaryHasStylesToHoist = false;
      destinationHasCapacity = true;
      hoistableState.styles.forEach(flushStyleTagsLateForBoundary, destination);
      hoistableState.stylesheets.forEach(hasStylesToHoist);
      currentlyRenderingBoundaryHasStylesToHoist && (renderState.stylesToHoist = true);
      return destinationHasCapacity;
    }
    function flushResource(resource) {
      for (var i = 0; i < resource.length; i++)
        this.push(resource[i]);
      resource.length = 0;
    }
    var stylesheetFlushingQueue = [];
    function flushStyleInPreamble(stylesheet) {
      pushLinkImpl(stylesheetFlushingQueue, stylesheet.props);
      for (var i = 0; i < stylesheetFlushingQueue.length; i++)
        this.push(stylesheetFlushingQueue[i]);
      stylesheetFlushingQueue.length = 0;
      stylesheet.state = 2;
    }
    function flushStylesInPreamble(styleQueue) {
      var hasStylesheets = 0 < styleQueue.sheets.size;
      styleQueue.sheets.forEach(flushStyleInPreamble, this);
      styleQueue.sheets.clear();
      var rules = styleQueue.rules, hrefs = styleQueue.hrefs;
      if (!hasStylesheets || hrefs.length) {
        this.push('<style data-precedence="');
        this.push(styleQueue.precedence);
        styleQueue = 0;
        if (hrefs.length) {
          for (this.push('" data-href="'); styleQueue < hrefs.length - 1; styleQueue++)
            this.push(hrefs[styleQueue]), this.push(" ");
          this.push(hrefs[styleQueue]);
        }
        this.push('">');
        for (styleQueue = 0; styleQueue < rules.length; styleQueue++)
          this.push(rules[styleQueue]);
        this.push("</style>");
        rules.length = 0;
        hrefs.length = 0;
      }
    }
    function preloadLateStyle(stylesheet) {
      if (0 === stylesheet.state) {
        stylesheet.state = 1;
        var props = stylesheet.props;
        pushLinkImpl(stylesheetFlushingQueue, {
          rel: "preload",
          as: "style",
          href: stylesheet.props.href,
          crossOrigin: props.crossOrigin,
          fetchPriority: props.fetchPriority,
          integrity: props.integrity,
          media: props.media,
          hrefLang: props.hrefLang,
          referrerPolicy: props.referrerPolicy
        });
        for (stylesheet = 0; stylesheet < stylesheetFlushingQueue.length; stylesheet++)
          this.push(stylesheetFlushingQueue[stylesheet]);
        stylesheetFlushingQueue.length = 0;
      }
    }
    function preloadLateStyles(styleQueue) {
      styleQueue.sheets.forEach(preloadLateStyle, this);
      styleQueue.sheets.clear();
    }
    function writeStyleResourceDependenciesInJS(destination, hoistableState) {
      destination.push("[");
      var nextArrayOpenBrackChunk = "[";
      hoistableState.stylesheets.forEach(function(resource) {
        if (2 !== resource.state)
          if (3 === resource.state)
            destination.push(nextArrayOpenBrackChunk), resource = escapeJSObjectForInstructionScripts(
              "" + resource.props.href
            ), destination.push(resource), destination.push("]"), nextArrayOpenBrackChunk = ",[";
          else {
            destination.push(nextArrayOpenBrackChunk);
            var precedence = resource.props["data-precedence"], props = resource.props, coercedHref = sanitizeURL("" + resource.props.href);
            coercedHref = escapeJSObjectForInstructionScripts(coercedHref);
            destination.push(coercedHref);
            precedence = "" + precedence;
            destination.push(",");
            precedence = escapeJSObjectForInstructionScripts(precedence);
            destination.push(precedence);
            for (var propKey in props)
              if (hasOwnProperty.call(props, propKey) && (precedence = props[propKey], null != precedence))
                switch (propKey) {
                  case "href":
                  case "rel":
                  case "precedence":
                  case "data-precedence":
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  default:
                    writeStyleResourceAttributeInJS(
                      destination,
                      propKey,
                      precedence
                    );
                }
            destination.push("]");
            nextArrayOpenBrackChunk = ",[";
            resource.state = 3;
          }
      });
      destination.push("]");
    }
    function writeStyleResourceAttributeInJS(destination, name, value) {
      var attributeName = name.toLowerCase();
      switch (typeof value) {
        case "function":
        case "symbol":
          return;
      }
      switch (name) {
        case "innerHTML":
        case "dangerouslySetInnerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "style":
        case "ref":
          return;
        case "className":
          attributeName = "class";
          name = "" + value;
          break;
        case "hidden":
          if (false === value)
            return;
          name = "";
          break;
        case "src":
        case "href":
          value = sanitizeURL(value);
          name = "" + value;
          break;
        default:
          if (2 < name.length && ("o" === name[0] || "O" === name[0]) && ("n" === name[1] || "N" === name[1]) || !isAttributeNameSafe(name))
            return;
          name = "" + value;
      }
      destination.push(",");
      attributeName = escapeJSObjectForInstructionScripts(attributeName);
      destination.push(attributeName);
      destination.push(",");
      attributeName = escapeJSObjectForInstructionScripts(name);
      destination.push(attributeName);
    }
    function writeStyleResourceDependenciesInAttr(destination, hoistableState) {
      destination.push("[");
      var nextArrayOpenBrackChunk = "[";
      hoistableState.stylesheets.forEach(function(resource) {
        if (2 !== resource.state)
          if (3 === resource.state)
            destination.push(nextArrayOpenBrackChunk), resource = escapeTextForBrowser(
              JSON.stringify("" + resource.props.href)
            ), destination.push(resource), destination.push("]"), nextArrayOpenBrackChunk = ",[";
          else {
            destination.push(nextArrayOpenBrackChunk);
            var precedence = resource.props["data-precedence"], props = resource.props, coercedHref = sanitizeURL("" + resource.props.href);
            coercedHref = escapeTextForBrowser(JSON.stringify(coercedHref));
            destination.push(coercedHref);
            precedence = "" + precedence;
            destination.push(",");
            precedence = escapeTextForBrowser(JSON.stringify(precedence));
            destination.push(precedence);
            for (var propKey in props)
              if (hasOwnProperty.call(props, propKey) && (precedence = props[propKey], null != precedence))
                switch (propKey) {
                  case "href":
                  case "rel":
                  case "precedence":
                  case "data-precedence":
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  default:
                    writeStyleResourceAttributeInAttr(
                      destination,
                      propKey,
                      precedence
                    );
                }
            destination.push("]");
            nextArrayOpenBrackChunk = ",[";
            resource.state = 3;
          }
      });
      destination.push("]");
    }
    function writeStyleResourceAttributeInAttr(destination, name, value) {
      var attributeName = name.toLowerCase();
      switch (typeof value) {
        case "function":
        case "symbol":
          return;
      }
      switch (name) {
        case "innerHTML":
        case "dangerouslySetInnerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "style":
        case "ref":
          return;
        case "className":
          attributeName = "class";
          name = "" + value;
          break;
        case "hidden":
          if (false === value)
            return;
          name = "";
          break;
        case "src":
        case "href":
          value = sanitizeURL(value);
          name = "" + value;
          break;
        default:
          if (2 < name.length && ("o" === name[0] || "O" === name[0]) && ("n" === name[1] || "N" === name[1]) || !isAttributeNameSafe(name))
            return;
          name = "" + value;
      }
      destination.push(",");
      attributeName = escapeTextForBrowser(JSON.stringify(attributeName));
      destination.push(attributeName);
      destination.push(",");
      attributeName = escapeTextForBrowser(JSON.stringify(name));
      destination.push(attributeName);
    }
    function createHoistableState() {
      return { styles: /* @__PURE__ */ new Set(), stylesheets: /* @__PURE__ */ new Set() };
    }
    function prefetchDNS(href) {
      var request = currentRequest ? currentRequest : null;
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if ("string" === typeof href && href) {
          if (!resumableState.dnsResources.hasOwnProperty(href)) {
            resumableState.dnsResources[href] = null;
            resumableState = renderState.headers;
            var header, JSCompiler_temp;
            if (JSCompiler_temp = resumableState && 0 < resumableState.remainingCapacity)
              JSCompiler_temp = (header = "<" + ("" + href).replace(
                regexForHrefInLinkHeaderURLContext,
                escapeHrefForLinkHeaderURLContextReplacer
              ) + ">; rel=dns-prefetch", 2 <= (resumableState.remainingCapacity -= header.length));
            JSCompiler_temp ? (renderState.resets.dns[href] = null, resumableState.preconnects && (resumableState.preconnects += ", "), resumableState.preconnects += header) : (header = [], pushLinkImpl(header, { href, rel: "dns-prefetch" }), renderState.preconnects.add(header));
          }
          enqueueFlush(request);
        }
      } else
        previousDispatcher.D(href);
    }
    function preconnect(href, crossOrigin) {
      var request = currentRequest ? currentRequest : null;
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if ("string" === typeof href && href) {
          var bucket = "use-credentials" === crossOrigin ? "credentials" : "string" === typeof crossOrigin ? "anonymous" : "default";
          if (!resumableState.connectResources[bucket].hasOwnProperty(href)) {
            resumableState.connectResources[bucket][href] = null;
            resumableState = renderState.headers;
            var header, JSCompiler_temp;
            if (JSCompiler_temp = resumableState && 0 < resumableState.remainingCapacity) {
              JSCompiler_temp = "<" + ("" + href).replace(
                regexForHrefInLinkHeaderURLContext,
                escapeHrefForLinkHeaderURLContextReplacer
              ) + ">; rel=preconnect";
              if ("string" === typeof crossOrigin) {
                var escapedCrossOrigin = ("" + crossOrigin).replace(
                  regexForLinkHeaderQuotedParamValueContext,
                  escapeStringForLinkHeaderQuotedParamValueContextReplacer
                );
                JSCompiler_temp += '; crossorigin="' + escapedCrossOrigin + '"';
              }
              JSCompiler_temp = (header = JSCompiler_temp, 2 <= (resumableState.remainingCapacity -= header.length));
            }
            JSCompiler_temp ? (renderState.resets.connect[bucket][href] = null, resumableState.preconnects && (resumableState.preconnects += ", "), resumableState.preconnects += header) : (bucket = [], pushLinkImpl(bucket, {
              rel: "preconnect",
              href,
              crossOrigin
            }), renderState.preconnects.add(bucket));
          }
          enqueueFlush(request);
        }
      } else
        previousDispatcher.C(href, crossOrigin);
    }
    function preload(href, as, options) {
      var request = currentRequest ? currentRequest : null;
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if (as && href) {
          switch (as) {
            case "image":
              if (options) {
                var imageSrcSet = options.imageSrcSet;
                var imageSizes = options.imageSizes;
                var fetchPriority = options.fetchPriority;
              }
              var key = imageSrcSet ? imageSrcSet + "\n" + (imageSizes || "") : href;
              if (resumableState.imageResources.hasOwnProperty(key))
                return;
              resumableState.imageResources[key] = PRELOAD_NO_CREDS;
              resumableState = renderState.headers;
              var header;
              resumableState && 0 < resumableState.remainingCapacity && "high" === fetchPriority && (header = getPreloadAsHeader(href, as, options), 2 <= (resumableState.remainingCapacity -= header.length)) ? (renderState.resets.image[key] = PRELOAD_NO_CREDS, resumableState.highImagePreloads && (resumableState.highImagePreloads += ", "), resumableState.highImagePreloads += header) : (resumableState = [], pushLinkImpl(
                resumableState,
                assign(
                  { rel: "preload", href: imageSrcSet ? void 0 : href, as },
                  options
                )
              ), "high" === fetchPriority ? renderState.highImagePreloads.add(resumableState) : (renderState.bulkPreloads.add(resumableState), renderState.preloads.images.set(key, resumableState)));
              break;
            case "style":
              if (resumableState.styleResources.hasOwnProperty(href))
                return;
              imageSrcSet = [];
              pushLinkImpl(
                imageSrcSet,
                assign({ rel: "preload", href, as }, options)
              );
              resumableState.styleResources[href] = !options || "string" !== typeof options.crossOrigin && "string" !== typeof options.integrity ? PRELOAD_NO_CREDS : [options.crossOrigin, options.integrity];
              renderState.preloads.stylesheets.set(href, imageSrcSet);
              renderState.bulkPreloads.add(imageSrcSet);
              break;
            case "script":
              if (resumableState.scriptResources.hasOwnProperty(href))
                return;
              imageSrcSet = [];
              renderState.preloads.scripts.set(href, imageSrcSet);
              renderState.bulkPreloads.add(imageSrcSet);
              pushLinkImpl(
                imageSrcSet,
                assign({ rel: "preload", href, as }, options)
              );
              resumableState.scriptResources[href] = !options || "string" !== typeof options.crossOrigin && "string" !== typeof options.integrity ? PRELOAD_NO_CREDS : [options.crossOrigin, options.integrity];
              break;
            default:
              if (resumableState.unknownResources.hasOwnProperty(as)) {
                if (imageSrcSet = resumableState.unknownResources[as], imageSrcSet.hasOwnProperty(href))
                  return;
              } else
                imageSrcSet = {}, resumableState.unknownResources[as] = imageSrcSet;
              imageSrcSet[href] = PRELOAD_NO_CREDS;
              if ((resumableState = renderState.headers) && 0 < resumableState.remainingCapacity && "font" === as && (key = getPreloadAsHeader(href, as, options), 2 <= (resumableState.remainingCapacity -= key.length)))
                renderState.resets.font[href] = PRELOAD_NO_CREDS, resumableState.fontPreloads && (resumableState.fontPreloads += ", "), resumableState.fontPreloads += key;
              else
                switch (resumableState = [], href = assign({ rel: "preload", href, as }, options), pushLinkImpl(resumableState, href), as) {
                  case "font":
                    renderState.fontPreloads.add(resumableState);
                    break;
                  default:
                    renderState.bulkPreloads.add(resumableState);
                }
          }
          enqueueFlush(request);
        }
      } else
        previousDispatcher.L(href, as, options);
    }
    function preloadModule(href, options) {
      var request = currentRequest ? currentRequest : null;
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if (href) {
          var as = options && "string" === typeof options.as ? options.as : "script";
          switch (as) {
            case "script":
              if (resumableState.moduleScriptResources.hasOwnProperty(href))
                return;
              as = [];
              resumableState.moduleScriptResources[href] = !options || "string" !== typeof options.crossOrigin && "string" !== typeof options.integrity ? PRELOAD_NO_CREDS : [options.crossOrigin, options.integrity];
              renderState.preloads.moduleScripts.set(href, as);
              break;
            default:
              if (resumableState.moduleUnknownResources.hasOwnProperty(as)) {
                var resources = resumableState.unknownResources[as];
                if (resources.hasOwnProperty(href))
                  return;
              } else
                resources = {}, resumableState.moduleUnknownResources[as] = resources;
              as = [];
              resources[href] = PRELOAD_NO_CREDS;
          }
          pushLinkImpl(as, assign({ rel: "modulepreload", href }, options));
          renderState.bulkPreloads.add(as);
          enqueueFlush(request);
        }
      } else
        previousDispatcher.m(href, options);
    }
    function preinitStyle(href, precedence, options) {
      var request = currentRequest ? currentRequest : null;
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if (href) {
          precedence = precedence || "default";
          var styleQueue = renderState.styles.get(precedence), resourceState = resumableState.styleResources.hasOwnProperty(href) ? resumableState.styleResources[href] : void 0;
          null !== resourceState && (resumableState.styleResources[href] = null, styleQueue || (styleQueue = {
            precedence: escapeTextForBrowser(precedence),
            rules: [],
            hrefs: [],
            sheets: /* @__PURE__ */ new Map()
          }, renderState.styles.set(precedence, styleQueue)), precedence = {
            state: 0,
            props: assign(
              { rel: "stylesheet", href, "data-precedence": precedence },
              options
            )
          }, resourceState && (2 === resourceState.length && adoptPreloadCredentials(precedence.props, resourceState), (renderState = renderState.preloads.stylesheets.get(href)) && 0 < renderState.length ? renderState.length = 0 : precedence.state = 1), styleQueue.sheets.set(href, precedence), enqueueFlush(request));
        }
      } else
        previousDispatcher.S(href, precedence, options);
    }
    function preinitScript(src, options) {
      var request = currentRequest ? currentRequest : null;
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if (src) {
          var resourceState = resumableState.scriptResources.hasOwnProperty(src) ? resumableState.scriptResources[src] : void 0;
          null !== resourceState && (resumableState.scriptResources[src] = null, options = assign({ src, async: true }, options), resourceState && (2 === resourceState.length && adoptPreloadCredentials(options, resourceState), src = renderState.preloads.scripts.get(src)) && (src.length = 0), src = [], renderState.scripts.add(src), pushScriptImpl(src, options), enqueueFlush(request));
        }
      } else
        previousDispatcher.X(src, options);
    }
    function preinitModuleScript(src, options) {
      var request = currentRequest ? currentRequest : null;
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if (src) {
          var resourceState = resumableState.moduleScriptResources.hasOwnProperty(
            src
          ) ? resumableState.moduleScriptResources[src] : void 0;
          null !== resourceState && (resumableState.moduleScriptResources[src] = null, options = assign({ src, type: "module", async: true }, options), resourceState && (2 === resourceState.length && adoptPreloadCredentials(options, resourceState), src = renderState.preloads.moduleScripts.get(src)) && (src.length = 0), src = [], renderState.scripts.add(src), pushScriptImpl(src, options), enqueueFlush(request));
        }
      } else
        previousDispatcher.M(src, options);
    }
    function adoptPreloadCredentials(target, preloadState) {
      null == target.crossOrigin && (target.crossOrigin = preloadState[0]);
      null == target.integrity && (target.integrity = preloadState[1]);
    }
    function getPreloadAsHeader(href, as, params) {
      href = ("" + href).replace(
        regexForHrefInLinkHeaderURLContext,
        escapeHrefForLinkHeaderURLContextReplacer
      );
      as = ("" + as).replace(
        regexForLinkHeaderQuotedParamValueContext,
        escapeStringForLinkHeaderQuotedParamValueContextReplacer
      );
      as = "<" + href + '>; rel=preload; as="' + as + '"';
      for (var paramName in params)
        hasOwnProperty.call(params, paramName) && (href = params[paramName], "string" === typeof href && (as += "; " + paramName.toLowerCase() + '="' + ("" + href).replace(
          regexForLinkHeaderQuotedParamValueContext,
          escapeStringForLinkHeaderQuotedParamValueContextReplacer
        ) + '"'));
      return as;
    }
    var regexForHrefInLinkHeaderURLContext = /[<>\r\n]/g;
    function escapeHrefForLinkHeaderURLContextReplacer(match) {
      switch (match) {
        case "<":
          return "%3C";
        case ">":
          return "%3E";
        case "\n":
          return "%0A";
        case "\r":
          return "%0D";
        default:
          throw Error(
            "escapeLinkHrefForHeaderContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
          );
      }
    }
    var regexForLinkHeaderQuotedParamValueContext = /["';,\r\n]/g;
    function escapeStringForLinkHeaderQuotedParamValueContextReplacer(match) {
      switch (match) {
        case '"':
          return "%22";
        case "'":
          return "%27";
        case ";":
          return "%3B";
        case ",":
          return "%2C";
        case "\n":
          return "%0A";
        case "\r":
          return "%0D";
        default:
          throw Error(
            "escapeStringForLinkHeaderQuotedParamValueContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
          );
      }
    }
    function hoistStyleQueueDependency(styleQueue) {
      this.styles.add(styleQueue);
    }
    function hoistStylesheetDependency(stylesheet) {
      this.stylesheets.add(stylesheet);
    }
    function createRenderState(resumableState, generateStaticMarkup) {
      var idPrefix = resumableState.idPrefix, bootstrapChunks = [], bootstrapScriptContent = resumableState.bootstrapScriptContent, bootstrapScripts = resumableState.bootstrapScripts, bootstrapModules = resumableState.bootstrapModules;
      void 0 !== bootstrapScriptContent && bootstrapChunks.push(
        "<script>",
        ("" + bootstrapScriptContent).replace(scriptRegex, scriptReplacer),
        "</script>"
      );
      bootstrapScriptContent = idPrefix + "P:";
      var JSCompiler_object_inline_segmentPrefix_1686 = idPrefix + "S:";
      idPrefix += "B:";
      var JSCompiler_object_inline_preconnects_1700 = /* @__PURE__ */ new Set(), JSCompiler_object_inline_fontPreloads_1701 = /* @__PURE__ */ new Set(), JSCompiler_object_inline_highImagePreloads_1702 = /* @__PURE__ */ new Set(), JSCompiler_object_inline_styles_1703 = /* @__PURE__ */ new Map(), JSCompiler_object_inline_bootstrapScripts_1704 = /* @__PURE__ */ new Set(), JSCompiler_object_inline_scripts_1705 = /* @__PURE__ */ new Set(), JSCompiler_object_inline_bulkPreloads_1706 = /* @__PURE__ */ new Set(), JSCompiler_object_inline_preloads_1707 = {
        images: /* @__PURE__ */ new Map(),
        stylesheets: /* @__PURE__ */ new Map(),
        scripts: /* @__PURE__ */ new Map(),
        moduleScripts: /* @__PURE__ */ new Map()
      };
      if (void 0 !== bootstrapScripts)
        for (var i = 0; i < bootstrapScripts.length; i++) {
          var scriptConfig = bootstrapScripts[i], src, crossOrigin = void 0, integrity = void 0, props = {
            rel: "preload",
            as: "script",
            fetchPriority: "low",
            nonce: void 0
          };
          "string" === typeof scriptConfig ? props.href = src = scriptConfig : (props.href = src = scriptConfig.src, props.integrity = integrity = "string" === typeof scriptConfig.integrity ? scriptConfig.integrity : void 0, props.crossOrigin = crossOrigin = "string" === typeof scriptConfig || null == scriptConfig.crossOrigin ? void 0 : "use-credentials" === scriptConfig.crossOrigin ? "use-credentials" : "");
          scriptConfig = resumableState;
          var href = src;
          scriptConfig.scriptResources[href] = null;
          scriptConfig.moduleScriptResources[href] = null;
          scriptConfig = [];
          pushLinkImpl(scriptConfig, props);
          JSCompiler_object_inline_bootstrapScripts_1704.add(scriptConfig);
          bootstrapChunks.push('<script src="', escapeTextForBrowser(src));
          "string" === typeof integrity && bootstrapChunks.push('" integrity="', escapeTextForBrowser(integrity));
          "string" === typeof crossOrigin && bootstrapChunks.push(
            '" crossorigin="',
            escapeTextForBrowser(crossOrigin)
          );
          bootstrapChunks.push('" async=""></script>');
        }
      if (void 0 !== bootstrapModules)
        for (bootstrapScripts = 0; bootstrapScripts < bootstrapModules.length; bootstrapScripts++)
          props = bootstrapModules[bootstrapScripts], crossOrigin = src = void 0, integrity = {
            rel: "modulepreload",
            fetchPriority: "low",
            nonce: void 0
          }, "string" === typeof props ? integrity.href = i = props : (integrity.href = i = props.src, integrity.integrity = crossOrigin = "string" === typeof props.integrity ? props.integrity : void 0, integrity.crossOrigin = src = "string" === typeof props || null == props.crossOrigin ? void 0 : "use-credentials" === props.crossOrigin ? "use-credentials" : ""), props = resumableState, scriptConfig = i, props.scriptResources[scriptConfig] = null, props.moduleScriptResources[scriptConfig] = null, props = [], pushLinkImpl(props, integrity), JSCompiler_object_inline_bootstrapScripts_1704.add(props), bootstrapChunks.push(
            '<script type="module" src="',
            escapeTextForBrowser(i)
          ), "string" === typeof crossOrigin && bootstrapChunks.push(
            '" integrity="',
            escapeTextForBrowser(crossOrigin)
          ), "string" === typeof src && bootstrapChunks.push('" crossorigin="', escapeTextForBrowser(src)), bootstrapChunks.push('" async=""></script>');
      return {
        placeholderPrefix: bootstrapScriptContent,
        segmentPrefix: JSCompiler_object_inline_segmentPrefix_1686,
        boundaryPrefix: idPrefix,
        startInlineScript: "<script>",
        htmlChunks: null,
        headChunks: null,
        externalRuntimeScript: null,
        bootstrapChunks,
        importMapChunks: [],
        onHeaders: void 0,
        headers: null,
        resets: {
          font: {},
          dns: {},
          connect: { default: {}, anonymous: {}, credentials: {} },
          image: {},
          style: {}
        },
        charsetChunks: [],
        viewportChunks: [],
        hoistableChunks: [],
        preconnects: JSCompiler_object_inline_preconnects_1700,
        fontPreloads: JSCompiler_object_inline_fontPreloads_1701,
        highImagePreloads: JSCompiler_object_inline_highImagePreloads_1702,
        styles: JSCompiler_object_inline_styles_1703,
        bootstrapScripts: JSCompiler_object_inline_bootstrapScripts_1704,
        scripts: JSCompiler_object_inline_scripts_1705,
        bulkPreloads: JSCompiler_object_inline_bulkPreloads_1706,
        preloads: JSCompiler_object_inline_preloads_1707,
        stylesToHoist: false,
        generateStaticMarkup
      };
    }
    function pushTextInstance(target, text, renderState, textEmbedded) {
      if (renderState.generateStaticMarkup)
        return target.push(escapeTextForBrowser(text)), false;
      "" === text ? target = textEmbedded : (textEmbedded && target.push("<!-- -->"), target.push(escapeTextForBrowser(text)), target = true);
      return target;
    }
    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
    function getComponentNameFromType(type) {
      if (null == type)
        return null;
      if ("function" === typeof type)
        return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
      if ("string" === typeof type)
        return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if ("object" === typeof type)
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
          case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {
            }
        }
      return null;
    }
    var emptyContextObject = {};
    var currentActiveSnapshot = null;
    function popToNearestCommonAncestor(prev, next) {
      if (prev !== next) {
        prev.context._currentValue2 = prev.parentValue;
        prev = prev.parent;
        var parentNext = next.parent;
        if (null === prev) {
          if (null !== parentNext)
            throw Error(
              "The stacks must reach the root at the same time. This is a bug in React."
            );
        } else {
          if (null === parentNext)
            throw Error(
              "The stacks must reach the root at the same time. This is a bug in React."
            );
          popToNearestCommonAncestor(prev, parentNext);
        }
        next.context._currentValue2 = next.value;
      }
    }
    function popAllPrevious(prev) {
      prev.context._currentValue2 = prev.parentValue;
      prev = prev.parent;
      null !== prev && popAllPrevious(prev);
    }
    function pushAllNext(next) {
      var parentNext = next.parent;
      null !== parentNext && pushAllNext(parentNext);
      next.context._currentValue2 = next.value;
    }
    function popPreviousToCommonLevel(prev, next) {
      prev.context._currentValue2 = prev.parentValue;
      prev = prev.parent;
      if (null === prev)
        throw Error(
          "The depth must equal at least at zero before reaching the root. This is a bug in React."
        );
      prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : popPreviousToCommonLevel(prev, next);
    }
    function popNextToCommonLevel(prev, next) {
      var parentNext = next.parent;
      if (null === parentNext)
        throw Error(
          "The depth must equal at least at zero before reaching the root. This is a bug in React."
        );
      prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext);
      next.context._currentValue2 = next.value;
    }
    function switchContext(newSnapshot) {
      var prev = currentActiveSnapshot;
      prev !== newSnapshot && (null === prev ? pushAllNext(newSnapshot) : null === newSnapshot ? popAllPrevious(prev) : prev.depth === newSnapshot.depth ? popToNearestCommonAncestor(prev, newSnapshot) : prev.depth > newSnapshot.depth ? popPreviousToCommonLevel(prev, newSnapshot) : popNextToCommonLevel(prev, newSnapshot), currentActiveSnapshot = newSnapshot);
    }
    var classComponentUpdater = {
      isMounted: function() {
        return false;
      },
      enqueueSetState: function(inst, payload) {
        inst = inst._reactInternals;
        null !== inst.queue && inst.queue.push(payload);
      },
      enqueueReplaceState: function(inst, payload) {
        inst = inst._reactInternals;
        inst.replace = true;
        inst.queue = [payload];
      },
      enqueueForceUpdate: function() {
      }
    };
    var emptyTreeContext = { id: 1, overflow: "" };
    function pushTreeContext(baseContext, totalChildren, index) {
      var baseIdWithLeadingBit = baseContext.id;
      baseContext = baseContext.overflow;
      var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
      baseIdWithLeadingBit &= ~(1 << baseLength);
      index += 1;
      var length = 32 - clz32(totalChildren) + baseLength;
      if (30 < length) {
        var numberOfOverflowBits = baseLength - baseLength % 5;
        length = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
        baseIdWithLeadingBit >>= numberOfOverflowBits;
        baseLength -= numberOfOverflowBits;
        return {
          id: 1 << 32 - clz32(totalChildren) + baseLength | index << baseLength | baseIdWithLeadingBit,
          overflow: length + baseContext
        };
      }
      return {
        id: 1 << length | index << baseLength | baseIdWithLeadingBit,
        overflow: baseContext
      };
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
      x >>>= 0;
      return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
    }
    var SuspenseException = Error(
      "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"
    );
    function noop$2() {
    }
    function trackUsedThenable(thenableState2, thenable, index) {
      index = thenableState2[index];
      void 0 === index ? thenableState2.push(thenable) : index !== thenable && (thenable.then(noop$2, noop$2), thenable = index);
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenable.reason;
        default:
          "string" === typeof thenable.status ? thenable.then(noop$2, noop$2) : (thenableState2 = thenable, thenableState2.status = "pending", thenableState2.then(
            function(fulfilledValue) {
              if ("pending" === thenable.status) {
                var fulfilledThenable = thenable;
                fulfilledThenable.status = "fulfilled";
                fulfilledThenable.value = fulfilledValue;
              }
            },
            function(error) {
              if ("pending" === thenable.status) {
                var rejectedThenable = thenable;
                rejectedThenable.status = "rejected";
                rejectedThenable.reason = error;
              }
            }
          ));
          switch (thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenable.reason;
          }
          suspendedThenable = thenable;
          throw SuspenseException;
      }
    }
    var suspendedThenable = null;
    function getSuspendedThenable() {
      if (null === suspendedThenable)
        throw Error(
          "Expected a suspended thenable. This is a bug in React. Please file an issue."
        );
      var thenable = suspendedThenable;
      suspendedThenable = null;
      return thenable;
    }
    function is(x, y) {
      return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = "function" === typeof Object.is ? Object.is : is;
    var currentlyRenderingComponent = null;
    var currentlyRenderingTask = null;
    var currentlyRenderingRequest = null;
    var currentlyRenderingKeyPath = null;
    var firstWorkInProgressHook = null;
    var workInProgressHook = null;
    var isReRender = false;
    var didScheduleRenderPhaseUpdate = false;
    var localIdCounter = 0;
    var actionStateCounter = 0;
    var actionStateMatchingIndex = -1;
    var thenableIndexCounter = 0;
    var thenableState = null;
    var renderPhaseUpdates = null;
    var numberOfReRenders = 0;
    function resolveCurrentlyRenderingComponent() {
      if (null === currentlyRenderingComponent)
        throw Error(
          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
        );
      return currentlyRenderingComponent;
    }
    function createHook() {
      if (0 < numberOfReRenders)
        throw Error("Rendered more hooks than during the previous render");
      return { memoizedState: null, queue: null, next: null };
    }
    function createWorkInProgressHook() {
      null === workInProgressHook ? null === firstWorkInProgressHook ? (isReRender = false, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = true, workInProgressHook = firstWorkInProgressHook) : null === workInProgressHook.next ? (isReRender = false, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = true, workInProgressHook = workInProgressHook.next);
      return workInProgressHook;
    }
    function getThenableStateAfterSuspending() {
      var state = thenableState;
      thenableState = null;
      return state;
    }
    function resetHooksState() {
      currentlyRenderingKeyPath = currentlyRenderingRequest = currentlyRenderingTask = currentlyRenderingComponent = null;
      didScheduleRenderPhaseUpdate = false;
      firstWorkInProgressHook = null;
      numberOfReRenders = 0;
      workInProgressHook = renderPhaseUpdates = null;
    }
    function basicStateReducer(state, action) {
      return "function" === typeof action ? action(state) : action;
    }
    function useReducer(reducer, initialArg, init) {
      currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
      workInProgressHook = createWorkInProgressHook();
      if (isReRender) {
        var queue = workInProgressHook.queue;
        initialArg = queue.dispatch;
        if (null !== renderPhaseUpdates && (init = renderPhaseUpdates.get(queue), void 0 !== init)) {
          renderPhaseUpdates.delete(queue);
          queue = workInProgressHook.memoizedState;
          do
            queue = reducer(queue, init.action), init = init.next;
          while (null !== init);
          workInProgressHook.memoizedState = queue;
          return [queue, initialArg];
        }
        return [workInProgressHook.memoizedState, initialArg];
      }
      reducer = reducer === basicStateReducer ? "function" === typeof initialArg ? initialArg() : initialArg : void 0 !== init ? init(initialArg) : initialArg;
      workInProgressHook.memoizedState = reducer;
      reducer = workInProgressHook.queue = { last: null, dispatch: null };
      reducer = reducer.dispatch = dispatchAction.bind(
        null,
        currentlyRenderingComponent,
        reducer
      );
      return [workInProgressHook.memoizedState, reducer];
    }
    function useMemo(nextCreate, deps) {
      currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
      workInProgressHook = createWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      if (null !== workInProgressHook) {
        var prevState = workInProgressHook.memoizedState;
        if (null !== prevState && null !== deps) {
          var prevDeps = prevState[1];
          a:
            if (null === prevDeps)
              prevDeps = false;
            else {
              for (var i = 0; i < prevDeps.length && i < deps.length; i++)
                if (!objectIs(deps[i], prevDeps[i])) {
                  prevDeps = false;
                  break a;
                }
              prevDeps = true;
            }
          if (prevDeps)
            return prevState[0];
        }
      }
      nextCreate = nextCreate();
      workInProgressHook.memoizedState = [nextCreate, deps];
      return nextCreate;
    }
    function dispatchAction(componentIdentity, queue, action) {
      if (25 <= numberOfReRenders)
        throw Error(
          "Too many re-renders. React limits the number of renders to prevent an infinite loop."
        );
      if (componentIdentity === currentlyRenderingComponent)
        if (didScheduleRenderPhaseUpdate = true, componentIdentity = { action, next: null }, null === renderPhaseUpdates && (renderPhaseUpdates = /* @__PURE__ */ new Map()), action = renderPhaseUpdates.get(queue), void 0 === action)
          renderPhaseUpdates.set(queue, componentIdentity);
        else {
          for (queue = action; null !== queue.next; )
            queue = queue.next;
          queue.next = componentIdentity;
        }
    }
    function throwOnUseEffectEventCall() {
      throw Error(
        "A function wrapped in useEffectEvent can't be called during rendering."
      );
    }
    function unsupportedStartTransition() {
      throw Error("startTransition cannot be called during server rendering.");
    }
    function unsupportedSetOptimisticState() {
      throw Error("Cannot update optimistic state while rendering.");
    }
    function useActionState(action, initialState, permalink) {
      resolveCurrentlyRenderingComponent();
      var actionStateHookIndex = actionStateCounter++, request = currentlyRenderingRequest;
      if ("function" === typeof action.$$FORM_ACTION) {
        var nextPostbackStateKey = null, componentKeyPath = currentlyRenderingKeyPath;
        request = request.formState;
        var isSignatureEqual = action.$$IS_SIGNATURE_EQUAL;
        if (null !== request && "function" === typeof isSignatureEqual) {
          var postbackKey = request[1];
          isSignatureEqual.call(action, request[2], request[3]) && (nextPostbackStateKey = void 0 !== permalink ? "p" + permalink : "k" + murmurhash3_32_gc(
            JSON.stringify([componentKeyPath, null, actionStateHookIndex]),
            0
          ), postbackKey === nextPostbackStateKey && (actionStateMatchingIndex = actionStateHookIndex, initialState = request[0]));
        }
        var boundAction = action.bind(null, initialState);
        action = function(payload) {
          boundAction(payload);
        };
        "function" === typeof boundAction.$$FORM_ACTION && (action.$$FORM_ACTION = function(prefix2) {
          prefix2 = boundAction.$$FORM_ACTION(prefix2);
          void 0 !== permalink && (permalink += "", prefix2.action = permalink);
          var formData = prefix2.data;
          formData && (null === nextPostbackStateKey && (nextPostbackStateKey = void 0 !== permalink ? "p" + permalink : "k" + murmurhash3_32_gc(
            JSON.stringify([
              componentKeyPath,
              null,
              actionStateHookIndex
            ]),
            0
          )), formData.append("$ACTION_KEY", nextPostbackStateKey));
          return prefix2;
        });
        return [initialState, action, false];
      }
      var boundAction$22 = action.bind(null, initialState);
      return [
        initialState,
        function(payload) {
          boundAction$22(payload);
        },
        false
      ];
    }
    function unwrapThenable(thenable) {
      var index = thenableIndexCounter;
      thenableIndexCounter += 1;
      null === thenableState && (thenableState = []);
      return trackUsedThenable(thenableState, thenable, index);
    }
    function readPreviousThenableFromState() {
      var index = thenableIndexCounter;
      thenableIndexCounter += 1;
      if (null !== thenableState)
        return index = thenableState[index], index = void 0 === index ? void 0 : index.value, index;
    }
    function unsupportedRefresh() {
      throw Error("Cache cannot be refreshed during server rendering.");
    }
    function noop$1() {
    }
    var HooksDispatcher = {
      readContext: function(context) {
        return context._currentValue2;
      },
      use: function(usable) {
        if (null !== usable && "object" === typeof usable) {
          if ("function" === typeof usable.then)
            return unwrapThenable(usable);
          if (usable.$$typeof === REACT_CONTEXT_TYPE)
            return usable._currentValue2;
        }
        throw Error("An unsupported type was passed to use(): " + String(usable));
      },
      useContext: function(context) {
        resolveCurrentlyRenderingComponent();
        return context._currentValue2;
      },
      useMemo,
      useReducer,
      useRef: function(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
        workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        return null === previousRef ? (initialValue = { current: initialValue }, workInProgressHook.memoizedState = initialValue) : previousRef;
      },
      useState: function(initialState) {
        return useReducer(basicStateReducer, initialState);
      },
      useInsertionEffect: noop$1,
      useLayoutEffect: noop$1,
      useCallback: function(callback, deps) {
        return useMemo(function() {
          return callback;
        }, deps);
      },
      useImperativeHandle: noop$1,
      useEffect: noop$1,
      useDebugValue: noop$1,
      useDeferredValue: function(value, initialValue) {
        resolveCurrentlyRenderingComponent();
        return void 0 !== initialValue ? initialValue : value;
      },
      useTransition: function() {
        resolveCurrentlyRenderingComponent();
        return [false, unsupportedStartTransition];
      },
      useId: function() {
        var JSCompiler_inline_result = currentlyRenderingTask.treeContext;
        var overflow = JSCompiler_inline_result.overflow;
        JSCompiler_inline_result = JSCompiler_inline_result.id;
        JSCompiler_inline_result = (JSCompiler_inline_result & ~(1 << 32 - clz32(JSCompiler_inline_result) - 1)).toString(32) + overflow;
        var resumableState = currentResumableState;
        if (null === resumableState)
          throw Error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component."
          );
        overflow = localIdCounter++;
        JSCompiler_inline_result = ":" + resumableState.idPrefix + "R" + JSCompiler_inline_result;
        0 < overflow && (JSCompiler_inline_result += "H" + overflow.toString(32));
        return JSCompiler_inline_result + ":";
      },
      useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
        if (void 0 === getServerSnapshot)
          throw Error(
            "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
          );
        return getServerSnapshot();
      },
      useCacheRefresh: function() {
        return unsupportedRefresh;
      },
      useEffectEvent: function() {
        return throwOnUseEffectEventCall;
      },
      useMemoCache: function(size) {
        for (var data = Array(size), i = 0; i < size; i++)
          data[i] = REACT_MEMO_CACHE_SENTINEL;
        return data;
      },
      useHostTransitionStatus: function() {
        resolveCurrentlyRenderingComponent();
        return sharedNotPendingObject;
      },
      useOptimistic: function(passthrough) {
        resolveCurrentlyRenderingComponent();
        return [passthrough, unsupportedSetOptimisticState];
      }
    };
    HooksDispatcher.useFormState = useActionState;
    HooksDispatcher.useActionState = useActionState;
    var currentResumableState = null;
    var DefaultAsyncDispatcher = {
      getCacheForType: function() {
        throw Error("Not implemented.");
      }
    };
    var prefix;
    function describeBuiltInComponentFrame(name) {
      if (void 0 === prefix)
        try {
          throw Error();
        } catch (x) {
          var match = x.stack.trim().match(/\n( *(at )?)/);
          prefix = match && match[1] || "";
        }
      return "\n" + prefix + name;
    }
    var reentry = false;
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry)
        return "";
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var RunInRootFrame = {
        DetermineComponentFrameRoot: function() {
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if ("object" === typeof Reflect && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  var control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x$24) {
                  control = x$24;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x$25) {
                control = x$25;
              }
              (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {
              });
            }
          } catch (sample) {
            if (sample && control && "string" === typeof sample.stack)
              return [sample.stack, control.stack];
          }
          return [null, null];
        }
      };
      RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
      var namePropDescriptor = Object.getOwnPropertyDescriptor(
        RunInRootFrame.DetermineComponentFrameRoot,
        "name"
      );
      namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
        value: "DetermineComponentFrameRoot"
      });
      try {
        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
        if (sampleStack && controlStack) {
          var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
          for (namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot"); )
            RunInRootFrame++;
          for (; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes(
            "DetermineComponentFrameRoot"
          ); )
            namePropDescriptor++;
          if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length)
            for (RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]; )
              namePropDescriptor--;
          for (; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--)
            if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
              if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
                do
                  if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                    var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
                    fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
                    return frame;
                  }
                while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
              }
              break;
            }
        }
      } finally {
        reentry = false, Error.prepareStackTrace = previousPrepareStackTrace;
      }
      return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
    }
    function defaultErrorHandler(error) {
      console.error(error);
      return null;
    }
    function noop() {
    }
    function createRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError, onPostpone, formState) {
      var pingedTasks = [], abortSet = /* @__PURE__ */ new Set();
      resumableState = {
        destination: null,
        flushScheduled: false,
        resumableState,
        renderState,
        rootFormatContext,
        progressiveChunkSize: void 0 === progressiveChunkSize ? 12800 : progressiveChunkSize,
        status: 0,
        fatalError: null,
        nextSegmentId: 0,
        allPendingTasks: 0,
        pendingRootTasks: 0,
        completedRootSegment: null,
        abortableTasks: abortSet,
        pingedTasks,
        clientRenderedBoundaries: [],
        completedBoundaries: [],
        partialBoundaries: [],
        trackedPostpones: null,
        onError: void 0 === onError2 ? defaultErrorHandler : onError2,
        onPostpone: void 0 === onPostpone ? noop : onPostpone,
        onAllReady: void 0 === onAllReady ? noop : onAllReady,
        onShellReady: void 0 === onShellReady ? noop : onShellReady,
        onShellError: void 0 === onShellError ? noop : onShellError,
        onFatalError: void 0 === onFatalError ? noop : onFatalError,
        formState: void 0 === formState ? null : formState
      };
      renderState = createPendingSegment(
        resumableState,
        0,
        null,
        rootFormatContext,
        false,
        false
      );
      renderState.parentFlushed = true;
      children = createRenderTask(
        resumableState,
        null,
        children,
        -1,
        null,
        renderState,
        null,
        abortSet,
        null,
        rootFormatContext,
        emptyContextObject,
        null,
        emptyTreeContext,
        null,
        false
      );
      pingedTasks.push(children);
      return resumableState;
    }
    var currentRequest = null;
    function pingTask(request, task) {
      request.pingedTasks.push(task);
      1 === request.pingedTasks.length && (request.flushScheduled = null !== request.destination, performWork(request));
    }
    function createSuspenseBoundary(request, fallbackAbortableTasks) {
      return {
        status: 0,
        rootSegmentID: -1,
        parentFlushed: false,
        pendingTasks: 0,
        completedSegments: [],
        byteSize: 0,
        fallbackAbortableTasks,
        errorDigest: null,
        contentState: createHoistableState(),
        fallbackState: createHoistableState(),
        trackedContentKeyPath: null,
        trackedFallbackNode: null
      };
    }
    function createRenderTask(request, thenableState2, node, childIndex, blockedBoundary, blockedSegment, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
      request.allPendingTasks++;
      null === blockedBoundary ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
      var task = {
        replay: null,
        node,
        childIndex,
        ping: function() {
          return pingTask(request, task);
        },
        blockedBoundary,
        blockedSegment,
        hoistableState,
        abortSet,
        keyPath,
        formatContext,
        legacyContext,
        context,
        treeContext,
        componentStack,
        thenableState: thenableState2,
        isFallback
      };
      abortSet.add(task);
      return task;
    }
    function createReplayTask(request, thenableState2, replay, node, childIndex, blockedBoundary, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
      request.allPendingTasks++;
      null === blockedBoundary ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
      replay.pendingTasks++;
      var task = {
        replay,
        node,
        childIndex,
        ping: function() {
          return pingTask(request, task);
        },
        blockedBoundary,
        blockedSegment: null,
        hoistableState,
        abortSet,
        keyPath,
        formatContext,
        legacyContext,
        context,
        treeContext,
        componentStack,
        thenableState: thenableState2,
        isFallback
      };
      abortSet.add(task);
      return task;
    }
    function createPendingSegment(request, index, boundary, parentFormatContext, lastPushedText, textEmbedded) {
      return {
        status: 0,
        id: -1,
        index,
        parentFlushed: false,
        chunks: [],
        children: [],
        parentFormatContext,
        boundary,
        lastPushedText,
        textEmbedded
      };
    }
    function createBuiltInComponentStack(task, type) {
      return { tag: 0, parent: task.componentStack, type };
    }
    function getThrownInfo(request, node) {
      if (node && null !== request.trackedPostpones) {
        try {
          request = "";
          do {
            switch (node.tag) {
              case 0:
                request += describeBuiltInComponentFrame(node.type);
                break;
              case 1:
                request += describeNativeComponentFrame(node.type, false);
                break;
              case 2:
                request += describeNativeComponentFrame(node.type, true);
            }
            node = node.parent;
          } while (node);
          var JSCompiler_temp = request;
        } catch (x) {
          JSCompiler_temp = "\nError generating stack: " + x.message + "\n" + x.stack;
        }
        JSCompiler_temp = { componentStack: JSCompiler_temp };
      } else
        JSCompiler_temp = {};
      return JSCompiler_temp;
    }
    function logRecoverableError(request, error, errorInfo) {
      request = request.onError(error, errorInfo);
      if (null == request || "string" === typeof request)
        return request;
    }
    function fatalError(request, error) {
      var onShellError = request.onShellError;
      onShellError(error);
      onShellError = request.onFatalError;
      onShellError(error);
      null !== request.destination ? (request.status = 2, request.destination.destroy(error)) : (request.status = 1, request.fatalError = error);
    }
    function renderWithHooks(request, task, keyPath, Component, props, secondArg) {
      var prevThenableState = task.thenableState;
      task.thenableState = null;
      currentlyRenderingComponent = {};
      currentlyRenderingTask = task;
      currentlyRenderingRequest = request;
      currentlyRenderingKeyPath = keyPath;
      actionStateCounter = localIdCounter = 0;
      actionStateMatchingIndex = -1;
      thenableIndexCounter = 0;
      thenableState = prevThenableState;
      for (request = Component(props, secondArg); didScheduleRenderPhaseUpdate; )
        didScheduleRenderPhaseUpdate = false, actionStateCounter = localIdCounter = 0, actionStateMatchingIndex = -1, thenableIndexCounter = 0, numberOfReRenders += 1, workInProgressHook = null, request = Component(props, secondArg);
      resetHooksState();
      return request;
    }
    function finishFunctionComponent(request, task, keyPath, children, hasId, actionStateCount, actionStateMatchingIndex2) {
      var didEmitActionStateMarkers = false;
      if (0 !== actionStateCount && null !== request.formState) {
        var segment = task.blockedSegment;
        if (null !== segment) {
          didEmitActionStateMarkers = true;
          segment = segment.chunks;
          for (var i = 0; i < actionStateCount; i++)
            i === actionStateMatchingIndex2 ? segment.push("<!--F!-->") : segment.push("<!--F-->");
        }
      }
      actionStateCount = task.keyPath;
      task.keyPath = keyPath;
      hasId ? (keyPath = task.treeContext, task.treeContext = pushTreeContext(keyPath, 1, 0), renderNode(request, task, children, -1), task.treeContext = keyPath) : didEmitActionStateMarkers ? renderNode(request, task, children, -1) : renderNodeDestructive(request, task, children, -1);
      task.keyPath = actionStateCount;
    }
    function renderElement(request, task, keyPath, type, props, ref) {
      if ("function" === typeof type)
        if (type.prototype && type.prototype.isReactComponent) {
          var JSCompiler_inline_result = props;
          if ("ref" in props) {
            JSCompiler_inline_result = {};
            for (var propName in props)
              "ref" !== propName && (JSCompiler_inline_result[propName] = props[propName]);
          }
          var defaultProps = type.defaultProps;
          if (defaultProps) {
            JSCompiler_inline_result === props && (JSCompiler_inline_result = assign(
              {},
              JSCompiler_inline_result,
              props
            ));
            for (var propName$31 in defaultProps)
              void 0 === JSCompiler_inline_result[propName$31] && (JSCompiler_inline_result[propName$31] = defaultProps[propName$31]);
          }
          props = task.componentStack;
          task.componentStack = { tag: 2, parent: task.componentStack, type };
          defaultProps = emptyContextObject;
          ref = type.contextType;
          "object" === typeof ref && null !== ref && (defaultProps = ref._currentValue2);
          defaultProps = new type(JSCompiler_inline_result, defaultProps);
          propName$31 = void 0 !== defaultProps.state ? defaultProps.state : null;
          defaultProps.updater = classComponentUpdater;
          defaultProps.props = JSCompiler_inline_result;
          defaultProps.state = propName$31;
          ref = { queue: [], replace: false };
          defaultProps._reactInternals = ref;
          var contextType = type.contextType;
          defaultProps.context = "object" === typeof contextType && null !== contextType ? contextType._currentValue2 : emptyContextObject;
          contextType = type.getDerivedStateFromProps;
          "function" === typeof contextType && (contextType = contextType(JSCompiler_inline_result, propName$31), propName$31 = null === contextType || void 0 === contextType ? propName$31 : assign({}, propName$31, contextType), defaultProps.state = propName$31);
          if ("function" !== typeof type.getDerivedStateFromProps && "function" !== typeof defaultProps.getSnapshotBeforeUpdate && ("function" === typeof defaultProps.UNSAFE_componentWillMount || "function" === typeof defaultProps.componentWillMount))
            if (type = defaultProps.state, "function" === typeof defaultProps.componentWillMount && defaultProps.componentWillMount(), "function" === typeof defaultProps.UNSAFE_componentWillMount && defaultProps.UNSAFE_componentWillMount(), type !== defaultProps.state && classComponentUpdater.enqueueReplaceState(
              defaultProps,
              defaultProps.state,
              null
            ), null !== ref.queue && 0 < ref.queue.length)
              if (type = ref.queue, contextType = ref.replace, ref.queue = null, ref.replace = false, contextType && 1 === type.length)
                defaultProps.state = type[0];
              else {
                ref = contextType ? type[0] : defaultProps.state;
                propName$31 = true;
                for (contextType = contextType ? 1 : 0; contextType < type.length; contextType++)
                  propName = type[contextType], propName = "function" === typeof propName ? propName.call(
                    defaultProps,
                    ref,
                    JSCompiler_inline_result,
                    void 0
                  ) : propName, null != propName && (propName$31 ? (propName$31 = false, ref = assign({}, ref, propName)) : assign(ref, propName));
                defaultProps.state = ref;
              }
            else
              ref.queue = null;
          type = defaultProps.render();
          JSCompiler_inline_result = task.keyPath;
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, type, -1);
          task.keyPath = JSCompiler_inline_result;
          task.componentStack = props;
        } else
          JSCompiler_inline_result = task.componentStack, task.componentStack = {
            tag: 1,
            parent: task.componentStack,
            type
          }, type = renderWithHooks(request, task, keyPath, type, props, void 0), finishFunctionComponent(
            request,
            task,
            keyPath,
            type,
            0 !== localIdCounter,
            actionStateCounter,
            actionStateMatchingIndex
          ), task.componentStack = JSCompiler_inline_result;
      else if ("string" === typeof type) {
        JSCompiler_inline_result = task.componentStack;
        task.componentStack = createBuiltInComponentStack(task, type);
        defaultProps = task.blockedSegment;
        if (null === defaultProps)
          defaultProps = props.children, ref = task.formatContext, propName$31 = task.keyPath, task.formatContext = getChildFormatContext(ref, type, props), task.keyPath = keyPath, renderNode(request, task, defaultProps, -1), task.formatContext = ref, task.keyPath = propName$31;
        else {
          propName$31 = pushStartInstance(
            defaultProps.chunks,
            type,
            props,
            request.resumableState,
            request.renderState,
            task.hoistableState,
            task.formatContext,
            defaultProps.lastPushedText,
            task.isFallback
          );
          defaultProps.lastPushedText = false;
          ref = task.formatContext;
          contextType = task.keyPath;
          task.formatContext = getChildFormatContext(ref, type, props);
          task.keyPath = keyPath;
          renderNode(request, task, propName$31, -1);
          task.formatContext = ref;
          task.keyPath = contextType;
          a: {
            keyPath = defaultProps.chunks;
            request = request.resumableState;
            switch (type) {
              case "title":
              case "style":
              case "script":
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "input":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr":
                break a;
              case "body":
                if (1 >= ref.insertionMode) {
                  request.hasBody = true;
                  break a;
                }
                break;
              case "html":
                if (0 === ref.insertionMode) {
                  request.hasHtml = true;
                  break a;
                }
            }
            keyPath.push(endChunkForTag(type));
          }
          defaultProps.lastPushedText = false;
        }
        task.componentStack = JSCompiler_inline_result;
      } else {
        switch (type) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE:
            type = task.keyPath;
            task.keyPath = keyPath;
            renderNodeDestructive(request, task, props.children, -1);
            task.keyPath = type;
            return;
          case REACT_OFFSCREEN_TYPE:
            "hidden" !== props.mode && (type = task.keyPath, task.keyPath = keyPath, renderNodeDestructive(request, task, props.children, -1), task.keyPath = type);
            return;
          case REACT_SUSPENSE_LIST_TYPE:
            type = task.componentStack;
            task.componentStack = createBuiltInComponentStack(task, "SuspenseList");
            JSCompiler_inline_result = task.keyPath;
            task.keyPath = keyPath;
            renderNodeDestructive(request, task, props.children, -1);
            task.keyPath = JSCompiler_inline_result;
            task.componentStack = type;
            return;
          case REACT_SCOPE_TYPE:
            throw Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE:
            a:
              if (null !== task.replay) {
                type = task.keyPath;
                task.keyPath = keyPath;
                keyPath = props.children;
                try {
                  renderNode(request, task, keyPath, -1);
                } finally {
                  task.keyPath = type;
                }
              } else {
                var previousComponentStack = task.componentStack;
                type = task.componentStack = createBuiltInComponentStack(
                  task,
                  "Suspense"
                );
                var prevKeyPath = task.keyPath;
                ref = task.blockedBoundary;
                var parentHoistableState = task.hoistableState, parentSegment = task.blockedSegment;
                propName$31 = props.fallback;
                var content = props.children;
                props = /* @__PURE__ */ new Set();
                contextType = createSuspenseBoundary(request, props);
                null !== request.trackedPostpones && (contextType.trackedContentKeyPath = keyPath);
                propName = createPendingSegment(
                  request,
                  parentSegment.chunks.length,
                  contextType,
                  task.formatContext,
                  false,
                  false
                );
                parentSegment.children.push(propName);
                parentSegment.lastPushedText = false;
                var contentRootSegment = createPendingSegment(
                  request,
                  0,
                  null,
                  task.formatContext,
                  false,
                  false
                );
                contentRootSegment.parentFlushed = true;
                task.blockedBoundary = contextType;
                task.hoistableState = contextType.contentState;
                task.blockedSegment = contentRootSegment;
                task.keyPath = keyPath;
                try {
                  if (renderNode(request, task, content, -1), request.renderState.generateStaticMarkup || contentRootSegment.lastPushedText && contentRootSegment.textEmbedded && contentRootSegment.chunks.push("<!-- -->"), contentRootSegment.status = 1, queueCompletedSegment(contextType, contentRootSegment), 0 === contextType.pendingTasks && 0 === contextType.status) {
                    contextType.status = 1;
                    task.componentStack = previousComponentStack;
                    break a;
                  }
                } catch (error) {
                  contentRootSegment.status = 4, contextType.status = 4, JSCompiler_inline_result = getThrownInfo(
                    request,
                    task.componentStack
                  ), "object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(error.message, JSCompiler_inline_result), defaultProps = "POSTPONE") : defaultProps = logRecoverableError(
                    request,
                    error,
                    JSCompiler_inline_result
                  ), contextType.errorDigest = defaultProps, untrackBoundary(request, contextType);
                } finally {
                  task.blockedBoundary = ref, task.hoistableState = parentHoistableState, task.blockedSegment = parentSegment, task.keyPath = prevKeyPath, task.componentStack = previousComponentStack;
                }
                JSCompiler_inline_result = [
                  keyPath[0],
                  "Suspense Fallback",
                  keyPath[2]
                ];
                defaultProps = request.trackedPostpones;
                null !== defaultProps && (previousComponentStack = [
                  JSCompiler_inline_result[1],
                  JSCompiler_inline_result[2],
                  [],
                  null
                ], defaultProps.workingMap.set(
                  JSCompiler_inline_result,
                  previousComponentStack
                ), 5 === contextType.status ? defaultProps.workingMap.get(keyPath)[4] = previousComponentStack : contextType.trackedFallbackNode = previousComponentStack);
                task = createRenderTask(
                  request,
                  null,
                  propName$31,
                  -1,
                  ref,
                  propName,
                  contextType.fallbackState,
                  props,
                  JSCompiler_inline_result,
                  task.formatContext,
                  task.legacyContext,
                  task.context,
                  task.treeContext,
                  type,
                  true
                );
                request.pingedTasks.push(task);
              }
            return;
        }
        if ("object" === typeof type && null !== type)
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              JSCompiler_inline_result = task.componentStack;
              task.componentStack = {
                tag: 1,
                parent: task.componentStack,
                type: type.render
              };
              if ("ref" in props)
                for (contextType in defaultProps = {}, props)
                  "ref" !== contextType && (defaultProps[contextType] = props[contextType]);
              else
                defaultProps = props;
              type = renderWithHooks(
                request,
                task,
                keyPath,
                type.render,
                defaultProps,
                ref
              );
              finishFunctionComponent(
                request,
                task,
                keyPath,
                type,
                0 !== localIdCounter,
                actionStateCounter,
                actionStateMatchingIndex
              );
              task.componentStack = JSCompiler_inline_result;
              return;
            case REACT_MEMO_TYPE:
              renderElement(request, task, keyPath, type.type, props, ref);
              return;
            case REACT_PROVIDER_TYPE:
            case REACT_CONTEXT_TYPE:
              defaultProps = props.children;
              JSCompiler_inline_result = task.keyPath;
              props = props.value;
              ref = type._currentValue2;
              type._currentValue2 = props;
              propName$31 = currentActiveSnapshot;
              currentActiveSnapshot = type = {
                parent: propName$31,
                depth: null === propName$31 ? 0 : propName$31.depth + 1,
                context: type,
                parentValue: ref,
                value: props
              };
              task.context = type;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, defaultProps, -1);
              request = currentActiveSnapshot;
              if (null === request)
                throw Error(
                  "Tried to pop a Context at the root of the app. This is a bug in React."
                );
              request.context._currentValue2 = request.parentValue;
              request = currentActiveSnapshot = request.parent;
              task.context = request;
              task.keyPath = JSCompiler_inline_result;
              return;
            case REACT_CONSUMER_TYPE:
              props = props.children;
              type = props(type._context._currentValue2);
              props = task.keyPath;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, type, -1);
              task.keyPath = props;
              return;
            case REACT_LAZY_TYPE:
              JSCompiler_inline_result = task.componentStack;
              task.componentStack = createBuiltInComponentStack(task, "Lazy");
              defaultProps = type._init;
              type = defaultProps(type._payload);
              renderElement(request, task, keyPath, type, props, void 0);
              task.componentStack = JSCompiler_inline_result;
              return;
          }
        throw Error(
          "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null == type ? type : typeof type) + ".")
        );
      }
    }
    function resumeNode(request, task, segmentId, node, childIndex) {
      var prevReplay = task.replay, blockedBoundary = task.blockedBoundary, resumedSegment = createPendingSegment(
        request,
        0,
        null,
        task.formatContext,
        false,
        false
      );
      resumedSegment.id = segmentId;
      resumedSegment.parentFlushed = true;
      try {
        task.replay = null, task.blockedSegment = resumedSegment, renderNode(request, task, node, childIndex), resumedSegment.status = 1, null === blockedBoundary ? request.completedRootSegment = resumedSegment : (queueCompletedSegment(blockedBoundary, resumedSegment), blockedBoundary.parentFlushed && request.partialBoundaries.push(blockedBoundary));
      } finally {
        task.replay = prevReplay, task.blockedSegment = null;
      }
    }
    function renderNodeDestructive(request, task, node$jscomp$0, childIndex) {
      if (null !== task.replay && "number" === typeof task.replay.slots)
        resumeNode(request, task, task.replay.slots, node$jscomp$0, childIndex);
      else if (task.node = node$jscomp$0, task.childIndex = childIndex, null !== node$jscomp$0) {
        if ("object" === typeof node$jscomp$0) {
          switch (node$jscomp$0.$$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = node$jscomp$0.type, key = node$jscomp$0.key, props = node$jscomp$0.props;
              node$jscomp$0 = props.ref;
              var ref = void 0 !== node$jscomp$0 ? node$jscomp$0 : null;
              var name = getComponentNameFromType(type), keyOrIndex = null == key ? -1 === childIndex ? 0 : childIndex : key;
              key = [task.keyPath, name, keyOrIndex];
              if (null !== task.replay)
                a: {
                  var replay = task.replay;
                  childIndex = replay.nodes;
                  for (node$jscomp$0 = 0; node$jscomp$0 < childIndex.length; node$jscomp$0++) {
                    var node = childIndex[node$jscomp$0];
                    if (keyOrIndex === node[1]) {
                      if (4 === node.length) {
                        if (null !== name && name !== node[0])
                          throw Error(
                            "Expected the resume to render <" + node[0] + "> in this slot but instead it rendered <" + name + ">. The tree doesn't match so React will fallback to client rendering."
                          );
                        var childNodes = node[2];
                        name = node[3];
                        keyOrIndex = task.node;
                        task.replay = {
                          nodes: childNodes,
                          slots: name,
                          pendingTasks: 1
                        };
                        try {
                          renderElement(request, task, key, type, props, ref);
                          if (1 === task.replay.pendingTasks && 0 < task.replay.nodes.length)
                            throw Error(
                              "Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering."
                            );
                          task.replay.pendingTasks--;
                        } catch (x) {
                          if ("object" === typeof x && null !== x && (x === SuspenseException || "function" === typeof x.then))
                            throw task.node === keyOrIndex && (task.replay = replay), x;
                          task.replay.pendingTasks--;
                          props = getThrownInfo(request, task.componentStack);
                          erroredReplay(
                            request,
                            task.blockedBoundary,
                            x,
                            props,
                            childNodes,
                            name
                          );
                        }
                        task.replay = replay;
                      } else {
                        if (type !== REACT_SUSPENSE_TYPE)
                          throw Error(
                            "Expected the resume to render <Suspense> in this slot but instead it rendered <" + (getComponentNameFromType(type) || "Unknown") + ">. The tree doesn't match so React will fallback to client rendering."
                          );
                        b: {
                          type = void 0;
                          ref = node[5];
                          replay = node[2];
                          name = node[3];
                          keyOrIndex = null === node[4] ? [] : node[4][2];
                          node = null === node[4] ? null : node[4][3];
                          var previousComponentStack = task.componentStack, suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, "Suspense"), prevKeyPath = task.keyPath, previousReplaySet = task.replay, parentBoundary = task.blockedBoundary, parentHoistableState = task.hoistableState, content = props.children;
                          props = props.fallback;
                          var fallbackAbortSet = /* @__PURE__ */ new Set(), resumedBoundary = createSuspenseBoundary(
                            request,
                            fallbackAbortSet
                          );
                          resumedBoundary.parentFlushed = true;
                          resumedBoundary.rootSegmentID = ref;
                          task.blockedBoundary = resumedBoundary;
                          task.hoistableState = resumedBoundary.contentState;
                          task.replay = {
                            nodes: replay,
                            slots: name,
                            pendingTasks: 1
                          };
                          try {
                            renderNode(request, task, content, -1);
                            if (1 === task.replay.pendingTasks && 0 < task.replay.nodes.length)
                              throw Error(
                                "Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering."
                              );
                            task.replay.pendingTasks--;
                            if (0 === resumedBoundary.pendingTasks && 0 === resumedBoundary.status) {
                              resumedBoundary.status = 1;
                              request.completedBoundaries.push(resumedBoundary);
                              break b;
                            }
                          } catch (error) {
                            resumedBoundary.status = 4, childNodes = getThrownInfo(
                              request,
                              task.componentStack
                            ), "object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(error.message, childNodes), type = "POSTPONE") : type = logRecoverableError(
                              request,
                              error,
                              childNodes
                            ), resumedBoundary.errorDigest = type, task.replay.pendingTasks--, request.clientRenderedBoundaries.push(
                              resumedBoundary
                            );
                          } finally {
                            task.blockedBoundary = parentBoundary, task.hoistableState = parentHoistableState, task.replay = previousReplaySet, task.keyPath = prevKeyPath, task.componentStack = previousComponentStack;
                          }
                          task = createReplayTask(
                            request,
                            null,
                            { nodes: keyOrIndex, slots: node, pendingTasks: 0 },
                            props,
                            -1,
                            parentBoundary,
                            resumedBoundary.fallbackState,
                            fallbackAbortSet,
                            [key[0], "Suspense Fallback", key[2]],
                            task.formatContext,
                            task.legacyContext,
                            task.context,
                            task.treeContext,
                            suspenseComponentStack,
                            true
                          );
                          request.pingedTasks.push(task);
                        }
                      }
                      childIndex.splice(node$jscomp$0, 1);
                      break a;
                    }
                  }
                }
              else
                renderElement(request, task, key, type, props, ref);
              return;
            case REACT_PORTAL_TYPE:
              throw Error(
                "Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render."
              );
            case REACT_LAZY_TYPE:
              childNodes = task.componentStack;
              task.componentStack = createBuiltInComponentStack(task, "Lazy");
              props = node$jscomp$0._init;
              node$jscomp$0 = props(node$jscomp$0._payload);
              task.componentStack = childNodes;
              renderNodeDestructive(request, task, node$jscomp$0, childIndex);
              return;
          }
          if (isArrayImpl(node$jscomp$0)) {
            renderChildrenArray(request, task, node$jscomp$0, childIndex);
            return;
          }
          null === node$jscomp$0 || "object" !== typeof node$jscomp$0 ? childNodes = null : (childNodes = MAYBE_ITERATOR_SYMBOL && node$jscomp$0[MAYBE_ITERATOR_SYMBOL] || node$jscomp$0["@@iterator"], childNodes = "function" === typeof childNodes ? childNodes : null);
          if (childNodes && (childNodes = childNodes.call(node$jscomp$0))) {
            node$jscomp$0 = childNodes.next();
            if (!node$jscomp$0.done) {
              props = [];
              do
                props.push(node$jscomp$0.value), node$jscomp$0 = childNodes.next();
              while (!node$jscomp$0.done);
              renderChildrenArray(request, task, props, childIndex);
            }
            return;
          }
          if ("function" === typeof node$jscomp$0[ASYNC_ITERATOR] && (childNodes = node$jscomp$0[ASYNC_ITERATOR]())) {
            props = task.componentStack;
            task.componentStack = createBuiltInComponentStack(
              task,
              "AsyncIterable"
            );
            key = task.thenableState;
            task.thenableState = null;
            thenableIndexCounter = 0;
            thenableState = key;
            key = [];
            type = false;
            if (childNodes === node$jscomp$0)
              for (node$jscomp$0 = readPreviousThenableFromState(); void 0 !== node$jscomp$0; ) {
                if (node$jscomp$0.done) {
                  type = true;
                  break;
                }
                key.push(node$jscomp$0.value);
                node$jscomp$0 = readPreviousThenableFromState();
              }
            if (!type)
              for (node$jscomp$0 = unwrapThenable(childNodes.next()); !node$jscomp$0.done; )
                key.push(node$jscomp$0.value), node$jscomp$0 = unwrapThenable(childNodes.next());
            task.componentStack = props;
            renderChildrenArray(request, task, key, childIndex);
            return;
          }
          if ("function" === typeof node$jscomp$0.then)
            return task.thenableState = null, renderNodeDestructive(
              request,
              task,
              unwrapThenable(node$jscomp$0),
              childIndex
            );
          if (node$jscomp$0.$$typeof === REACT_CONTEXT_TYPE)
            return renderNodeDestructive(
              request,
              task,
              node$jscomp$0._currentValue2,
              childIndex
            );
          request = Object.prototype.toString.call(node$jscomp$0);
          throw Error(
            "Objects are not valid as a React child (found: " + ("[object Object]" === request ? "object with keys {" + Object.keys(node$jscomp$0).join(", ") + "}" : request) + "). If you meant to render a collection of children, use an array instead."
          );
        }
        if ("string" === typeof node$jscomp$0)
          task = task.blockedSegment, null !== task && (task.lastPushedText = pushTextInstance(
            task.chunks,
            node$jscomp$0,
            request.renderState,
            task.lastPushedText
          ));
        else if ("number" === typeof node$jscomp$0 || "bigint" === typeof node$jscomp$0)
          task = task.blockedSegment, null !== task && (task.lastPushedText = pushTextInstance(
            task.chunks,
            "" + node$jscomp$0,
            request.renderState,
            task.lastPushedText
          ));
      }
    }
    function renderChildrenArray(request, task, children, childIndex) {
      var prevKeyPath = task.keyPath;
      if (-1 !== childIndex && (task.keyPath = [task.keyPath, "Fragment", childIndex], null !== task.replay)) {
        for (var replay = task.replay, replayNodes = replay.nodes, j = 0; j < replayNodes.length; j++) {
          var node = replayNodes[j];
          if (node[1] === childIndex) {
            childIndex = node[2];
            node = node[3];
            task.replay = { nodes: childIndex, slots: node, pendingTasks: 1 };
            try {
              renderChildrenArray(request, task, children, -1);
              if (1 === task.replay.pendingTasks && 0 < task.replay.nodes.length)
                throw Error(
                  "Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering."
                );
              task.replay.pendingTasks--;
            } catch (x) {
              if ("object" === typeof x && null !== x && (x === SuspenseException || "function" === typeof x.then))
                throw x;
              task.replay.pendingTasks--;
              children = getThrownInfo(request, task.componentStack);
              erroredReplay(
                request,
                task.blockedBoundary,
                x,
                children,
                childIndex,
                node
              );
            }
            task.replay = replay;
            replayNodes.splice(j, 1);
            break;
          }
        }
        task.keyPath = prevKeyPath;
        return;
      }
      replay = task.treeContext;
      replayNodes = children.length;
      if (null !== task.replay && (j = task.replay.slots, null !== j && "object" === typeof j)) {
        for (childIndex = 0; childIndex < replayNodes; childIndex++) {
          node = children[childIndex];
          task.treeContext = pushTreeContext(replay, replayNodes, childIndex);
          var resumeSegmentID = j[childIndex];
          "number" === typeof resumeSegmentID ? (resumeNode(request, task, resumeSegmentID, node, childIndex), delete j[childIndex]) : renderNode(request, task, node, childIndex);
        }
        task.treeContext = replay;
        task.keyPath = prevKeyPath;
        return;
      }
      for (j = 0; j < replayNodes; j++)
        childIndex = children[j], task.treeContext = pushTreeContext(replay, replayNodes, j), renderNode(request, task, childIndex, j);
      task.treeContext = replay;
      task.keyPath = prevKeyPath;
    }
    function trackPostpone(request, trackedPostpones, task, segment) {
      segment.status = 5;
      var keyPath = task.keyPath, boundary = task.blockedBoundary;
      if (null === boundary)
        segment.id = request.nextSegmentId++, trackedPostpones.rootSlots = segment.id, null !== request.completedRootSegment && (request.completedRootSegment.status = 5);
      else {
        if (null !== boundary && 0 === boundary.status) {
          boundary.status = 5;
          boundary.rootSegmentID = request.nextSegmentId++;
          var boundaryKeyPath = boundary.trackedContentKeyPath;
          if (null === boundaryKeyPath)
            throw Error(
              "It should not be possible to postpone at the root. This is a bug in React."
            );
          var fallbackReplayNode = boundary.trackedFallbackNode, children = [];
          if (boundaryKeyPath === keyPath && -1 === task.childIndex) {
            -1 === segment.id && (segment.id = segment.parentFlushed ? boundary.rootSegmentID : request.nextSegmentId++);
            segment = [
              boundaryKeyPath[1],
              boundaryKeyPath[2],
              children,
              segment.id,
              fallbackReplayNode,
              boundary.rootSegmentID
            ];
            trackedPostpones.workingMap.set(boundaryKeyPath, segment);
            addToReplayParent(segment, boundaryKeyPath[0], trackedPostpones);
            return;
          }
          var boundaryNode$42 = trackedPostpones.workingMap.get(boundaryKeyPath);
          void 0 === boundaryNode$42 ? (boundaryNode$42 = [
            boundaryKeyPath[1],
            boundaryKeyPath[2],
            children,
            null,
            fallbackReplayNode,
            boundary.rootSegmentID
          ], trackedPostpones.workingMap.set(boundaryKeyPath, boundaryNode$42), addToReplayParent(
            boundaryNode$42,
            boundaryKeyPath[0],
            trackedPostpones
          )) : (boundaryKeyPath = boundaryNode$42, boundaryKeyPath[4] = fallbackReplayNode, boundaryKeyPath[5] = boundary.rootSegmentID);
        }
        -1 === segment.id && (segment.id = segment.parentFlushed && null !== boundary ? boundary.rootSegmentID : request.nextSegmentId++);
        if (-1 === task.childIndex)
          null === keyPath ? trackedPostpones.rootSlots = segment.id : (task = trackedPostpones.workingMap.get(keyPath), void 0 === task ? (task = [keyPath[1], keyPath[2], [], segment.id], addToReplayParent(task, keyPath[0], trackedPostpones)) : task[3] = segment.id);
        else {
          if (null === keyPath)
            if (request = trackedPostpones.rootSlots, null === request)
              request = trackedPostpones.rootSlots = {};
            else {
              if ("number" === typeof request)
                throw Error(
                  "It should not be possible to postpone both at the root of an element as well as a slot below. This is a bug in React."
                );
            }
          else if (boundary = trackedPostpones.workingMap, boundaryKeyPath = boundary.get(keyPath), void 0 === boundaryKeyPath)
            request = {}, boundaryKeyPath = [keyPath[1], keyPath[2], [], request], boundary.set(keyPath, boundaryKeyPath), addToReplayParent(boundaryKeyPath, keyPath[0], trackedPostpones);
          else if (request = boundaryKeyPath[3], null === request)
            request = boundaryKeyPath[3] = {};
          else if ("number" === typeof request)
            throw Error(
              "It should not be possible to postpone both at the root of an element as well as a slot below. This is a bug in React."
            );
          request[task.childIndex] = segment.id;
        }
      }
    }
    function untrackBoundary(request, boundary) {
      request = request.trackedPostpones;
      null !== request && (boundary = boundary.trackedContentKeyPath, null !== boundary && (boundary = request.workingMap.get(boundary), void 0 !== boundary && (boundary.length = 4, boundary[2] = [], boundary[3] = null)));
    }
    function renderNode(request, task, node, childIndex) {
      var previousFormatContext = task.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousKeyPath = task.keyPath, previousTreeContext = task.treeContext, previousComponentStack = task.componentStack, segment = task.blockedSegment;
      if (null === segment)
        try {
          return renderNodeDestructive(request, task, node, childIndex);
        } catch (thrownValue) {
          if (resetHooksState(), childIndex = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue, "object" === typeof childIndex && null !== childIndex && "function" === typeof childIndex.then) {
            node = childIndex;
            childIndex = getThenableStateAfterSuspending();
            request = createReplayTask(
              request,
              childIndex,
              task.replay,
              task.node,
              task.childIndex,
              task.blockedBoundary,
              task.hoistableState,
              task.abortSet,
              task.keyPath,
              task.formatContext,
              task.legacyContext,
              task.context,
              task.treeContext,
              null !== task.componentStack ? task.componentStack.parent : null,
              task.isFallback
            ).ping;
            node.then(request, request);
            task.formatContext = previousFormatContext;
            task.legacyContext = previousLegacyContext;
            task.context = previousContext;
            task.keyPath = previousKeyPath;
            task.treeContext = previousTreeContext;
            task.componentStack = previousComponentStack;
            switchContext(previousContext);
            return;
          }
        }
      else {
        var childrenLength = segment.children.length, chunkLength = segment.chunks.length;
        try {
          return renderNodeDestructive(request, task, node, childIndex);
        } catch (thrownValue$48) {
          if (resetHooksState(), segment.children.length = childrenLength, segment.chunks.length = chunkLength, childIndex = thrownValue$48 === SuspenseException ? getSuspendedThenable() : thrownValue$48, "object" === typeof childIndex && null !== childIndex) {
            if ("function" === typeof childIndex.then) {
              node = childIndex;
              childIndex = getThenableStateAfterSuspending();
              segment = task.blockedSegment;
              childrenLength = createPendingSegment(
                request,
                segment.chunks.length,
                null,
                task.formatContext,
                segment.lastPushedText,
                true
              );
              segment.children.push(childrenLength);
              segment.lastPushedText = false;
              request = createRenderTask(
                request,
                childIndex,
                task.node,
                task.childIndex,
                task.blockedBoundary,
                childrenLength,
                task.hoistableState,
                task.abortSet,
                task.keyPath,
                task.formatContext,
                task.legacyContext,
                task.context,
                task.treeContext,
                null !== task.componentStack ? task.componentStack.parent : null,
                task.isFallback
              ).ping;
              node.then(request, request);
              task.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              task.keyPath = previousKeyPath;
              task.treeContext = previousTreeContext;
              task.componentStack = previousComponentStack;
              switchContext(previousContext);
              return;
            }
            if (childIndex.$$typeof === REACT_POSTPONE_TYPE && null !== request.trackedPostpones && null !== task.blockedBoundary) {
              node = request.trackedPostpones;
              segment = getThrownInfo(request, task.componentStack);
              request.onPostpone(childIndex.message, segment);
              childIndex = task.blockedSegment;
              segment = createPendingSegment(
                request,
                childIndex.chunks.length,
                null,
                task.formatContext,
                childIndex.lastPushedText,
                true
              );
              childIndex.children.push(segment);
              childIndex.lastPushedText = false;
              trackPostpone(request, node, task, segment);
              task.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              task.keyPath = previousKeyPath;
              task.treeContext = previousTreeContext;
              task.componentStack = previousComponentStack;
              switchContext(previousContext);
              return;
            }
          }
        }
      }
      task.formatContext = previousFormatContext;
      task.legacyContext = previousLegacyContext;
      task.context = previousContext;
      task.keyPath = previousKeyPath;
      task.treeContext = previousTreeContext;
      switchContext(previousContext);
      throw childIndex;
    }
    function erroredReplay(request, boundary, error, errorInfo, replayNodes, resumeSlots) {
      "object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(error.message, errorInfo), errorInfo = "POSTPONE") : errorInfo = logRecoverableError(request, error, errorInfo);
      abortRemainingReplayNodes(
        request,
        boundary,
        replayNodes,
        resumeSlots,
        error,
        errorInfo
      );
    }
    function abortTaskSoft(task) {
      var boundary = task.blockedBoundary;
      task = task.blockedSegment;
      null !== task && (task.status = 3, finishedTask(this, boundary, task));
    }
    function abortRemainingReplayNodes(request$jscomp$0, boundary, nodes, slots, error, errorDigest$jscomp$0) {
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (4 === node.length)
          abortRemainingReplayNodes(
            request$jscomp$0,
            boundary,
            node[2],
            node[3],
            error,
            errorDigest$jscomp$0
          );
        else {
          node = node[5];
          var request = request$jscomp$0, errorDigest = errorDigest$jscomp$0, resumedBoundary = createSuspenseBoundary(request, /* @__PURE__ */ new Set());
          resumedBoundary.parentFlushed = true;
          resumedBoundary.rootSegmentID = node;
          resumedBoundary.status = 4;
          resumedBoundary.errorDigest = errorDigest;
          resumedBoundary.parentFlushed && request.clientRenderedBoundaries.push(resumedBoundary);
        }
      }
      nodes.length = 0;
      if (null !== slots) {
        if (null === boundary)
          throw Error(
            "We should not have any resumable nodes in the shell. This is a bug in React."
          );
        4 !== boundary.status && (boundary.status = 4, boundary.errorDigest = errorDigest$jscomp$0, boundary.parentFlushed && request$jscomp$0.clientRenderedBoundaries.push(boundary));
        if ("object" === typeof slots)
          for (var index in slots)
            delete slots[index];
      }
    }
    function abortTask(task, request, error) {
      var boundary = task.blockedBoundary, segment = task.blockedSegment;
      null !== segment && (segment.status = 3);
      if (null === boundary) {
        if (boundary = {}, 1 !== request.status && 2 !== request.status) {
          task = task.replay;
          if (null === task) {
            "object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (task = Error(
              "The render was aborted with postpone when the shell is incomplete. Reason: " + error.message
            ), logRecoverableError(request, task, boundary), fatalError(request, task)) : (logRecoverableError(request, error, boundary), fatalError(request, error));
            return;
          }
          task.pendingTasks--;
          0 === task.pendingTasks && 0 < task.nodes.length && ("object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(error.message, boundary), boundary = "POSTPONE") : boundary = logRecoverableError(request, error, boundary), abortRemainingReplayNodes(
            request,
            null,
            task.nodes,
            task.slots,
            error,
            boundary
          ));
          request.pendingRootTasks--;
          0 === request.pendingRootTasks && completeShell(request);
        }
      } else
        boundary.pendingTasks--, 4 !== boundary.status && (boundary.status = 4, task = getThrownInfo(request, task.componentStack), "object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(error.message, task), task = "POSTPONE") : task = logRecoverableError(request, error, task), boundary.errorDigest = task, untrackBoundary(request, boundary), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary)), boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
          return abortTask(fallbackTask, request, error);
        }), boundary.fallbackAbortableTasks.clear();
      request.allPendingTasks--;
      0 === request.allPendingTasks && completeAll(request);
    }
    function safelyEmitEarlyPreloads(request, shellComplete) {
      try {
        var renderState = request.renderState, onHeaders = renderState.onHeaders;
        if (onHeaders) {
          var headers = renderState.headers;
          if (headers) {
            renderState.headers = null;
            var linkHeader = headers.preconnects;
            headers.fontPreloads && (linkHeader && (linkHeader += ", "), linkHeader += headers.fontPreloads);
            headers.highImagePreloads && (linkHeader && (linkHeader += ", "), linkHeader += headers.highImagePreloads);
            if (!shellComplete) {
              var queueIter = renderState.styles.values(), queueStep = queueIter.next();
              b:
                for (; 0 < headers.remainingCapacity && !queueStep.done; queueStep = queueIter.next())
                  for (var sheetIter = queueStep.value.sheets.values(), sheetStep = sheetIter.next(); 0 < headers.remainingCapacity && !sheetStep.done; sheetStep = sheetIter.next()) {
                    var sheet = sheetStep.value, props = sheet.props, key = props.href, props$jscomp$0 = sheet.props, header = getPreloadAsHeader(props$jscomp$0.href, "style", {
                      crossOrigin: props$jscomp$0.crossOrigin,
                      integrity: props$jscomp$0.integrity,
                      nonce: props$jscomp$0.nonce,
                      type: props$jscomp$0.type,
                      fetchPriority: props$jscomp$0.fetchPriority,
                      referrerPolicy: props$jscomp$0.referrerPolicy,
                      media: props$jscomp$0.media
                    });
                    if (2 <= (headers.remainingCapacity -= header.length))
                      renderState.resets.style[key] = PRELOAD_NO_CREDS, linkHeader && (linkHeader += ", "), linkHeader += header, renderState.resets.style[key] = "string" === typeof props.crossOrigin || "string" === typeof props.integrity ? [props.crossOrigin, props.integrity] : PRELOAD_NO_CREDS;
                    else
                      break b;
                  }
            }
            linkHeader ? onHeaders({ Link: linkHeader }) : onHeaders({});
          }
        }
      } catch (error) {
        logRecoverableError(request, error, {});
      }
    }
    function completeShell(request) {
      null === request.trackedPostpones && safelyEmitEarlyPreloads(request, true);
      request.onShellError = noop;
      request = request.onShellReady;
      request();
    }
    function completeAll(request) {
      safelyEmitEarlyPreloads(
        request,
        null === request.trackedPostpones ? true : null === request.completedRootSegment || 5 !== request.completedRootSegment.status
      );
      request = request.onAllReady;
      request();
    }
    function queueCompletedSegment(boundary, segment) {
      if (0 === segment.chunks.length && 1 === segment.children.length && null === segment.children[0].boundary && -1 === segment.children[0].id) {
        var childSegment = segment.children[0];
        childSegment.id = segment.id;
        childSegment.parentFlushed = true;
        1 === childSegment.status && queueCompletedSegment(boundary, childSegment);
      } else
        boundary.completedSegments.push(segment);
    }
    function finishedTask(request, boundary, segment) {
      if (null === boundary) {
        if (null !== segment && segment.parentFlushed) {
          if (null !== request.completedRootSegment)
            throw Error(
              "There can only be one root segment. This is a bug in React."
            );
          request.completedRootSegment = segment;
        }
        request.pendingRootTasks--;
        0 === request.pendingRootTasks && completeShell(request);
      } else
        boundary.pendingTasks--, 4 !== boundary.status && (0 === boundary.pendingTasks ? (0 === boundary.status && (boundary.status = 1), null !== segment && segment.parentFlushed && 1 === segment.status && queueCompletedSegment(boundary, segment), boundary.parentFlushed && request.completedBoundaries.push(boundary), 1 === boundary.status && (boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary.fallbackAbortableTasks.clear())) : null !== segment && segment.parentFlushed && 1 === segment.status && (queueCompletedSegment(boundary, segment), 1 === boundary.completedSegments.length && boundary.parentFlushed && request.partialBoundaries.push(boundary)));
      request.allPendingTasks--;
      0 === request.allPendingTasks && completeAll(request);
    }
    function performWork(request$jscomp$1) {
      if (2 !== request$jscomp$1.status) {
        var prevContext = currentActiveSnapshot, prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = HooksDispatcher;
        var prevAsyncDispatcher = ReactSharedInternals.A;
        ReactSharedInternals.A = DefaultAsyncDispatcher;
        var prevRequest = currentRequest;
        currentRequest = request$jscomp$1;
        var prevResumableState = currentResumableState;
        currentResumableState = request$jscomp$1.resumableState;
        try {
          var pingedTasks = request$jscomp$1.pingedTasks, i;
          for (i = 0; i < pingedTasks.length; i++) {
            var task = pingedTasks[i], request = request$jscomp$1, segment = task.blockedSegment;
            if (null === segment) {
              var request$jscomp$0 = request;
              if (0 !== task.replay.pendingTasks) {
                switchContext(task.context);
                try {
                  renderNodeDestructive(
                    request$jscomp$0,
                    task,
                    task.node,
                    task.childIndex
                  );
                  if (1 === task.replay.pendingTasks && 0 < task.replay.nodes.length)
                    throw Error(
                      "Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering."
                    );
                  task.replay.pendingTasks--;
                  task.abortSet.delete(task);
                  finishedTask(request$jscomp$0, task.blockedBoundary, null);
                } catch (thrownValue) {
                  resetHooksState();
                  var x = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;
                  if ("object" === typeof x && null !== x && "function" === typeof x.then) {
                    var ping = task.ping;
                    x.then(ping, ping);
                    task.thenableState = getThenableStateAfterSuspending();
                    null !== task.componentStack && (task.componentStack = task.componentStack.parent);
                  } else {
                    task.replay.pendingTasks--;
                    task.abortSet.delete(task);
                    var errorInfo = getThrownInfo(
                      request$jscomp$0,
                      task.componentStack
                    );
                    erroredReplay(
                      request$jscomp$0,
                      task.blockedBoundary,
                      x,
                      errorInfo,
                      task.replay.nodes,
                      task.replay.slots
                    );
                    request$jscomp$0.pendingRootTasks--;
                    0 === request$jscomp$0.pendingRootTasks && completeShell(request$jscomp$0);
                    request$jscomp$0.allPendingTasks--;
                    0 === request$jscomp$0.allPendingTasks && completeAll(request$jscomp$0);
                  }
                } finally {
                }
              }
            } else
              a: {
                request$jscomp$0 = void 0;
                var segment$jscomp$0 = segment;
                if (0 === segment$jscomp$0.status) {
                  switchContext(task.context);
                  var childrenLength = segment$jscomp$0.children.length, chunkLength = segment$jscomp$0.chunks.length;
                  try {
                    renderNodeDestructive(
                      request,
                      task,
                      task.node,
                      task.childIndex
                    ), request.renderState.generateStaticMarkup || segment$jscomp$0.lastPushedText && segment$jscomp$0.textEmbedded && segment$jscomp$0.chunks.push("<!-- -->"), task.abortSet.delete(task), segment$jscomp$0.status = 1, finishedTask(request, task.blockedBoundary, segment$jscomp$0);
                  } catch (thrownValue) {
                    resetHooksState();
                    segment$jscomp$0.children.length = childrenLength;
                    segment$jscomp$0.chunks.length = chunkLength;
                    var x$jscomp$0 = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;
                    if ("object" === typeof x$jscomp$0 && null !== x$jscomp$0) {
                      if ("function" === typeof x$jscomp$0.then) {
                        var ping$jscomp$0 = task.ping;
                        x$jscomp$0.then(ping$jscomp$0, ping$jscomp$0);
                        task.thenableState = getThenableStateAfterSuspending();
                        null !== task.componentStack && (task.componentStack = task.componentStack.parent);
                        break a;
                      }
                      if (null !== request.trackedPostpones && x$jscomp$0.$$typeof === REACT_POSTPONE_TYPE) {
                        var trackedPostpones = request.trackedPostpones;
                        task.abortSet.delete(task);
                        var postponeInfo = getThrownInfo(
                          request,
                          task.componentStack
                        );
                        request.onPostpone(x$jscomp$0.message, postponeInfo);
                        trackPostpone(
                          request,
                          trackedPostpones,
                          task,
                          segment$jscomp$0
                        );
                        finishedTask(
                          request,
                          task.blockedBoundary,
                          segment$jscomp$0
                        );
                        break a;
                      }
                    }
                    var errorInfo$jscomp$0 = getThrownInfo(
                      request,
                      task.componentStack
                    );
                    task.abortSet.delete(task);
                    segment$jscomp$0.status = 4;
                    var boundary = task.blockedBoundary;
                    "object" === typeof x$jscomp$0 && null !== x$jscomp$0 && x$jscomp$0.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(x$jscomp$0.message, errorInfo$jscomp$0), request$jscomp$0 = "POSTPONE") : request$jscomp$0 = logRecoverableError(
                      request,
                      x$jscomp$0,
                      errorInfo$jscomp$0
                    );
                    null === boundary ? fatalError(request, x$jscomp$0) : (boundary.pendingTasks--, 4 !== boundary.status && (boundary.status = 4, boundary.errorDigest = request$jscomp$0, untrackBoundary(request, boundary), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary)));
                    request.allPendingTasks--;
                    0 === request.allPendingTasks && completeAll(request);
                  } finally {
                  }
                }
              }
          }
          pingedTasks.splice(0, i);
          null !== request$jscomp$1.destination && flushCompletedQueues(request$jscomp$1, request$jscomp$1.destination);
        } catch (error) {
          logRecoverableError(request$jscomp$1, error, {}), fatalError(request$jscomp$1, error);
        } finally {
          currentResumableState = prevResumableState, ReactSharedInternals.H = prevDispatcher, ReactSharedInternals.A = prevAsyncDispatcher, prevDispatcher === HooksDispatcher && switchContext(prevContext), currentRequest = prevRequest;
        }
      }
    }
    function flushSubtree(request, destination, segment, hoistableState) {
      segment.parentFlushed = true;
      switch (segment.status) {
        case 0:
          segment.id = request.nextSegmentId++;
        case 5:
          return hoistableState = segment.id, segment.lastPushedText = false, segment.textEmbedded = false, request = request.renderState, destination.push('<template id="'), destination.push(request.placeholderPrefix), request = hoistableState.toString(16), destination.push(request), destination.push('"></template>');
        case 1:
          segment.status = 2;
          var r = true, chunks = segment.chunks, chunkIdx = 0;
          segment = segment.children;
          for (var childIdx = 0; childIdx < segment.length; childIdx++) {
            for (r = segment[childIdx]; chunkIdx < r.index; chunkIdx++)
              destination.push(chunks[chunkIdx]);
            r = flushSegment(request, destination, r, hoistableState);
          }
          for (; chunkIdx < chunks.length - 1; chunkIdx++)
            destination.push(chunks[chunkIdx]);
          chunkIdx < chunks.length && (r = destination.push(chunks[chunkIdx]));
          return r;
        default:
          throw Error(
            "Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React."
          );
      }
    }
    function flushSegment(request, destination, segment, hoistableState) {
      var boundary = segment.boundary;
      if (null === boundary)
        return flushSubtree(request, destination, segment, hoistableState);
      boundary.parentFlushed = true;
      if (4 === boundary.status)
        return request.renderState.generateStaticMarkup || (boundary = boundary.errorDigest, destination.push("<!--$!-->"), destination.push("<template"), boundary && (destination.push(' data-dgst="'), boundary = escapeTextForBrowser(boundary), destination.push(boundary), destination.push('"')), destination.push("></template>")), flushSubtree(request, destination, segment, hoistableState), request = request.renderState.generateStaticMarkup ? true : destination.push("<!--/$-->"), request;
      if (1 !== boundary.status)
        return 0 === boundary.status && (boundary.rootSegmentID = request.nextSegmentId++), 0 < boundary.completedSegments.length && request.partialBoundaries.push(boundary), writeStartPendingSuspenseBoundary(
          destination,
          request.renderState,
          boundary.rootSegmentID
        ), hoistableState && (boundary = boundary.fallbackState, boundary.styles.forEach(hoistStyleQueueDependency, hoistableState), boundary.stylesheets.forEach(
          hoistStylesheetDependency,
          hoistableState
        )), flushSubtree(request, destination, segment, hoistableState), destination.push("<!--/$-->");
      if (boundary.byteSize > request.progressiveChunkSize)
        return boundary.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary), writeStartPendingSuspenseBoundary(
          destination,
          request.renderState,
          boundary.rootSegmentID
        ), flushSubtree(request, destination, segment, hoistableState), destination.push("<!--/$-->");
      hoistableState && (segment = boundary.contentState, segment.styles.forEach(hoistStyleQueueDependency, hoistableState), segment.stylesheets.forEach(hoistStylesheetDependency, hoistableState));
      request.renderState.generateStaticMarkup || destination.push("<!--$-->");
      segment = boundary.completedSegments;
      if (1 !== segment.length)
        throw Error(
          "A previously unvisited boundary must have exactly one root segment. This is a bug in React."
        );
      flushSegment(request, destination, segment[0], hoistableState);
      request = request.renderState.generateStaticMarkup ? true : destination.push("<!--/$-->");
      return request;
    }
    function flushSegmentContainer(request, destination, segment, hoistableState) {
      writeStartSegment(
        destination,
        request.renderState,
        segment.parentFormatContext,
        segment.id
      );
      flushSegment(request, destination, segment, hoistableState);
      return writeEndSegment(destination, segment.parentFormatContext);
    }
    function flushCompletedBoundary(request, destination, boundary) {
      for (var completedSegments = boundary.completedSegments, i = 0; i < completedSegments.length; i++)
        flushPartiallyCompletedSegment(
          request,
          destination,
          boundary,
          completedSegments[i]
        );
      completedSegments.length = 0;
      writeHoistablesForBoundary(
        destination,
        boundary.contentState,
        request.renderState
      );
      completedSegments = request.resumableState;
      request = request.renderState;
      i = boundary.rootSegmentID;
      boundary = boundary.contentState;
      var requiresStyleInsertion = request.stylesToHoist;
      request.stylesToHoist = false;
      var scriptFormat = 0 === completedSegments.streamingFormat;
      scriptFormat ? (destination.push(request.startInlineScript), requiresStyleInsertion ? 0 === (completedSegments.instructions & 2) ? (completedSegments.instructions |= 10, destination.push(
        '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("'
      )) : 0 === (completedSegments.instructions & 8) ? (completedSegments.instructions |= 8, destination.push(
        '$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("'
      )) : destination.push('$RR("') : 0 === (completedSegments.instructions & 2) ? (completedSegments.instructions |= 2, destination.push(
        '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RC("'
      )) : destination.push('$RC("')) : requiresStyleInsertion ? destination.push('<template data-rri="" data-bid="') : destination.push('<template data-rci="" data-bid="');
      completedSegments = i.toString(16);
      destination.push(request.boundaryPrefix);
      destination.push(completedSegments);
      scriptFormat ? destination.push('","') : destination.push('" data-sid="');
      destination.push(request.segmentPrefix);
      destination.push(completedSegments);
      requiresStyleInsertion ? scriptFormat ? (destination.push('",'), writeStyleResourceDependenciesInJS(destination, boundary)) : (destination.push('" data-sty="'), writeStyleResourceDependenciesInAttr(destination, boundary)) : scriptFormat && destination.push('"');
      completedSegments = scriptFormat ? destination.push(")</script>") : destination.push('"></template>');
      return writeBootstrap(destination, request) && completedSegments;
    }
    function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
      if (2 === segment.status)
        return true;
      var hoistableState = boundary.contentState, segmentID = segment.id;
      if (-1 === segmentID) {
        if (-1 === (segment.id = boundary.rootSegmentID))
          throw Error(
            "A root segment ID must have been assigned by now. This is a bug in React."
          );
        return flushSegmentContainer(request, destination, segment, hoistableState);
      }
      if (segmentID === boundary.rootSegmentID)
        return flushSegmentContainer(request, destination, segment, hoistableState);
      flushSegmentContainer(request, destination, segment, hoistableState);
      boundary = request.resumableState;
      request = request.renderState;
      (segment = 0 === boundary.streamingFormat) ? (destination.push(request.startInlineScript), 0 === (boundary.instructions & 1) ? (boundary.instructions |= 1, destination.push(
        '$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("'
      )) : destination.push('$RS("')) : destination.push('<template data-rsi="" data-sid="');
      destination.push(request.segmentPrefix);
      segmentID = segmentID.toString(16);
      destination.push(segmentID);
      segment ? destination.push('","') : destination.push('" data-pid="');
      destination.push(request.placeholderPrefix);
      destination.push(segmentID);
      destination = segment ? destination.push('")</script>') : destination.push('"></template>');
      return destination;
    }
    function flushCompletedQueues(request, destination) {
      try {
        if (!(0 < request.pendingRootTasks)) {
          var i, completedRootSegment = request.completedRootSegment;
          if (null !== completedRootSegment) {
            if (5 === completedRootSegment.status)
              return;
            var renderState = request.renderState;
            if ((0 !== request.allPendingTasks || null !== request.trackedPostpones) && renderState.externalRuntimeScript) {
              var _renderState$external = renderState.externalRuntimeScript, resumableState = request.resumableState, src = _renderState$external.src, chunks = _renderState$external.chunks;
              resumableState.scriptResources.hasOwnProperty(src) || (resumableState.scriptResources[src] = null, renderState.scripts.add(chunks));
            }
            var htmlChunks = renderState.htmlChunks, headChunks = renderState.headChunks, i$jscomp$0;
            if (htmlChunks) {
              for (i$jscomp$0 = 0; i$jscomp$0 < htmlChunks.length; i$jscomp$0++)
                destination.push(htmlChunks[i$jscomp$0]);
              if (headChunks)
                for (i$jscomp$0 = 0; i$jscomp$0 < headChunks.length; i$jscomp$0++)
                  destination.push(headChunks[i$jscomp$0]);
              else {
                var chunk = startChunkForTag("head");
                destination.push(chunk);
                destination.push(">");
              }
            } else if (headChunks)
              for (i$jscomp$0 = 0; i$jscomp$0 < headChunks.length; i$jscomp$0++)
                destination.push(headChunks[i$jscomp$0]);
            var charsetChunks = renderState.charsetChunks;
            for (i$jscomp$0 = 0; i$jscomp$0 < charsetChunks.length; i$jscomp$0++)
              destination.push(charsetChunks[i$jscomp$0]);
            charsetChunks.length = 0;
            renderState.preconnects.forEach(flushResource, destination);
            renderState.preconnects.clear();
            var viewportChunks = renderState.viewportChunks;
            for (i$jscomp$0 = 0; i$jscomp$0 < viewportChunks.length; i$jscomp$0++)
              destination.push(viewportChunks[i$jscomp$0]);
            viewportChunks.length = 0;
            renderState.fontPreloads.forEach(flushResource, destination);
            renderState.fontPreloads.clear();
            renderState.highImagePreloads.forEach(flushResource, destination);
            renderState.highImagePreloads.clear();
            renderState.styles.forEach(flushStylesInPreamble, destination);
            var importMapChunks = renderState.importMapChunks;
            for (i$jscomp$0 = 0; i$jscomp$0 < importMapChunks.length; i$jscomp$0++)
              destination.push(importMapChunks[i$jscomp$0]);
            importMapChunks.length = 0;
            renderState.bootstrapScripts.forEach(flushResource, destination);
            renderState.scripts.forEach(flushResource, destination);
            renderState.scripts.clear();
            renderState.bulkPreloads.forEach(flushResource, destination);
            renderState.bulkPreloads.clear();
            var hoistableChunks = renderState.hoistableChunks;
            for (i$jscomp$0 = 0; i$jscomp$0 < hoistableChunks.length; i$jscomp$0++)
              destination.push(hoistableChunks[i$jscomp$0]);
            hoistableChunks.length = 0;
            if (htmlChunks && null === headChunks) {
              var chunk$jscomp$0 = endChunkForTag("head");
              destination.push(chunk$jscomp$0);
            }
            flushSegment(request, destination, completedRootSegment, null);
            request.completedRootSegment = null;
            writeBootstrap(destination, request.renderState);
          }
          var renderState$jscomp$0 = request.renderState;
          completedRootSegment = 0;
          var viewportChunks$jscomp$0 = renderState$jscomp$0.viewportChunks;
          for (completedRootSegment = 0; completedRootSegment < viewportChunks$jscomp$0.length; completedRootSegment++)
            destination.push(viewportChunks$jscomp$0[completedRootSegment]);
          viewportChunks$jscomp$0.length = 0;
          renderState$jscomp$0.preconnects.forEach(flushResource, destination);
          renderState$jscomp$0.preconnects.clear();
          renderState$jscomp$0.fontPreloads.forEach(flushResource, destination);
          renderState$jscomp$0.fontPreloads.clear();
          renderState$jscomp$0.highImagePreloads.forEach(
            flushResource,
            destination
          );
          renderState$jscomp$0.highImagePreloads.clear();
          renderState$jscomp$0.styles.forEach(preloadLateStyles, destination);
          renderState$jscomp$0.scripts.forEach(flushResource, destination);
          renderState$jscomp$0.scripts.clear();
          renderState$jscomp$0.bulkPreloads.forEach(flushResource, destination);
          renderState$jscomp$0.bulkPreloads.clear();
          var hoistableChunks$jscomp$0 = renderState$jscomp$0.hoistableChunks;
          for (completedRootSegment = 0; completedRootSegment < hoistableChunks$jscomp$0.length; completedRootSegment++)
            destination.push(hoistableChunks$jscomp$0[completedRootSegment]);
          hoistableChunks$jscomp$0.length = 0;
          var clientRenderedBoundaries = request.clientRenderedBoundaries;
          for (i = 0; i < clientRenderedBoundaries.length; i++) {
            var boundary = clientRenderedBoundaries[i];
            renderState$jscomp$0 = destination;
            var resumableState$jscomp$0 = request.resumableState, renderState$jscomp$1 = request.renderState, id = boundary.rootSegmentID, errorDigest = boundary.errorDigest, scriptFormat = 0 === resumableState$jscomp$0.streamingFormat;
            scriptFormat ? (renderState$jscomp$0.push(renderState$jscomp$1.startInlineScript), 0 === (resumableState$jscomp$0.instructions & 4) ? (resumableState$jscomp$0.instructions |= 4, renderState$jscomp$0.push(
              '$RX=function(b,c,d,e,f){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),f&&(a.cstck=f),b._reactRetry&&b._reactRetry())};;$RX("'
            )) : renderState$jscomp$0.push('$RX("')) : renderState$jscomp$0.push('<template data-rxi="" data-bid="');
            renderState$jscomp$0.push(renderState$jscomp$1.boundaryPrefix);
            var chunk$jscomp$1 = id.toString(16);
            renderState$jscomp$0.push(chunk$jscomp$1);
            scriptFormat && renderState$jscomp$0.push('"');
            if (errorDigest)
              if (scriptFormat) {
                renderState$jscomp$0.push(",");
                var chunk$jscomp$2 = escapeJSStringsForInstructionScripts(
                  errorDigest || ""
                );
                renderState$jscomp$0.push(chunk$jscomp$2);
              } else {
                renderState$jscomp$0.push('" data-dgst="');
                var chunk$jscomp$3 = escapeTextForBrowser(errorDigest || "");
                renderState$jscomp$0.push(chunk$jscomp$3);
              }
            var JSCompiler_inline_result = scriptFormat ? renderState$jscomp$0.push(")</script>") : renderState$jscomp$0.push('"></template>');
            if (!JSCompiler_inline_result) {
              request.destination = null;
              i++;
              clientRenderedBoundaries.splice(0, i);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i);
          var completedBoundaries = request.completedBoundaries;
          for (i = 0; i < completedBoundaries.length; i++)
            if (!flushCompletedBoundary(request, destination, completedBoundaries[i])) {
              request.destination = null;
              i++;
              completedBoundaries.splice(0, i);
              return;
            }
          completedBoundaries.splice(0, i);
          var partialBoundaries = request.partialBoundaries;
          for (i = 0; i < partialBoundaries.length; i++) {
            var boundary$54 = partialBoundaries[i];
            a: {
              clientRenderedBoundaries = request;
              boundary = destination;
              var completedSegments = boundary$54.completedSegments;
              for (JSCompiler_inline_result = 0; JSCompiler_inline_result < completedSegments.length; JSCompiler_inline_result++)
                if (!flushPartiallyCompletedSegment(
                  clientRenderedBoundaries,
                  boundary,
                  boundary$54,
                  completedSegments[JSCompiler_inline_result]
                )) {
                  JSCompiler_inline_result++;
                  completedSegments.splice(0, JSCompiler_inline_result);
                  var JSCompiler_inline_result$jscomp$0 = false;
                  break a;
                }
              completedSegments.splice(0, JSCompiler_inline_result);
              JSCompiler_inline_result$jscomp$0 = writeHoistablesForBoundary(
                boundary,
                boundary$54.contentState,
                clientRenderedBoundaries.renderState
              );
            }
            if (!JSCompiler_inline_result$jscomp$0) {
              request.destination = null;
              i++;
              partialBoundaries.splice(0, i);
              return;
            }
          }
          partialBoundaries.splice(0, i);
          var largeBoundaries = request.completedBoundaries;
          for (i = 0; i < largeBoundaries.length; i++)
            if (!flushCompletedBoundary(request, destination, largeBoundaries[i])) {
              request.destination = null;
              i++;
              largeBoundaries.splice(0, i);
              return;
            }
          largeBoundaries.splice(0, i);
        }
      } finally {
        0 === request.allPendingTasks && 0 === request.pingedTasks.length && 0 === request.clientRenderedBoundaries.length && 0 === request.completedBoundaries.length && (request.flushScheduled = false, null === request.trackedPostpones && (i = request.resumableState, i.hasBody && (partialBoundaries = endChunkForTag("body"), destination.push(partialBoundaries)), i.hasHtml && (i = endChunkForTag("html"), destination.push(i))), destination.push(null), request.destination = null);
      }
    }
    function enqueueFlush(request) {
      if (false === request.flushScheduled && 0 === request.pingedTasks.length && null !== request.destination) {
        request.flushScheduled = true;
        var destination = request.destination;
        destination ? flushCompletedQueues(request, destination) : request.flushScheduled = false;
      }
    }
    function startFlowing(request, destination) {
      if (1 === request.status)
        request.status = 2, destination.destroy(request.fatalError);
      else if (2 !== request.status && null === request.destination) {
        request.destination = destination;
        try {
          flushCompletedQueues(request, destination);
        } catch (error) {
          logRecoverableError(request, error, {}), fatalError(request, error);
        }
      }
    }
    function abort(request, reason) {
      try {
        var abortableTasks = request.abortableTasks;
        if (0 < abortableTasks.size) {
          var error = void 0 === reason ? Error("The render was aborted by the server without a reason.") : reason;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, error);
          });
          abortableTasks.clear();
        }
        null !== request.destination && flushCompletedQueues(request, request.destination);
      } catch (error$56) {
        logRecoverableError(request, error$56, {}), fatalError(request, error$56);
      }
    }
    function addToReplayParent(node, parentKeyPath, trackedPostpones) {
      if (null === parentKeyPath)
        trackedPostpones.rootNodes.push(node);
      else {
        var workingMap = trackedPostpones.workingMap, parentNode = workingMap.get(parentKeyPath);
        void 0 === parentNode && (parentNode = [parentKeyPath[1], parentKeyPath[2], [], null], workingMap.set(parentKeyPath, parentNode), addToReplayParent(parentNode, parentKeyPath[0], trackedPostpones));
        parentNode[2].push(node);
      }
    }
    function onError() {
    }
    function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
      var didFatal = false, fatalError2 = null, result = "", readyToStream = false;
      options = createResumableState(
        options ? options.identifierPrefix : void 0,
        void 0
      );
      children = createRequest(
        children,
        options,
        createRenderState(options, generateStaticMarkup),
        createFormatContext(0, null, 0),
        Infinity,
        onError,
        void 0,
        function() {
          readyToStream = true;
        },
        void 0,
        void 0,
        void 0
      );
      children.flushScheduled = null !== children.destination;
      performWork(children);
      null === children.trackedPostpones && safelyEmitEarlyPreloads(children, 0 === children.pendingRootTasks);
      abort(children, abortReason);
      startFlowing(children, {
        push: function(chunk) {
          null !== chunk && (result += chunk);
          return true;
        },
        destroy: function(error) {
          didFatal = true;
          fatalError2 = error;
        }
      });
      if (didFatal && fatalError2 !== abortReason)
        throw fatalError2;
      if (!readyToStream)
        throw Error(
          "A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition."
        );
      return result;
    }
    exports2.renderToStaticMarkup = function(children, options) {
      return renderToStringImpl(
        children,
        options,
        true,
        'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server'
      );
    };
    exports2.renderToString = function(children, options) {
      return renderToStringImpl(
        children,
        options,
        false,
        'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server'
      );
    };
    exports2.version = "19.0.0-experimental-4508873393-20240430";
  }
});

// node_modules/react-dom/cjs/react-dom-server.node.production.js
var require_react_dom_server_node_production = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.node.production.js"(exports2) {
    "use strict";
    var util = require("util");
    var crypto = require("crypto");
    var async_hooks = require("async_hooks");
    var React = require_react();
    var ReactDOM = require_react_dom();
    var stream = require("stream");
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
    var REACT_PORTAL_TYPE = Symbol.for("react.portal");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
    var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
    var REACT_CONTEXT_TYPE = Symbol.for("react.context");
    var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
    var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
    var REACT_MEMO_TYPE = Symbol.for("react.memo");
    var REACT_LAZY_TYPE = Symbol.for("react.lazy");
    var REACT_SCOPE_TYPE = Symbol.for("react.scope");
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
    var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
    var REACT_POSTPONE_TYPE = Symbol.for("react.postpone");
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var ASYNC_ITERATOR = Symbol.asyncIterator;
    var isArrayImpl = Array.isArray;
    function flushBuffered(destination) {
      "function" === typeof destination.flush && destination.flush();
    }
    var currentView = null;
    var writtenBytes = 0;
    var destinationHasCapacity$1 = true;
    function writeChunk(destination, chunk) {
      if ("string" === typeof chunk) {
        if (0 !== chunk.length)
          if (2048 < 3 * chunk.length)
            0 < writtenBytes && (writeToDestination(
              destination,
              currentView.subarray(0, writtenBytes)
            ), currentView = new Uint8Array(2048), writtenBytes = 0), writeToDestination(destination, textEncoder.encode(chunk));
          else {
            var target = currentView;
            0 < writtenBytes && (target = currentView.subarray(writtenBytes));
            target = textEncoder.encodeInto(chunk, target);
            var read = target.read;
            writtenBytes += target.written;
            read < chunk.length && (writeToDestination(
              destination,
              currentView.subarray(0, writtenBytes)
            ), currentView = new Uint8Array(2048), writtenBytes = textEncoder.encodeInto(
              chunk.slice(read),
              currentView
            ).written);
            2048 === writtenBytes && (writeToDestination(destination, currentView), currentView = new Uint8Array(2048), writtenBytes = 0);
          }
      } else
        0 !== chunk.byteLength && (2048 < chunk.byteLength ? (0 < writtenBytes && (writeToDestination(
          destination,
          currentView.subarray(0, writtenBytes)
        ), currentView = new Uint8Array(2048), writtenBytes = 0), writeToDestination(destination, chunk)) : (target = currentView.length - writtenBytes, target < chunk.byteLength && (0 === target ? writeToDestination(destination, currentView) : (currentView.set(chunk.subarray(0, target), writtenBytes), writtenBytes += target, writeToDestination(destination, currentView), chunk = chunk.subarray(target)), currentView = new Uint8Array(2048), writtenBytes = 0), currentView.set(chunk, writtenBytes), writtenBytes += chunk.byteLength, 2048 === writtenBytes && (writeToDestination(destination, currentView), currentView = new Uint8Array(2048), writtenBytes = 0)));
    }
    function writeToDestination(destination, view) {
      destination = destination.write(view);
      destinationHasCapacity$1 = destinationHasCapacity$1 && destination;
    }
    function writeChunkAndReturn(destination, chunk) {
      writeChunk(destination, chunk);
      return destinationHasCapacity$1;
    }
    function completeWriting(destination) {
      currentView && 0 < writtenBytes && destination.write(currentView.subarray(0, writtenBytes));
      currentView = null;
      writtenBytes = 0;
      destinationHasCapacity$1 = true;
    }
    var textEncoder = new util.TextEncoder();
    function stringToPrecomputedChunk(content) {
      return textEncoder.encode(content);
    }
    var assign = Object.assign;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var VALID_ATTRIBUTE_NAME_REGEX = RegExp(
      "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
    );
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
        return true;
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName))
        return false;
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
        return validatedAttributeNameCache[attributeName] = true;
      illegalAttributeNameCache[attributeName] = true;
      return false;
    }
    var unitlessNumbers = new Set(
      "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
        " "
      )
    );
    var aliases = /* @__PURE__ */ new Map([
      ["acceptCharset", "accept-charset"],
      ["htmlFor", "for"],
      ["httpEquiv", "http-equiv"],
      ["crossOrigin", "crossorigin"],
      ["accentHeight", "accent-height"],
      ["alignmentBaseline", "alignment-baseline"],
      ["arabicForm", "arabic-form"],
      ["baselineShift", "baseline-shift"],
      ["capHeight", "cap-height"],
      ["clipPath", "clip-path"],
      ["clipRule", "clip-rule"],
      ["colorInterpolation", "color-interpolation"],
      ["colorInterpolationFilters", "color-interpolation-filters"],
      ["colorProfile", "color-profile"],
      ["colorRendering", "color-rendering"],
      ["dominantBaseline", "dominant-baseline"],
      ["enableBackground", "enable-background"],
      ["fillOpacity", "fill-opacity"],
      ["fillRule", "fill-rule"],
      ["floodColor", "flood-color"],
      ["floodOpacity", "flood-opacity"],
      ["fontFamily", "font-family"],
      ["fontSize", "font-size"],
      ["fontSizeAdjust", "font-size-adjust"],
      ["fontStretch", "font-stretch"],
      ["fontStyle", "font-style"],
      ["fontVariant", "font-variant"],
      ["fontWeight", "font-weight"],
      ["glyphName", "glyph-name"],
      ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
      ["glyphOrientationVertical", "glyph-orientation-vertical"],
      ["horizAdvX", "horiz-adv-x"],
      ["horizOriginX", "horiz-origin-x"],
      ["imageRendering", "image-rendering"],
      ["letterSpacing", "letter-spacing"],
      ["lightingColor", "lighting-color"],
      ["markerEnd", "marker-end"],
      ["markerMid", "marker-mid"],
      ["markerStart", "marker-start"],
      ["overlinePosition", "overline-position"],
      ["overlineThickness", "overline-thickness"],
      ["paintOrder", "paint-order"],
      ["panose-1", "panose-1"],
      ["pointerEvents", "pointer-events"],
      ["renderingIntent", "rendering-intent"],
      ["shapeRendering", "shape-rendering"],
      ["stopColor", "stop-color"],
      ["stopOpacity", "stop-opacity"],
      ["strikethroughPosition", "strikethrough-position"],
      ["strikethroughThickness", "strikethrough-thickness"],
      ["strokeDasharray", "stroke-dasharray"],
      ["strokeDashoffset", "stroke-dashoffset"],
      ["strokeLinecap", "stroke-linecap"],
      ["strokeLinejoin", "stroke-linejoin"],
      ["strokeMiterlimit", "stroke-miterlimit"],
      ["strokeOpacity", "stroke-opacity"],
      ["strokeWidth", "stroke-width"],
      ["textAnchor", "text-anchor"],
      ["textDecoration", "text-decoration"],
      ["textRendering", "text-rendering"],
      ["transformOrigin", "transform-origin"],
      ["underlinePosition", "underline-position"],
      ["underlineThickness", "underline-thickness"],
      ["unicodeBidi", "unicode-bidi"],
      ["unicodeRange", "unicode-range"],
      ["unitsPerEm", "units-per-em"],
      ["vAlphabetic", "v-alphabetic"],
      ["vHanging", "v-hanging"],
      ["vIdeographic", "v-ideographic"],
      ["vMathematical", "v-mathematical"],
      ["vectorEffect", "vector-effect"],
      ["vertAdvY", "vert-adv-y"],
      ["vertOriginX", "vert-origin-x"],
      ["vertOriginY", "vert-origin-y"],
      ["wordSpacing", "word-spacing"],
      ["writingMode", "writing-mode"],
      ["xmlnsXlink", "xmlns:xlink"],
      ["xHeight", "x-height"]
    ]);
    var matchHtmlRegExp = /["'&<>]/;
    function escapeTextForBrowser(text) {
      if ("boolean" === typeof text || "number" === typeof text || "bigint" === typeof text)
        return "" + text;
      text = "" + text;
      var match = matchHtmlRegExp.exec(text);
      if (match) {
        var html = "", index, lastIndex = 0;
        for (index = match.index; index < text.length; index++) {
          switch (text.charCodeAt(index)) {
            case 34:
              match = "&quot;";
              break;
            case 38:
              match = "&amp;";
              break;
            case 39:
              match = "&#x27;";
              break;
            case 60:
              match = "&lt;";
              break;
            case 62:
              match = "&gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index && (html += text.slice(lastIndex, index));
          lastIndex = index + 1;
          html += match;
        }
        text = lastIndex !== index ? html + text.slice(lastIndex, index) : html;
      }
      return text;
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
    function sanitizeURL(url) {
      return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
    }
    var ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    var ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
    var sharedNotPendingObject = {
      pending: false,
      data: null,
      method: null,
      action: null
    };
    var previousDispatcher = ReactDOMSharedInternals.d;
    ReactDOMSharedInternals.d = {
      f: previousDispatcher.f,
      r: previousDispatcher.r,
      D: prefetchDNS,
      C: preconnect,
      L: preload,
      m: preloadModule,
      X: preinitScript,
      S: preinitStyle,
      M: preinitModuleScript
    };
    var PRELOAD_NO_CREDS = [];
    var dataElementQuotedEnd = stringToPrecomputedChunk('"></template>');
    var startInlineScript = stringToPrecomputedChunk("<script>");
    var endInlineScript = stringToPrecomputedChunk("</script>");
    var startScriptSrc = stringToPrecomputedChunk('<script src="');
    var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
    var scriptNonce = stringToPrecomputedChunk('" nonce="');
    var scriptIntegirty = stringToPrecomputedChunk('" integrity="');
    var scriptCrossOrigin = stringToPrecomputedChunk('" crossorigin="');
    var endAsyncScript = stringToPrecomputedChunk('" async=""></script>');
    var scriptRegex = /(<\/|<)(s)(cript)/gi;
    function scriptReplacer(match, prefix2, s, suffix) {
      return "" + prefix2 + ("s" === s ? "\\u0073" : "\\u0053") + suffix;
    }
    var importMapScriptStart = stringToPrecomputedChunk(
      '<script type="importmap">'
    );
    var importMapScriptEnd = stringToPrecomputedChunk("</script>");
    function createRenderState(resumableState, nonce, externalRuntimeConfig, importMap, onHeaders, maxHeadersLength) {
      var inlineScriptWithNonce = void 0 === nonce ? startInlineScript : stringToPrecomputedChunk(
        '<script nonce="' + escapeTextForBrowser(nonce) + '">'
      ), idPrefix = resumableState.idPrefix, bootstrapChunks = [], externalRuntimeScript = null, bootstrapScriptContent = resumableState.bootstrapScriptContent, bootstrapScripts = resumableState.bootstrapScripts, bootstrapModules = resumableState.bootstrapModules;
      void 0 !== bootstrapScriptContent && bootstrapChunks.push(
        inlineScriptWithNonce,
        ("" + bootstrapScriptContent).replace(scriptRegex, scriptReplacer),
        endInlineScript
      );
      void 0 !== externalRuntimeConfig && ("string" === typeof externalRuntimeConfig ? (externalRuntimeScript = { src: externalRuntimeConfig, chunks: [] }, pushScriptImpl(externalRuntimeScript.chunks, {
        src: externalRuntimeConfig,
        async: true,
        integrity: void 0,
        nonce
      })) : (externalRuntimeScript = {
        src: externalRuntimeConfig.src,
        chunks: []
      }, pushScriptImpl(externalRuntimeScript.chunks, {
        src: externalRuntimeConfig.src,
        async: true,
        integrity: externalRuntimeConfig.integrity,
        nonce
      })));
      externalRuntimeConfig = [];
      void 0 !== importMap && (externalRuntimeConfig.push(importMapScriptStart), externalRuntimeConfig.push(
        ("" + JSON.stringify(importMap)).replace(scriptRegex, scriptReplacer)
      ), externalRuntimeConfig.push(importMapScriptEnd));
      importMap = onHeaders ? {
        preconnects: "",
        fontPreloads: "",
        highImagePreloads: "",
        remainingCapacity: "number" === typeof maxHeadersLength ? maxHeadersLength : 2e3
      } : null;
      onHeaders = {
        placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
        segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
        boundaryPrefix: stringToPrecomputedChunk(idPrefix + "B:"),
        startInlineScript: inlineScriptWithNonce,
        htmlChunks: null,
        headChunks: null,
        externalRuntimeScript,
        bootstrapChunks,
        importMapChunks: externalRuntimeConfig,
        onHeaders,
        headers: importMap,
        resets: {
          font: {},
          dns: {},
          connect: { default: {}, anonymous: {}, credentials: {} },
          image: {},
          style: {}
        },
        charsetChunks: [],
        viewportChunks: [],
        hoistableChunks: [],
        preconnects: /* @__PURE__ */ new Set(),
        fontPreloads: /* @__PURE__ */ new Set(),
        highImagePreloads: /* @__PURE__ */ new Set(),
        styles: /* @__PURE__ */ new Map(),
        bootstrapScripts: /* @__PURE__ */ new Set(),
        scripts: /* @__PURE__ */ new Set(),
        bulkPreloads: /* @__PURE__ */ new Set(),
        preloads: {
          images: /* @__PURE__ */ new Map(),
          stylesheets: /* @__PURE__ */ new Map(),
          scripts: /* @__PURE__ */ new Map(),
          moduleScripts: /* @__PURE__ */ new Map()
        },
        nonce,
        hoistableState: null,
        stylesToHoist: false
      };
      if (void 0 !== bootstrapScripts)
        for (inlineScriptWithNonce = 0; inlineScriptWithNonce < bootstrapScripts.length; inlineScriptWithNonce++)
          externalRuntimeConfig = bootstrapScripts[inlineScriptWithNonce], importMap = externalRuntimeScript = void 0, maxHeadersLength = {
            rel: "preload",
            as: "script",
            fetchPriority: "low",
            nonce
          }, "string" === typeof externalRuntimeConfig ? maxHeadersLength.href = idPrefix = externalRuntimeConfig : (maxHeadersLength.href = idPrefix = externalRuntimeConfig.src, maxHeadersLength.integrity = importMap = "string" === typeof externalRuntimeConfig.integrity ? externalRuntimeConfig.integrity : void 0, maxHeadersLength.crossOrigin = externalRuntimeScript = "string" === typeof externalRuntimeConfig || null == externalRuntimeConfig.crossOrigin ? void 0 : "use-credentials" === externalRuntimeConfig.crossOrigin ? "use-credentials" : ""), externalRuntimeConfig = resumableState, bootstrapScriptContent = idPrefix, externalRuntimeConfig.scriptResources[bootstrapScriptContent] = null, externalRuntimeConfig.moduleScriptResources[bootstrapScriptContent] = null, externalRuntimeConfig = [], pushLinkImpl(externalRuntimeConfig, maxHeadersLength), onHeaders.bootstrapScripts.add(externalRuntimeConfig), bootstrapChunks.push(startScriptSrc, escapeTextForBrowser(idPrefix)), nonce && bootstrapChunks.push(scriptNonce, escapeTextForBrowser(nonce)), "string" === typeof importMap && bootstrapChunks.push(
            scriptIntegirty,
            escapeTextForBrowser(importMap)
          ), "string" === typeof externalRuntimeScript && bootstrapChunks.push(
            scriptCrossOrigin,
            escapeTextForBrowser(externalRuntimeScript)
          ), bootstrapChunks.push(endAsyncScript);
      if (void 0 !== bootstrapModules)
        for (bootstrapScripts = 0; bootstrapScripts < bootstrapModules.length; bootstrapScripts++)
          maxHeadersLength = bootstrapModules[bootstrapScripts], externalRuntimeScript = idPrefix = void 0, importMap = {
            rel: "modulepreload",
            fetchPriority: "low",
            nonce
          }, "string" === typeof maxHeadersLength ? importMap.href = inlineScriptWithNonce = maxHeadersLength : (importMap.href = inlineScriptWithNonce = maxHeadersLength.src, importMap.integrity = externalRuntimeScript = "string" === typeof maxHeadersLength.integrity ? maxHeadersLength.integrity : void 0, importMap.crossOrigin = idPrefix = "string" === typeof maxHeadersLength || null == maxHeadersLength.crossOrigin ? void 0 : "use-credentials" === maxHeadersLength.crossOrigin ? "use-credentials" : ""), maxHeadersLength = resumableState, externalRuntimeConfig = inlineScriptWithNonce, maxHeadersLength.scriptResources[externalRuntimeConfig] = null, maxHeadersLength.moduleScriptResources[externalRuntimeConfig] = null, maxHeadersLength = [], pushLinkImpl(maxHeadersLength, importMap), onHeaders.bootstrapScripts.add(maxHeadersLength), bootstrapChunks.push(
            startModuleSrc,
            escapeTextForBrowser(inlineScriptWithNonce)
          ), nonce && bootstrapChunks.push(scriptNonce, escapeTextForBrowser(nonce)), "string" === typeof externalRuntimeScript && bootstrapChunks.push(
            scriptIntegirty,
            escapeTextForBrowser(externalRuntimeScript)
          ), "string" === typeof idPrefix && bootstrapChunks.push(
            scriptCrossOrigin,
            escapeTextForBrowser(idPrefix)
          ), bootstrapChunks.push(endAsyncScript);
      return onHeaders;
    }
    function createResumableState(identifierPrefix, externalRuntimeConfig, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
      var streamingFormat = 0;
      void 0 !== externalRuntimeConfig && (streamingFormat = 1);
      return {
        idPrefix: void 0 === identifierPrefix ? "" : identifierPrefix,
        nextFormID: 0,
        streamingFormat,
        bootstrapScriptContent,
        bootstrapScripts,
        bootstrapModules,
        instructions: 0,
        hasBody: false,
        hasHtml: false,
        unknownResources: {},
        dnsResources: {},
        connectResources: { default: {}, anonymous: {}, credentials: {} },
        imageResources: {},
        styleResources: {},
        scriptResources: {},
        moduleUnknownResources: {},
        moduleScriptResources: {}
      };
    }
    function createFormatContext(insertionMode, selectedValue, tagScope) {
      return {
        insertionMode,
        selectedValue,
        tagScope
      };
    }
    function createRootFormatContext(namespaceURI) {
      return createFormatContext(
        "http://www.w3.org/2000/svg" === namespaceURI ? 3 : "http://www.w3.org/1998/Math/MathML" === namespaceURI ? 4 : 0,
        null,
        0
      );
    }
    function getChildFormatContext(parentContext, type, props) {
      switch (type) {
        case "noscript":
          return createFormatContext(2, null, parentContext.tagScope | 1);
        case "select":
          return createFormatContext(
            2,
            null != props.value ? props.value : props.defaultValue,
            parentContext.tagScope
          );
        case "svg":
          return createFormatContext(3, null, parentContext.tagScope);
        case "picture":
          return createFormatContext(2, null, parentContext.tagScope | 2);
        case "math":
          return createFormatContext(4, null, parentContext.tagScope);
        case "foreignObject":
          return createFormatContext(2, null, parentContext.tagScope);
        case "table":
          return createFormatContext(5, null, parentContext.tagScope);
        case "thead":
        case "tbody":
        case "tfoot":
          return createFormatContext(6, null, parentContext.tagScope);
        case "colgroup":
          return createFormatContext(8, null, parentContext.tagScope);
        case "tr":
          return createFormatContext(7, null, parentContext.tagScope);
      }
      return 5 <= parentContext.insertionMode ? createFormatContext(2, null, parentContext.tagScope) : 0 === parentContext.insertionMode ? "html" === type ? createFormatContext(1, null, parentContext.tagScope) : createFormatContext(2, null, parentContext.tagScope) : 1 === parentContext.insertionMode ? createFormatContext(2, null, parentContext.tagScope) : parentContext;
    }
    var textSeparator = stringToPrecomputedChunk("<!-- -->");
    function pushTextInstance(target, text, renderState, textEmbedded) {
      if ("" === text)
        return textEmbedded;
      textEmbedded && target.push(textSeparator);
      target.push(escapeTextForBrowser(text));
      return true;
    }
    var styleNameCache = /* @__PURE__ */ new Map();
    var styleAttributeStart = stringToPrecomputedChunk(' style="');
    var styleAssign = stringToPrecomputedChunk(":");
    var styleSeparator = stringToPrecomputedChunk(";");
    function pushStyleAttribute(target, style) {
      if ("object" !== typeof style)
        throw Error(
          "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
        );
      var isFirst = true, styleName;
      for (styleName in style)
        if (hasOwnProperty.call(style, styleName)) {
          var styleValue = style[styleName];
          if (null != styleValue && "boolean" !== typeof styleValue && "" !== styleValue) {
            if (0 === styleName.indexOf("--")) {
              var nameChunk = escapeTextForBrowser(styleName);
              styleValue = escapeTextForBrowser(("" + styleValue).trim());
            } else
              nameChunk = styleNameCache.get(styleName), void 0 === nameChunk && (nameChunk = stringToPrecomputedChunk(
                escapeTextForBrowser(
                  styleName.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-")
                )
              ), styleNameCache.set(styleName, nameChunk)), styleValue = "number" === typeof styleValue ? 0 === styleValue || unitlessNumbers.has(styleName) ? "" + styleValue : styleValue + "px" : escapeTextForBrowser(("" + styleValue).trim());
            isFirst ? (isFirst = false, target.push(
              styleAttributeStart,
              nameChunk,
              styleAssign,
              styleValue
            )) : target.push(styleSeparator, nameChunk, styleAssign, styleValue);
          }
        }
      isFirst || target.push(attributeEnd);
    }
    var attributeSeparator = stringToPrecomputedChunk(" ");
    var attributeAssign = stringToPrecomputedChunk('="');
    var attributeEnd = stringToPrecomputedChunk('"');
    var attributeEmptyString = stringToPrecomputedChunk('=""');
    function pushBooleanAttribute(target, name, value) {
      value && "function" !== typeof value && "symbol" !== typeof value && target.push(attributeSeparator, name, attributeEmptyString);
    }
    function pushStringAttribute(target, name, value) {
      "function" !== typeof value && "symbol" !== typeof value && "boolean" !== typeof value && target.push(
        attributeSeparator,
        name,
        attributeAssign,
        escapeTextForBrowser(value),
        attributeEnd
      );
    }
    var actionJavaScriptURL = stringToPrecomputedChunk(
      escapeTextForBrowser(
        "javascript:throw new Error('React form unexpectedly submitted.')"
      )
    );
    var startHiddenInputChunk = stringToPrecomputedChunk('<input type="hidden"');
    function pushAdditionalFormField(value, key) {
      this.push(startHiddenInputChunk);
      if ("string" !== typeof value)
        throw Error(
          "File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action."
        );
      pushStringAttribute(this, "name", key);
      pushStringAttribute(this, "value", value);
      this.push(endOfStartTagSelfClosing);
    }
    function getCustomFormFields(resumableState, formAction) {
      if ("function" === typeof formAction.$$FORM_ACTION) {
        var id = resumableState.nextFormID++;
        resumableState = resumableState.idPrefix + id;
        try {
          return formAction.$$FORM_ACTION(resumableState);
        } catch (x) {
          if ("object" === typeof x && null !== x && "function" === typeof x.then)
            throw x;
        }
      }
      return null;
    }
    function pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name) {
      var formData = null;
      if ("function" === typeof formAction) {
        var customFields = getCustomFormFields(resumableState, formAction);
        null !== customFields ? (name = customFields.name, formAction = customFields.action || "", formEncType = customFields.encType, formMethod = customFields.method, formTarget = customFields.target, formData = customFields.data) : (target.push(
          attributeSeparator,
          "formAction",
          attributeAssign,
          actionJavaScriptURL,
          attributeEnd
        ), formTarget = formMethod = formEncType = formAction = name = null, injectFormReplayingRuntime(resumableState, renderState));
      }
      null != name && pushAttribute(target, "name", name);
      null != formAction && pushAttribute(target, "formAction", formAction);
      null != formEncType && pushAttribute(target, "formEncType", formEncType);
      null != formMethod && pushAttribute(target, "formMethod", formMethod);
      null != formTarget && pushAttribute(target, "formTarget", formTarget);
      return formData;
    }
    function pushAttribute(target, name, value) {
      switch (name) {
        case "className":
          pushStringAttribute(target, "class", value);
          break;
        case "tabIndex":
          pushStringAttribute(target, "tabindex", value);
          break;
        case "dir":
        case "role":
        case "viewBox":
        case "width":
        case "height":
          pushStringAttribute(target, name, value);
          break;
        case "style":
          pushStyleAttribute(target, value);
          break;
        case "src":
        case "href":
          if ("" === value)
            break;
        case "action":
        case "formAction":
          if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value)
            break;
          value = sanitizeURL("" + value);
          target.push(
            attributeSeparator,
            name,
            attributeAssign,
            escapeTextForBrowser(value),
            attributeEnd
          );
          break;
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "ref":
          break;
        case "autoFocus":
        case "multiple":
        case "muted":
          pushBooleanAttribute(target, name.toLowerCase(), value);
          break;
        case "xlinkHref":
          if ("function" === typeof value || "symbol" === typeof value || "boolean" === typeof value)
            break;
          value = sanitizeURL("" + value);
          target.push(
            attributeSeparator,
            "xlink:href",
            attributeAssign,
            escapeTextForBrowser(value),
            attributeEnd
          );
          break;
        case "contentEditable":
        case "spellCheck":
        case "draggable":
        case "value":
        case "autoReverse":
        case "externalResourcesRequired":
        case "focusable":
        case "preserveAlpha":
          "function" !== typeof value && "symbol" !== typeof value && target.push(
            attributeSeparator,
            name,
            attributeAssign,
            escapeTextForBrowser(value),
            attributeEnd
          );
          break;
        case "inert":
        case "allowFullScreen":
        case "async":
        case "autoPlay":
        case "controls":
        case "default":
        case "defer":
        case "disabled":
        case "disablePictureInPicture":
        case "disableRemotePlayback":
        case "formNoValidate":
        case "hidden":
        case "loop":
        case "noModule":
        case "noValidate":
        case "open":
        case "playsInline":
        case "readOnly":
        case "required":
        case "reversed":
        case "scoped":
        case "seamless":
        case "itemScope":
          value && "function" !== typeof value && "symbol" !== typeof value && target.push(attributeSeparator, name, attributeEmptyString);
          break;
        case "capture":
        case "download":
          true === value ? target.push(attributeSeparator, name, attributeEmptyString) : false !== value && "function" !== typeof value && "symbol" !== typeof value && target.push(
            attributeSeparator,
            name,
            attributeAssign,
            escapeTextForBrowser(value),
            attributeEnd
          );
          break;
        case "cols":
        case "rows":
        case "size":
        case "span":
          "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value && target.push(
            attributeSeparator,
            name,
            attributeAssign,
            escapeTextForBrowser(value),
            attributeEnd
          );
          break;
        case "rowSpan":
        case "start":
          "function" === typeof value || "symbol" === typeof value || isNaN(value) || target.push(
            attributeSeparator,
            name,
            attributeAssign,
            escapeTextForBrowser(value),
            attributeEnd
          );
          break;
        case "xlinkActuate":
          pushStringAttribute(target, "xlink:actuate", value);
          break;
        case "xlinkArcrole":
          pushStringAttribute(target, "xlink:arcrole", value);
          break;
        case "xlinkRole":
          pushStringAttribute(target, "xlink:role", value);
          break;
        case "xlinkShow":
          pushStringAttribute(target, "xlink:show", value);
          break;
        case "xlinkTitle":
          pushStringAttribute(target, "xlink:title", value);
          break;
        case "xlinkType":
          pushStringAttribute(target, "xlink:type", value);
          break;
        case "xmlBase":
          pushStringAttribute(target, "xml:base", value);
          break;
        case "xmlLang":
          pushStringAttribute(target, "xml:lang", value);
          break;
        case "xmlSpace":
          pushStringAttribute(target, "xml:space", value);
          break;
        default:
          if (!(2 < name.length) || "o" !== name[0] && "O" !== name[0] || "n" !== name[1] && "N" !== name[1]) {
            if (name = aliases.get(name) || name, isAttributeNameSafe(name)) {
              switch (typeof value) {
                case "function":
                case "symbol":
                  return;
                case "boolean":
                  var prefix$8 = name.toLowerCase().slice(0, 5);
                  if ("data-" !== prefix$8 && "aria-" !== prefix$8)
                    return;
              }
              target.push(
                attributeSeparator,
                name,
                attributeAssign,
                escapeTextForBrowser(value),
                attributeEnd
              );
            }
          }
      }
    }
    var endOfStartTag = stringToPrecomputedChunk(">");
    var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
    function pushInnerHTML(target, innerHTML, children) {
      if (null != innerHTML) {
        if (null != children)
          throw Error(
            "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
          );
        if ("object" !== typeof innerHTML || !("__html" in innerHTML))
          throw Error(
            "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
          );
        innerHTML = innerHTML.__html;
        null !== innerHTML && void 0 !== innerHTML && target.push("" + innerHTML);
      }
    }
    function flattenOptionChildren(children) {
      var content = "";
      React.Children.forEach(children, function(child) {
        null != child && (content += child);
      });
      return content;
    }
    var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
    var formReplayingRuntimeScript = stringToPrecomputedChunk(
      `addEventListener("submit",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute("formAction");null!=f&&(e=f,b=null)}"javascript:throw new Error('React form unexpectedly submitted.')"===e&&(a.preventDefault(),b?(a=document.createElement("input"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.ownerDocument||c,(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,d,b))}});`
    );
    function injectFormReplayingRuntime(resumableState, renderState) {
      0 !== (resumableState.instructions & 16) || renderState.externalRuntimeScript || (resumableState.instructions |= 16, renderState.bootstrapChunks.unshift(
        renderState.startInlineScript,
        formReplayingRuntimeScript,
        endInlineScript
      ));
    }
    var formStateMarkerIsMatching = stringToPrecomputedChunk("<!--F!-->");
    var formStateMarkerIsNotMatching = stringToPrecomputedChunk("<!--F-->");
    function pushLinkImpl(target, props) {
      target.push(startChunkForTag("link"));
      for (var propKey in props)
        if (hasOwnProperty.call(props, propKey)) {
          var propValue = props[propKey];
          if (null != propValue)
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(
                  "link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                );
              default:
                pushAttribute(target, propKey, propValue);
            }
        }
      target.push(endOfStartTagSelfClosing);
      return null;
    }
    var styleRegex = /(<\/|<)(s)(tyle)/gi;
    function styleReplacer(match, prefix2, s, suffix) {
      return "" + prefix2 + ("s" === s ? "\\73 " : "\\53 ") + suffix;
    }
    function pushSelfClosing(target, props, tag) {
      target.push(startChunkForTag(tag));
      for (var propKey in props)
        if (hasOwnProperty.call(props, propKey)) {
          var propValue = props[propKey];
          if (null != propValue)
            switch (propKey) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(
                  tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                );
              default:
                pushAttribute(target, propKey, propValue);
            }
        }
      target.push(endOfStartTagSelfClosing);
      return null;
    }
    function pushTitleImpl(target, props) {
      target.push(startChunkForTag("title"));
      var children = null, innerHTML = null, propKey;
      for (propKey in props)
        if (hasOwnProperty.call(props, propKey)) {
          var propValue = props[propKey];
          if (null != propValue)
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, propKey, propValue);
            }
        }
      target.push(endOfStartTag);
      props = Array.isArray(children) ? 2 > children.length ? children[0] : null : children;
      "function" !== typeof props && "symbol" !== typeof props && null !== props && void 0 !== props && target.push(escapeTextForBrowser("" + props));
      pushInnerHTML(target, innerHTML, children);
      target.push(endChunkForTag("title"));
      return null;
    }
    function pushScriptImpl(target, props) {
      target.push(startChunkForTag("script"));
      var children = null, innerHTML = null, propKey;
      for (propKey in props)
        if (hasOwnProperty.call(props, propKey)) {
          var propValue = props[propKey];
          if (null != propValue)
            switch (propKey) {
              case "children":
                children = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, propKey, propValue);
            }
        }
      target.push(endOfStartTag);
      pushInnerHTML(target, innerHTML, children);
      "string" === typeof children && target.push(("" + children).replace(scriptRegex, scriptReplacer));
      target.push(endChunkForTag("script"));
      return null;
    }
    function pushStartGenericElement(target, props, tag) {
      target.push(startChunkForTag(tag));
      var innerHTML = tag = null, propKey;
      for (propKey in props)
        if (hasOwnProperty.call(props, propKey)) {
          var propValue = props[propKey];
          if (null != propValue)
            switch (propKey) {
              case "children":
                tag = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, propKey, propValue);
            }
        }
      target.push(endOfStartTag);
      pushInnerHTML(target, innerHTML, tag);
      return "string" === typeof tag ? (target.push(escapeTextForBrowser(tag)), null) : tag;
    }
    var leadingNewline = stringToPrecomputedChunk("\n");
    var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
    var validatedTagCache = /* @__PURE__ */ new Map();
    function startChunkForTag(tag) {
      var tagStartChunk = validatedTagCache.get(tag);
      if (void 0 === tagStartChunk) {
        if (!VALID_TAG_REGEX.test(tag))
          throw Error("Invalid tag: " + tag);
        tagStartChunk = stringToPrecomputedChunk("<" + tag);
        validatedTagCache.set(tag, tagStartChunk);
      }
      return tagStartChunk;
    }
    var doctypeChunk = stringToPrecomputedChunk("<!DOCTYPE html>");
    function pushStartInstance(target$jscomp$0, type, props, resumableState, renderState, hoistableState, formatContext, textEmbedded, isFallback) {
      switch (type) {
        case "div":
        case "span":
        case "svg":
        case "path":
          break;
        case "a":
          target$jscomp$0.push(startChunkForTag("a"));
          var children = null, innerHTML = null, propKey;
          for (propKey in props)
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (null != propValue)
                switch (propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "href":
                    "" === propValue ? pushStringAttribute(target$jscomp$0, "href", "") : pushAttribute(target$jscomp$0, propKey, propValue);
                    break;
                  default:
                    pushAttribute(target$jscomp$0, propKey, propValue);
                }
            }
          target$jscomp$0.push(endOfStartTag);
          pushInnerHTML(target$jscomp$0, innerHTML, children);
          if ("string" === typeof children) {
            target$jscomp$0.push(escapeTextForBrowser(children));
            var JSCompiler_inline_result = null;
          } else
            JSCompiler_inline_result = children;
          return JSCompiler_inline_result;
        case "g":
        case "p":
        case "li":
          break;
        case "select":
          target$jscomp$0.push(startChunkForTag("select"));
          var children$jscomp$0 = null, innerHTML$jscomp$0 = null, propKey$jscomp$0;
          for (propKey$jscomp$0 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$0)) {
              var propValue$jscomp$0 = props[propKey$jscomp$0];
              if (null != propValue$jscomp$0)
                switch (propKey$jscomp$0) {
                  case "children":
                    children$jscomp$0 = propValue$jscomp$0;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML$jscomp$0 = propValue$jscomp$0;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$0,
                      propValue$jscomp$0
                    );
                }
            }
          target$jscomp$0.push(endOfStartTag);
          pushInnerHTML(target$jscomp$0, innerHTML$jscomp$0, children$jscomp$0);
          return children$jscomp$0;
        case "option":
          var selectedValue = formatContext.selectedValue;
          target$jscomp$0.push(startChunkForTag("option"));
          var children$jscomp$1 = null, value = null, selected = null, innerHTML$jscomp$1 = null, propKey$jscomp$1;
          for (propKey$jscomp$1 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$1)) {
              var propValue$jscomp$1 = props[propKey$jscomp$1];
              if (null != propValue$jscomp$1)
                switch (propKey$jscomp$1) {
                  case "children":
                    children$jscomp$1 = propValue$jscomp$1;
                    break;
                  case "selected":
                    selected = propValue$jscomp$1;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML$jscomp$1 = propValue$jscomp$1;
                    break;
                  case "value":
                    value = propValue$jscomp$1;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$1,
                      propValue$jscomp$1
                    );
                }
            }
          if (null != selectedValue) {
            var stringValue = null !== value ? "" + value : flattenOptionChildren(children$jscomp$1);
            if (isArrayImpl(selectedValue))
              for (var i = 0; i < selectedValue.length; i++) {
                if ("" + selectedValue[i] === stringValue) {
                  target$jscomp$0.push(selectedMarkerAttribute);
                  break;
                }
              }
            else
              "" + selectedValue === stringValue && target$jscomp$0.push(selectedMarkerAttribute);
          } else
            selected && target$jscomp$0.push(selectedMarkerAttribute);
          target$jscomp$0.push(endOfStartTag);
          pushInnerHTML(target$jscomp$0, innerHTML$jscomp$1, children$jscomp$1);
          return children$jscomp$1;
        case "textarea":
          target$jscomp$0.push(startChunkForTag("textarea"));
          var value$jscomp$0 = null, defaultValue = null, children$jscomp$2 = null, propKey$jscomp$2;
          for (propKey$jscomp$2 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$2)) {
              var propValue$jscomp$2 = props[propKey$jscomp$2];
              if (null != propValue$jscomp$2)
                switch (propKey$jscomp$2) {
                  case "children":
                    children$jscomp$2 = propValue$jscomp$2;
                    break;
                  case "value":
                    value$jscomp$0 = propValue$jscomp$2;
                    break;
                  case "defaultValue":
                    defaultValue = propValue$jscomp$2;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "`dangerouslySetInnerHTML` does not make sense on <textarea>."
                    );
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$2,
                      propValue$jscomp$2
                    );
                }
            }
          null === value$jscomp$0 && null !== defaultValue && (value$jscomp$0 = defaultValue);
          target$jscomp$0.push(endOfStartTag);
          if (null != children$jscomp$2) {
            if (null != value$jscomp$0)
              throw Error(
                "If you supply `defaultValue` on a <textarea>, do not pass children."
              );
            if (isArrayImpl(children$jscomp$2)) {
              if (1 < children$jscomp$2.length)
                throw Error("<textarea> can only have at most one child.");
              value$jscomp$0 = "" + children$jscomp$2[0];
            }
            value$jscomp$0 = "" + children$jscomp$2;
          }
          "string" === typeof value$jscomp$0 && "\n" === value$jscomp$0[0] && target$jscomp$0.push(leadingNewline);
          null !== value$jscomp$0 && target$jscomp$0.push(escapeTextForBrowser("" + value$jscomp$0));
          return null;
        case "input":
          target$jscomp$0.push(startChunkForTag("input"));
          var name = null, formAction = null, formEncType = null, formMethod = null, formTarget = null, value$jscomp$1 = null, defaultValue$jscomp$0 = null, checked = null, defaultChecked = null, propKey$jscomp$3;
          for (propKey$jscomp$3 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$3)) {
              var propValue$jscomp$3 = props[propKey$jscomp$3];
              if (null != propValue$jscomp$3)
                switch (propKey$jscomp$3) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  case "name":
                    name = propValue$jscomp$3;
                    break;
                  case "formAction":
                    formAction = propValue$jscomp$3;
                    break;
                  case "formEncType":
                    formEncType = propValue$jscomp$3;
                    break;
                  case "formMethod":
                    formMethod = propValue$jscomp$3;
                    break;
                  case "formTarget":
                    formTarget = propValue$jscomp$3;
                    break;
                  case "defaultChecked":
                    defaultChecked = propValue$jscomp$3;
                    break;
                  case "defaultValue":
                    defaultValue$jscomp$0 = propValue$jscomp$3;
                    break;
                  case "checked":
                    checked = propValue$jscomp$3;
                    break;
                  case "value":
                    value$jscomp$1 = propValue$jscomp$3;
                    break;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$3,
                      propValue$jscomp$3
                    );
                }
            }
          var formData = pushFormActionAttribute(
            target$jscomp$0,
            resumableState,
            renderState,
            formAction,
            formEncType,
            formMethod,
            formTarget,
            name
          );
          null !== checked ? pushBooleanAttribute(target$jscomp$0, "checked", checked) : null !== defaultChecked && pushBooleanAttribute(target$jscomp$0, "checked", defaultChecked);
          null !== value$jscomp$1 ? pushAttribute(target$jscomp$0, "value", value$jscomp$1) : null !== defaultValue$jscomp$0 && pushAttribute(target$jscomp$0, "value", defaultValue$jscomp$0);
          target$jscomp$0.push(endOfStartTagSelfClosing);
          null != formData && formData.forEach(pushAdditionalFormField, target$jscomp$0);
          return null;
        case "button":
          target$jscomp$0.push(startChunkForTag("button"));
          var children$jscomp$3 = null, innerHTML$jscomp$2 = null, name$jscomp$0 = null, formAction$jscomp$0 = null, formEncType$jscomp$0 = null, formMethod$jscomp$0 = null, formTarget$jscomp$0 = null, propKey$jscomp$4;
          for (propKey$jscomp$4 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$4)) {
              var propValue$jscomp$4 = props[propKey$jscomp$4];
              if (null != propValue$jscomp$4)
                switch (propKey$jscomp$4) {
                  case "children":
                    children$jscomp$3 = propValue$jscomp$4;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML$jscomp$2 = propValue$jscomp$4;
                    break;
                  case "name":
                    name$jscomp$0 = propValue$jscomp$4;
                    break;
                  case "formAction":
                    formAction$jscomp$0 = propValue$jscomp$4;
                    break;
                  case "formEncType":
                    formEncType$jscomp$0 = propValue$jscomp$4;
                    break;
                  case "formMethod":
                    formMethod$jscomp$0 = propValue$jscomp$4;
                    break;
                  case "formTarget":
                    formTarget$jscomp$0 = propValue$jscomp$4;
                    break;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$4,
                      propValue$jscomp$4
                    );
                }
            }
          var formData$jscomp$0 = pushFormActionAttribute(
            target$jscomp$0,
            resumableState,
            renderState,
            formAction$jscomp$0,
            formEncType$jscomp$0,
            formMethod$jscomp$0,
            formTarget$jscomp$0,
            name$jscomp$0
          );
          target$jscomp$0.push(endOfStartTag);
          null != formData$jscomp$0 && formData$jscomp$0.forEach(pushAdditionalFormField, target$jscomp$0);
          pushInnerHTML(target$jscomp$0, innerHTML$jscomp$2, children$jscomp$3);
          if ("string" === typeof children$jscomp$3) {
            target$jscomp$0.push(escapeTextForBrowser(children$jscomp$3));
            var JSCompiler_inline_result$jscomp$0 = null;
          } else
            JSCompiler_inline_result$jscomp$0 = children$jscomp$3;
          return JSCompiler_inline_result$jscomp$0;
        case "form":
          target$jscomp$0.push(startChunkForTag("form"));
          var children$jscomp$4 = null, innerHTML$jscomp$3 = null, formAction$jscomp$1 = null, formEncType$jscomp$1 = null, formMethod$jscomp$1 = null, formTarget$jscomp$1 = null, propKey$jscomp$5;
          for (propKey$jscomp$5 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$5)) {
              var propValue$jscomp$5 = props[propKey$jscomp$5];
              if (null != propValue$jscomp$5)
                switch (propKey$jscomp$5) {
                  case "children":
                    children$jscomp$4 = propValue$jscomp$5;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML$jscomp$3 = propValue$jscomp$5;
                    break;
                  case "action":
                    formAction$jscomp$1 = propValue$jscomp$5;
                    break;
                  case "encType":
                    formEncType$jscomp$1 = propValue$jscomp$5;
                    break;
                  case "method":
                    formMethod$jscomp$1 = propValue$jscomp$5;
                    break;
                  case "target":
                    formTarget$jscomp$1 = propValue$jscomp$5;
                    break;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$5,
                      propValue$jscomp$5
                    );
                }
            }
          var formData$jscomp$1 = null, formActionName = null;
          if ("function" === typeof formAction$jscomp$1) {
            var customFields = getCustomFormFields(
              resumableState,
              formAction$jscomp$1
            );
            null !== customFields ? (formAction$jscomp$1 = customFields.action || "", formEncType$jscomp$1 = customFields.encType, formMethod$jscomp$1 = customFields.method, formTarget$jscomp$1 = customFields.target, formData$jscomp$1 = customFields.data, formActionName = customFields.name) : (target$jscomp$0.push(
              attributeSeparator,
              "action",
              attributeAssign,
              actionJavaScriptURL,
              attributeEnd
            ), formTarget$jscomp$1 = formMethod$jscomp$1 = formEncType$jscomp$1 = formAction$jscomp$1 = null, injectFormReplayingRuntime(resumableState, renderState));
          }
          null != formAction$jscomp$1 && pushAttribute(target$jscomp$0, "action", formAction$jscomp$1);
          null != formEncType$jscomp$1 && pushAttribute(target$jscomp$0, "encType", formEncType$jscomp$1);
          null != formMethod$jscomp$1 && pushAttribute(target$jscomp$0, "method", formMethod$jscomp$1);
          null != formTarget$jscomp$1 && pushAttribute(target$jscomp$0, "target", formTarget$jscomp$1);
          target$jscomp$0.push(endOfStartTag);
          null !== formActionName && (target$jscomp$0.push(startHiddenInputChunk), pushStringAttribute(target$jscomp$0, "name", formActionName), target$jscomp$0.push(endOfStartTagSelfClosing), null != formData$jscomp$1 && formData$jscomp$1.forEach(pushAdditionalFormField, target$jscomp$0));
          pushInnerHTML(target$jscomp$0, innerHTML$jscomp$3, children$jscomp$4);
          if ("string" === typeof children$jscomp$4) {
            target$jscomp$0.push(escapeTextForBrowser(children$jscomp$4));
            var JSCompiler_inline_result$jscomp$1 = null;
          } else
            JSCompiler_inline_result$jscomp$1 = children$jscomp$4;
          return JSCompiler_inline_result$jscomp$1;
        case "menuitem":
          target$jscomp$0.push(startChunkForTag("menuitem"));
          for (var propKey$jscomp$6 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$6)) {
              var propValue$jscomp$6 = props[propKey$jscomp$6];
              if (null != propValue$jscomp$6)
                switch (propKey$jscomp$6) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "menuitems cannot have `children` nor `dangerouslySetInnerHTML`."
                    );
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$6,
                      propValue$jscomp$6
                    );
                }
            }
          target$jscomp$0.push(endOfStartTag);
          return null;
        case "title":
          if (3 === formatContext.insertionMode || formatContext.tagScope & 1 || null != props.itemProp)
            var JSCompiler_inline_result$jscomp$2 = pushTitleImpl(
              target$jscomp$0,
              props
            );
          else
            isFallback ? JSCompiler_inline_result$jscomp$2 = null : (pushTitleImpl(renderState.hoistableChunks, props), JSCompiler_inline_result$jscomp$2 = void 0);
          return JSCompiler_inline_result$jscomp$2;
        case "link":
          var rel = props.rel, href = props.href, precedence = props.precedence;
          if (3 === formatContext.insertionMode || formatContext.tagScope & 1 || null != props.itemProp || "string" !== typeof rel || "string" !== typeof href || "" === href) {
            pushLinkImpl(target$jscomp$0, props);
            var JSCompiler_inline_result$jscomp$3 = null;
          } else if ("stylesheet" === props.rel)
            if ("string" !== typeof precedence || null != props.disabled || props.onLoad || props.onError)
              JSCompiler_inline_result$jscomp$3 = pushLinkImpl(
                target$jscomp$0,
                props
              );
            else {
              var styleQueue = renderState.styles.get(precedence), resourceState = resumableState.styleResources.hasOwnProperty(href) ? resumableState.styleResources[href] : void 0;
              if (null !== resourceState) {
                resumableState.styleResources[href] = null;
                styleQueue || (styleQueue = {
                  precedence: escapeTextForBrowser(precedence),
                  rules: [],
                  hrefs: [],
                  sheets: /* @__PURE__ */ new Map()
                }, renderState.styles.set(precedence, styleQueue));
                var resource = {
                  state: 0,
                  props: assign({}, props, {
                    "data-precedence": props.precedence,
                    precedence: null
                  })
                };
                if (resourceState) {
                  2 === resourceState.length && adoptPreloadCredentials(resource.props, resourceState);
                  var preloadResource = renderState.preloads.stylesheets.get(href);
                  preloadResource && 0 < preloadResource.length ? preloadResource.length = 0 : resource.state = 1;
                }
                styleQueue.sheets.set(href, resource);
                hoistableState && hoistableState.stylesheets.add(resource);
              } else if (styleQueue) {
                var resource$9 = styleQueue.sheets.get(href);
                resource$9 && hoistableState && hoistableState.stylesheets.add(resource$9);
              }
              textEmbedded && target$jscomp$0.push(textSeparator);
              JSCompiler_inline_result$jscomp$3 = null;
            }
          else
            props.onLoad || props.onError ? JSCompiler_inline_result$jscomp$3 = pushLinkImpl(
              target$jscomp$0,
              props
            ) : (textEmbedded && target$jscomp$0.push(textSeparator), JSCompiler_inline_result$jscomp$3 = isFallback ? null : pushLinkImpl(renderState.hoistableChunks, props));
          return JSCompiler_inline_result$jscomp$3;
        case "script":
          var asyncProp = props.async;
          if ("string" !== typeof props.src || !props.src || !asyncProp || "function" === typeof asyncProp || "symbol" === typeof asyncProp || props.onLoad || props.onError || 3 === formatContext.insertionMode || formatContext.tagScope & 1 || null != props.itemProp)
            var JSCompiler_inline_result$jscomp$4 = pushScriptImpl(
              target$jscomp$0,
              props
            );
          else {
            var key = props.src;
            if ("module" === props.type) {
              var resources = resumableState.moduleScriptResources;
              var preloads = renderState.preloads.moduleScripts;
            } else
              resources = resumableState.scriptResources, preloads = renderState.preloads.scripts;
            var resourceState$jscomp$0 = resources.hasOwnProperty(key) ? resources[key] : void 0;
            if (null !== resourceState$jscomp$0) {
              resources[key] = null;
              var scriptProps = props;
              if (resourceState$jscomp$0) {
                2 === resourceState$jscomp$0.length && (scriptProps = assign({}, props), adoptPreloadCredentials(scriptProps, resourceState$jscomp$0));
                var preloadResource$jscomp$0 = preloads.get(key);
                preloadResource$jscomp$0 && (preloadResource$jscomp$0.length = 0);
              }
              var resource$jscomp$0 = [];
              renderState.scripts.add(resource$jscomp$0);
              pushScriptImpl(resource$jscomp$0, scriptProps);
            }
            textEmbedded && target$jscomp$0.push(textSeparator);
            JSCompiler_inline_result$jscomp$4 = null;
          }
          return JSCompiler_inline_result$jscomp$4;
        case "style":
          var precedence$jscomp$0 = props.precedence, href$jscomp$0 = props.href;
          if (3 === formatContext.insertionMode || formatContext.tagScope & 1 || null != props.itemProp || "string" !== typeof precedence$jscomp$0 || "string" !== typeof href$jscomp$0 || "" === href$jscomp$0) {
            target$jscomp$0.push(startChunkForTag("style"));
            var children$jscomp$5 = null, innerHTML$jscomp$4 = null, propKey$jscomp$7;
            for (propKey$jscomp$7 in props)
              if (hasOwnProperty.call(props, propKey$jscomp$7)) {
                var propValue$jscomp$7 = props[propKey$jscomp$7];
                if (null != propValue$jscomp$7)
                  switch (propKey$jscomp$7) {
                    case "children":
                      children$jscomp$5 = propValue$jscomp$7;
                      break;
                    case "dangerouslySetInnerHTML":
                      innerHTML$jscomp$4 = propValue$jscomp$7;
                      break;
                    default:
                      pushAttribute(
                        target$jscomp$0,
                        propKey$jscomp$7,
                        propValue$jscomp$7
                      );
                  }
              }
            target$jscomp$0.push(endOfStartTag);
            var child = Array.isArray(children$jscomp$5) ? 2 > children$jscomp$5.length ? children$jscomp$5[0] : null : children$jscomp$5;
            "function" !== typeof child && "symbol" !== typeof child && null !== child && void 0 !== child && target$jscomp$0.push(("" + child).replace(styleRegex, styleReplacer));
            pushInnerHTML(target$jscomp$0, innerHTML$jscomp$4, children$jscomp$5);
            target$jscomp$0.push(endChunkForTag("style"));
            var JSCompiler_inline_result$jscomp$5 = null;
          } else {
            var styleQueue$jscomp$0 = renderState.styles.get(precedence$jscomp$0);
            if (null !== (resumableState.styleResources.hasOwnProperty(href$jscomp$0) ? resumableState.styleResources[href$jscomp$0] : void 0)) {
              resumableState.styleResources[href$jscomp$0] = null;
              styleQueue$jscomp$0 ? styleQueue$jscomp$0.hrefs.push(
                escapeTextForBrowser(href$jscomp$0)
              ) : (styleQueue$jscomp$0 = {
                precedence: escapeTextForBrowser(precedence$jscomp$0),
                rules: [],
                hrefs: [escapeTextForBrowser(href$jscomp$0)],
                sheets: /* @__PURE__ */ new Map()
              }, renderState.styles.set(precedence$jscomp$0, styleQueue$jscomp$0));
              var target = styleQueue$jscomp$0.rules, children$jscomp$6 = null, innerHTML$jscomp$5 = null, propKey$jscomp$8;
              for (propKey$jscomp$8 in props)
                if (hasOwnProperty.call(props, propKey$jscomp$8)) {
                  var propValue$jscomp$8 = props[propKey$jscomp$8];
                  if (null != propValue$jscomp$8)
                    switch (propKey$jscomp$8) {
                      case "children":
                        children$jscomp$6 = propValue$jscomp$8;
                        break;
                      case "dangerouslySetInnerHTML":
                        innerHTML$jscomp$5 = propValue$jscomp$8;
                    }
                }
              var child$jscomp$0 = Array.isArray(children$jscomp$6) ? 2 > children$jscomp$6.length ? children$jscomp$6[0] : null : children$jscomp$6;
              "function" !== typeof child$jscomp$0 && "symbol" !== typeof child$jscomp$0 && null !== child$jscomp$0 && void 0 !== child$jscomp$0 && target.push(
                ("" + child$jscomp$0).replace(styleRegex, styleReplacer)
              );
              pushInnerHTML(target, innerHTML$jscomp$5, children$jscomp$6);
            }
            styleQueue$jscomp$0 && hoistableState && hoistableState.styles.add(styleQueue$jscomp$0);
            textEmbedded && target$jscomp$0.push(textSeparator);
            JSCompiler_inline_result$jscomp$5 = void 0;
          }
          return JSCompiler_inline_result$jscomp$5;
        case "meta":
          if (3 === formatContext.insertionMode || formatContext.tagScope & 1 || null != props.itemProp)
            var JSCompiler_inline_result$jscomp$6 = pushSelfClosing(
              target$jscomp$0,
              props,
              "meta"
            );
          else
            textEmbedded && target$jscomp$0.push(textSeparator), JSCompiler_inline_result$jscomp$6 = isFallback ? null : "string" === typeof props.charSet ? pushSelfClosing(renderState.charsetChunks, props, "meta") : "viewport" === props.name ? pushSelfClosing(renderState.viewportChunks, props, "meta") : pushSelfClosing(renderState.hoistableChunks, props, "meta");
          return JSCompiler_inline_result$jscomp$6;
        case "listing":
        case "pre":
          target$jscomp$0.push(startChunkForTag(type));
          var children$jscomp$7 = null, innerHTML$jscomp$6 = null, propKey$jscomp$9;
          for (propKey$jscomp$9 in props)
            if (hasOwnProperty.call(props, propKey$jscomp$9)) {
              var propValue$jscomp$9 = props[propKey$jscomp$9];
              if (null != propValue$jscomp$9)
                switch (propKey$jscomp$9) {
                  case "children":
                    children$jscomp$7 = propValue$jscomp$9;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML$jscomp$6 = propValue$jscomp$9;
                    break;
                  default:
                    pushAttribute(
                      target$jscomp$0,
                      propKey$jscomp$9,
                      propValue$jscomp$9
                    );
                }
            }
          target$jscomp$0.push(endOfStartTag);
          if (null != innerHTML$jscomp$6) {
            if (null != children$jscomp$7)
              throw Error(
                "Can only set one of `children` or `props.dangerouslySetInnerHTML`."
              );
            if ("object" !== typeof innerHTML$jscomp$6 || !("__html" in innerHTML$jscomp$6))
              throw Error(
                "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information."
              );
            var html = innerHTML$jscomp$6.__html;
            null !== html && void 0 !== html && ("string" === typeof html && 0 < html.length && "\n" === html[0] ? target$jscomp$0.push(leadingNewline, html) : target$jscomp$0.push("" + html));
          }
          "string" === typeof children$jscomp$7 && "\n" === children$jscomp$7[0] && target$jscomp$0.push(leadingNewline);
          return children$jscomp$7;
        case "img":
          var src = props.src, srcSet = props.srcSet;
          if (!("lazy" === props.loading || !src && !srcSet || "string" !== typeof src && null != src || "string" !== typeof srcSet && null != srcSet) && "low" !== props.fetchPriority && false === !!(formatContext.tagScope & 3) && ("string" !== typeof src || ":" !== src[4] || "d" !== src[0] && "D" !== src[0] || "a" !== src[1] && "A" !== src[1] || "t" !== src[2] && "T" !== src[2] || "a" !== src[3] && "A" !== src[3]) && ("string" !== typeof srcSet || ":" !== srcSet[4] || "d" !== srcSet[0] && "D" !== srcSet[0] || "a" !== srcSet[1] && "A" !== srcSet[1] || "t" !== srcSet[2] && "T" !== srcSet[2] || "a" !== srcSet[3] && "A" !== srcSet[3])) {
            var sizes = "string" === typeof props.sizes ? props.sizes : void 0, key$jscomp$0 = srcSet ? srcSet + "\n" + (sizes || "") : src, promotablePreloads = renderState.preloads.images, resource$jscomp$1 = promotablePreloads.get(key$jscomp$0);
            if (resource$jscomp$1) {
              if ("high" === props.fetchPriority || 10 > renderState.highImagePreloads.size)
                promotablePreloads.delete(key$jscomp$0), renderState.highImagePreloads.add(resource$jscomp$1);
            } else if (!resumableState.imageResources.hasOwnProperty(key$jscomp$0)) {
              resumableState.imageResources[key$jscomp$0] = PRELOAD_NO_CREDS;
              var input = props.crossOrigin;
              var JSCompiler_inline_result$jscomp$7 = "string" === typeof input ? "use-credentials" === input ? input : "" : void 0;
              var headers = renderState.headers, header;
              headers && 0 < headers.remainingCapacity && ("high" === props.fetchPriority || 500 > headers.highImagePreloads.length) && (header = getPreloadAsHeader(src, "image", {
                imageSrcSet: props.srcSet,
                imageSizes: props.sizes,
                crossOrigin: JSCompiler_inline_result$jscomp$7,
                integrity: props.integrity,
                nonce: props.nonce,
                type: props.type,
                fetchPriority: props.fetchPriority,
                referrerPolicy: props.refererPolicy
              }), 2 <= (headers.remainingCapacity -= header.length)) ? (renderState.resets.image[key$jscomp$0] = PRELOAD_NO_CREDS, headers.highImagePreloads && (headers.highImagePreloads += ", "), headers.highImagePreloads += header) : (resource$jscomp$1 = [], pushLinkImpl(resource$jscomp$1, {
                rel: "preload",
                as: "image",
                href: srcSet ? void 0 : src,
                imageSrcSet: srcSet,
                imageSizes: sizes,
                crossOrigin: JSCompiler_inline_result$jscomp$7,
                integrity: props.integrity,
                type: props.type,
                fetchPriority: props.fetchPriority,
                referrerPolicy: props.referrerPolicy
              }), "high" === props.fetchPriority || 10 > renderState.highImagePreloads.size ? renderState.highImagePreloads.add(resource$jscomp$1) : (renderState.bulkPreloads.add(resource$jscomp$1), promotablePreloads.set(key$jscomp$0, resource$jscomp$1)));
            }
          }
          return pushSelfClosing(target$jscomp$0, props, "img");
        case "base":
        case "area":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "keygen":
        case "param":
        case "source":
        case "track":
        case "wbr":
          return pushSelfClosing(target$jscomp$0, props, type);
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          break;
        case "head":
          if (2 > formatContext.insertionMode && null === renderState.headChunks) {
            renderState.headChunks = [];
            var JSCompiler_inline_result$jscomp$8 = pushStartGenericElement(
              renderState.headChunks,
              props,
              "head"
            );
          } else
            JSCompiler_inline_result$jscomp$8 = pushStartGenericElement(
              target$jscomp$0,
              props,
              "head"
            );
          return JSCompiler_inline_result$jscomp$8;
        case "html":
          if (0 === formatContext.insertionMode && null === renderState.htmlChunks) {
            renderState.htmlChunks = [doctypeChunk];
            var JSCompiler_inline_result$jscomp$9 = pushStartGenericElement(
              renderState.htmlChunks,
              props,
              "html"
            );
          } else
            JSCompiler_inline_result$jscomp$9 = pushStartGenericElement(
              target$jscomp$0,
              props,
              "html"
            );
          return JSCompiler_inline_result$jscomp$9;
        default:
          if (-1 !== type.indexOf("-")) {
            target$jscomp$0.push(startChunkForTag(type));
            var children$jscomp$8 = null, innerHTML$jscomp$7 = null, propKey$jscomp$10;
            for (propKey$jscomp$10 in props)
              if (hasOwnProperty.call(props, propKey$jscomp$10)) {
                var propValue$jscomp$10 = props[propKey$jscomp$10];
                if (null != propValue$jscomp$10) {
                  var attributeName = propKey$jscomp$10;
                  switch (propKey$jscomp$10) {
                    case "children":
                      children$jscomp$8 = propValue$jscomp$10;
                      break;
                    case "dangerouslySetInnerHTML":
                      innerHTML$jscomp$7 = propValue$jscomp$10;
                      break;
                    case "style":
                      pushStyleAttribute(target$jscomp$0, propValue$jscomp$10);
                      break;
                    case "suppressContentEditableWarning":
                    case "suppressHydrationWarning":
                    case "ref":
                      break;
                    case "className":
                      attributeName = "class";
                    default:
                      if (isAttributeNameSafe(propKey$jscomp$10) && "function" !== typeof propValue$jscomp$10 && "symbol" !== typeof propValue$jscomp$10 && false !== propValue$jscomp$10) {
                        if (true === propValue$jscomp$10)
                          propValue$jscomp$10 = "";
                        else if ("object" === typeof propValue$jscomp$10)
                          continue;
                        target$jscomp$0.push(
                          attributeSeparator,
                          attributeName,
                          attributeAssign,
                          escapeTextForBrowser(propValue$jscomp$10),
                          attributeEnd
                        );
                      }
                  }
                }
              }
            target$jscomp$0.push(endOfStartTag);
            pushInnerHTML(target$jscomp$0, innerHTML$jscomp$7, children$jscomp$8);
            return children$jscomp$8;
          }
      }
      return pushStartGenericElement(target$jscomp$0, props, type);
    }
    var endTagCache = /* @__PURE__ */ new Map();
    function endChunkForTag(tag) {
      var chunk = endTagCache.get(tag);
      void 0 === chunk && (chunk = stringToPrecomputedChunk("</" + tag + ">"), endTagCache.set(tag, chunk));
      return chunk;
    }
    function writeBootstrap(destination, renderState) {
      renderState = renderState.bootstrapChunks;
      for (var i = 0; i < renderState.length - 1; i++)
        writeChunk(destination, renderState[i]);
      return i < renderState.length ? (i = renderState[i], renderState.length = 0, writeChunkAndReturn(destination, i)) : true;
    }
    var placeholder1 = stringToPrecomputedChunk('<template id="');
    var placeholder2 = stringToPrecomputedChunk('"></template>');
    var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
    var startPendingSuspenseBoundary1 = stringToPrecomputedChunk(
      '<!--$?--><template id="'
    );
    var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
    var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
    var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
    var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
    var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
    var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
    stringToPrecomputedChunk(' data-msg="');
    stringToPrecomputedChunk(' data-stck="');
    stringToPrecomputedChunk(' data-cstck="');
    var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
    function writeStartPendingSuspenseBoundary(destination, renderState, id) {
      writeChunk(destination, startPendingSuspenseBoundary1);
      if (null === id)
        throw Error(
          "An ID must have been assigned before we can complete the boundary."
        );
      writeChunk(destination, renderState.boundaryPrefix);
      writeChunk(destination, id.toString(16));
      return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
    }
    var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
    var startSegmentHTML2 = stringToPrecomputedChunk('">');
    var endSegmentHTML = stringToPrecomputedChunk("</div>");
    var startSegmentSVG = stringToPrecomputedChunk(
      '<svg aria-hidden="true" style="display:none" id="'
    );
    var startSegmentSVG2 = stringToPrecomputedChunk('">');
    var endSegmentSVG = stringToPrecomputedChunk("</svg>");
    var startSegmentMathML = stringToPrecomputedChunk(
      '<math aria-hidden="true" style="display:none" id="'
    );
    var startSegmentMathML2 = stringToPrecomputedChunk('">');
    var endSegmentMathML = stringToPrecomputedChunk("</math>");
    var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
    var startSegmentTable2 = stringToPrecomputedChunk('">');
    var endSegmentTable = stringToPrecomputedChunk("</table>");
    var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
    var startSegmentTableBody2 = stringToPrecomputedChunk('">');
    var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
    var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
    var startSegmentTableRow2 = stringToPrecomputedChunk('">');
    var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
    var startSegmentColGroup = stringToPrecomputedChunk(
      '<table hidden><colgroup id="'
    );
    var startSegmentColGroup2 = stringToPrecomputedChunk('">');
    var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
    function writeStartSegment(destination, renderState, formatContext, id) {
      switch (formatContext.insertionMode) {
        case 0:
        case 1:
        case 2:
          return writeChunk(destination, startSegmentHTML), writeChunk(destination, renderState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentHTML2);
        case 3:
          return writeChunk(destination, startSegmentSVG), writeChunk(destination, renderState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentSVG2);
        case 4:
          return writeChunk(destination, startSegmentMathML), writeChunk(destination, renderState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentMathML2);
        case 5:
          return writeChunk(destination, startSegmentTable), writeChunk(destination, renderState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTable2);
        case 6:
          return writeChunk(destination, startSegmentTableBody), writeChunk(destination, renderState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTableBody2);
        case 7:
          return writeChunk(destination, startSegmentTableRow), writeChunk(destination, renderState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentTableRow2);
        case 8:
          return writeChunk(destination, startSegmentColGroup), writeChunk(destination, renderState.segmentPrefix), writeChunk(destination, id.toString(16)), writeChunkAndReturn(destination, startSegmentColGroup2);
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    function writeEndSegment(destination, formatContext) {
      switch (formatContext.insertionMode) {
        case 0:
        case 1:
        case 2:
          return writeChunkAndReturn(destination, endSegmentHTML);
        case 3:
          return writeChunkAndReturn(destination, endSegmentSVG);
        case 4:
          return writeChunkAndReturn(destination, endSegmentMathML);
        case 5:
          return writeChunkAndReturn(destination, endSegmentTable);
        case 6:
          return writeChunkAndReturn(destination, endSegmentTableBody);
        case 7:
          return writeChunkAndReturn(destination, endSegmentTableRow);
        case 8:
          return writeChunkAndReturn(destination, endSegmentColGroup);
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    var completeSegmentScript1Full = stringToPrecomputedChunk(
      '$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("'
    );
    var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
    var completeSegmentScript2 = stringToPrecomputedChunk('","');
    var completeSegmentScriptEnd = stringToPrecomputedChunk('")</script>');
    var completeSegmentData1 = stringToPrecomputedChunk(
      '<template data-rsi="" data-sid="'
    );
    var completeSegmentData2 = stringToPrecomputedChunk('" data-pid="');
    var completeBoundaryScript1Full = stringToPrecomputedChunk(
      '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RC("'
    );
    var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
    var completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(
      '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("'
    );
    var completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(
      '$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};$RR("'
    );
    var completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR("');
    var completeBoundaryScript2 = stringToPrecomputedChunk('","');
    var completeBoundaryScript3a = stringToPrecomputedChunk('",');
    var completeBoundaryScript3b = stringToPrecomputedChunk('"');
    var completeBoundaryScriptEnd = stringToPrecomputedChunk(")</script>");
    var completeBoundaryData1 = stringToPrecomputedChunk(
      '<template data-rci="" data-bid="'
    );
    var completeBoundaryWithStylesData1 = stringToPrecomputedChunk(
      '<template data-rri="" data-bid="'
    );
    var completeBoundaryData2 = stringToPrecomputedChunk('" data-sid="');
    var completeBoundaryData3a = stringToPrecomputedChunk('" data-sty="');
    var clientRenderScript1Full = stringToPrecomputedChunk(
      '$RX=function(b,c,d,e,f){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),f&&(a.cstck=f),b._reactRetry&&b._reactRetry())};;$RX("'
    );
    var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
    var clientRenderScript1A = stringToPrecomputedChunk('"');
    var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
    var clientRenderScriptEnd = stringToPrecomputedChunk(")</script>");
    var clientRenderData1 = stringToPrecomputedChunk(
      '<template data-rxi="" data-bid="'
    );
    var clientRenderData2 = stringToPrecomputedChunk('" data-dgst="');
    stringToPrecomputedChunk('" data-msg="');
    stringToPrecomputedChunk('" data-stck="');
    stringToPrecomputedChunk('" data-cstck="');
    var regexForJSStringsInInstructionScripts = /[<\u2028\u2029]/g;
    function escapeJSStringsForInstructionScripts(input) {
      return JSON.stringify(input).replace(
        regexForJSStringsInInstructionScripts,
        function(match) {
          switch (match) {
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw Error(
                "escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
              );
          }
        }
      );
    }
    var regexForJSStringsInScripts = /[&><\u2028\u2029]/g;
    function escapeJSObjectForInstructionScripts(input) {
      return JSON.stringify(input).replace(
        regexForJSStringsInScripts,
        function(match) {
          switch (match) {
            case "&":
              return "\\u0026";
            case ">":
              return "\\u003e";
            case "<":
              return "\\u003c";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw Error(
                "escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
              );
          }
        }
      );
    }
    var lateStyleTagResourceOpen1 = stringToPrecomputedChunk(
      '<style media="not all" data-precedence="'
    );
    var lateStyleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
    var lateStyleTagResourceOpen3 = stringToPrecomputedChunk('">');
    var lateStyleTagTemplateClose = stringToPrecomputedChunk("</style>");
    var currentlyRenderingBoundaryHasStylesToHoist = false;
    var destinationHasCapacity = true;
    function flushStyleTagsLateForBoundary(styleQueue) {
      var rules = styleQueue.rules, hrefs = styleQueue.hrefs, i = 0;
      if (hrefs.length) {
        writeChunk(this, lateStyleTagResourceOpen1);
        writeChunk(this, styleQueue.precedence);
        for (writeChunk(this, lateStyleTagResourceOpen2); i < hrefs.length - 1; i++)
          writeChunk(this, hrefs[i]), writeChunk(this, spaceSeparator);
        writeChunk(this, hrefs[i]);
        writeChunk(this, lateStyleTagResourceOpen3);
        for (i = 0; i < rules.length; i++)
          writeChunk(this, rules[i]);
        destinationHasCapacity = writeChunkAndReturn(
          this,
          lateStyleTagTemplateClose
        );
        currentlyRenderingBoundaryHasStylesToHoist = true;
        rules.length = 0;
        hrefs.length = 0;
      }
    }
    function hasStylesToHoist(stylesheet) {
      return 2 !== stylesheet.state ? currentlyRenderingBoundaryHasStylesToHoist = true : false;
    }
    function writeHoistablesForBoundary(destination, hoistableState, renderState) {
      currentlyRenderingBoundaryHasStylesToHoist = false;
      destinationHasCapacity = true;
      hoistableState.styles.forEach(flushStyleTagsLateForBoundary, destination);
      hoistableState.stylesheets.forEach(hasStylesToHoist);
      currentlyRenderingBoundaryHasStylesToHoist && (renderState.stylesToHoist = true);
      return destinationHasCapacity;
    }
    function flushResource(resource) {
      for (var i = 0; i < resource.length; i++)
        writeChunk(this, resource[i]);
      resource.length = 0;
    }
    var stylesheetFlushingQueue = [];
    function flushStyleInPreamble(stylesheet) {
      pushLinkImpl(stylesheetFlushingQueue, stylesheet.props);
      for (var i = 0; i < stylesheetFlushingQueue.length; i++)
        writeChunk(this, stylesheetFlushingQueue[i]);
      stylesheetFlushingQueue.length = 0;
      stylesheet.state = 2;
    }
    var styleTagResourceOpen1 = stringToPrecomputedChunk(
      '<style data-precedence="'
    );
    var styleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
    var spaceSeparator = stringToPrecomputedChunk(" ");
    var styleTagResourceOpen3 = stringToPrecomputedChunk('">');
    var styleTagResourceClose = stringToPrecomputedChunk("</style>");
    function flushStylesInPreamble(styleQueue) {
      var hasStylesheets = 0 < styleQueue.sheets.size;
      styleQueue.sheets.forEach(flushStyleInPreamble, this);
      styleQueue.sheets.clear();
      var rules = styleQueue.rules, hrefs = styleQueue.hrefs;
      if (!hasStylesheets || hrefs.length) {
        writeChunk(this, styleTagResourceOpen1);
        writeChunk(this, styleQueue.precedence);
        styleQueue = 0;
        if (hrefs.length) {
          for (writeChunk(this, styleTagResourceOpen2); styleQueue < hrefs.length - 1; styleQueue++)
            writeChunk(this, hrefs[styleQueue]), writeChunk(this, spaceSeparator);
          writeChunk(this, hrefs[styleQueue]);
        }
        writeChunk(this, styleTagResourceOpen3);
        for (styleQueue = 0; styleQueue < rules.length; styleQueue++)
          writeChunk(this, rules[styleQueue]);
        writeChunk(this, styleTagResourceClose);
        rules.length = 0;
        hrefs.length = 0;
      }
    }
    function preloadLateStyle(stylesheet) {
      if (0 === stylesheet.state) {
        stylesheet.state = 1;
        var props = stylesheet.props;
        pushLinkImpl(stylesheetFlushingQueue, {
          rel: "preload",
          as: "style",
          href: stylesheet.props.href,
          crossOrigin: props.crossOrigin,
          fetchPriority: props.fetchPriority,
          integrity: props.integrity,
          media: props.media,
          hrefLang: props.hrefLang,
          referrerPolicy: props.referrerPolicy
        });
        for (stylesheet = 0; stylesheet < stylesheetFlushingQueue.length; stylesheet++)
          writeChunk(this, stylesheetFlushingQueue[stylesheet]);
        stylesheetFlushingQueue.length = 0;
      }
    }
    function preloadLateStyles(styleQueue) {
      styleQueue.sheets.forEach(preloadLateStyle, this);
      styleQueue.sheets.clear();
    }
    var arrayFirstOpenBracket = stringToPrecomputedChunk("[");
    var arraySubsequentOpenBracket = stringToPrecomputedChunk(",[");
    var arrayInterstitial = stringToPrecomputedChunk(",");
    var arrayCloseBracket = stringToPrecomputedChunk("]");
    function writeStyleResourceDependenciesInJS(destination, hoistableState) {
      writeChunk(destination, arrayFirstOpenBracket);
      var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
      hoistableState.stylesheets.forEach(function(resource) {
        if (2 !== resource.state)
          if (3 === resource.state)
            writeChunk(destination, nextArrayOpenBrackChunk), writeChunk(
              destination,
              escapeJSObjectForInstructionScripts("" + resource.props.href)
            ), writeChunk(destination, arrayCloseBracket), nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
          else {
            writeChunk(destination, nextArrayOpenBrackChunk);
            var precedence = resource.props["data-precedence"], props = resource.props, coercedHref = sanitizeURL("" + resource.props.href);
            writeChunk(
              destination,
              escapeJSObjectForInstructionScripts(coercedHref)
            );
            precedence = "" + precedence;
            writeChunk(destination, arrayInterstitial);
            writeChunk(
              destination,
              escapeJSObjectForInstructionScripts(precedence)
            );
            for (var propKey in props)
              if (hasOwnProperty.call(props, propKey) && (precedence = props[propKey], null != precedence))
                switch (propKey) {
                  case "href":
                  case "rel":
                  case "precedence":
                  case "data-precedence":
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  default:
                    writeStyleResourceAttributeInJS(
                      destination,
                      propKey,
                      precedence
                    );
                }
            writeChunk(destination, arrayCloseBracket);
            nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            resource.state = 3;
          }
      });
      writeChunk(destination, arrayCloseBracket);
    }
    function writeStyleResourceAttributeInJS(destination, name, value) {
      var attributeName = name.toLowerCase();
      switch (typeof value) {
        case "function":
        case "symbol":
          return;
      }
      switch (name) {
        case "innerHTML":
        case "dangerouslySetInnerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "style":
        case "ref":
          return;
        case "className":
          attributeName = "class";
          name = "" + value;
          break;
        case "hidden":
          if (false === value)
            return;
          name = "";
          break;
        case "src":
        case "href":
          value = sanitizeURL(value);
          name = "" + value;
          break;
        default:
          if (2 < name.length && ("o" === name[0] || "O" === name[0]) && ("n" === name[1] || "N" === name[1]) || !isAttributeNameSafe(name))
            return;
          name = "" + value;
      }
      writeChunk(destination, arrayInterstitial);
      writeChunk(destination, escapeJSObjectForInstructionScripts(attributeName));
      writeChunk(destination, arrayInterstitial);
      writeChunk(destination, escapeJSObjectForInstructionScripts(name));
    }
    function writeStyleResourceDependenciesInAttr(destination, hoistableState) {
      writeChunk(destination, arrayFirstOpenBracket);
      var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
      hoistableState.stylesheets.forEach(function(resource) {
        if (2 !== resource.state)
          if (3 === resource.state)
            writeChunk(destination, nextArrayOpenBrackChunk), writeChunk(
              destination,
              escapeTextForBrowser(JSON.stringify("" + resource.props.href))
            ), writeChunk(destination, arrayCloseBracket), nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
          else {
            writeChunk(destination, nextArrayOpenBrackChunk);
            var precedence = resource.props["data-precedence"], props = resource.props, coercedHref = sanitizeURL("" + resource.props.href);
            writeChunk(
              destination,
              escapeTextForBrowser(JSON.stringify(coercedHref))
            );
            precedence = "" + precedence;
            writeChunk(destination, arrayInterstitial);
            writeChunk(
              destination,
              escapeTextForBrowser(JSON.stringify(precedence))
            );
            for (var propKey in props)
              if (hasOwnProperty.call(props, propKey) && (precedence = props[propKey], null != precedence))
                switch (propKey) {
                  case "href":
                  case "rel":
                  case "precedence":
                  case "data-precedence":
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(
                      "link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
                    );
                  default:
                    writeStyleResourceAttributeInAttr(
                      destination,
                      propKey,
                      precedence
                    );
                }
            writeChunk(destination, arrayCloseBracket);
            nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            resource.state = 3;
          }
      });
      writeChunk(destination, arrayCloseBracket);
    }
    function writeStyleResourceAttributeInAttr(destination, name, value) {
      var attributeName = name.toLowerCase();
      switch (typeof value) {
        case "function":
        case "symbol":
          return;
      }
      switch (name) {
        case "innerHTML":
        case "dangerouslySetInnerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
        case "style":
        case "ref":
          return;
        case "className":
          attributeName = "class";
          name = "" + value;
          break;
        case "hidden":
          if (false === value)
            return;
          name = "";
          break;
        case "src":
        case "href":
          value = sanitizeURL(value);
          name = "" + value;
          break;
        default:
          if (2 < name.length && ("o" === name[0] || "O" === name[0]) && ("n" === name[1] || "N" === name[1]) || !isAttributeNameSafe(name))
            return;
          name = "" + value;
      }
      writeChunk(destination, arrayInterstitial);
      writeChunk(destination, escapeTextForBrowser(JSON.stringify(attributeName)));
      writeChunk(destination, arrayInterstitial);
      writeChunk(destination, escapeTextForBrowser(JSON.stringify(name)));
    }
    function createHoistableState() {
      return { styles: /* @__PURE__ */ new Set(), stylesheets: /* @__PURE__ */ new Set() };
    }
    function prefetchDNS(href) {
      var request = resolveRequest();
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if ("string" === typeof href && href) {
          if (!resumableState.dnsResources.hasOwnProperty(href)) {
            resumableState.dnsResources[href] = null;
            resumableState = renderState.headers;
            var header, JSCompiler_temp;
            if (JSCompiler_temp = resumableState && 0 < resumableState.remainingCapacity)
              JSCompiler_temp = (header = "<" + ("" + href).replace(
                regexForHrefInLinkHeaderURLContext,
                escapeHrefForLinkHeaderURLContextReplacer
              ) + ">; rel=dns-prefetch", 2 <= (resumableState.remainingCapacity -= header.length));
            JSCompiler_temp ? (renderState.resets.dns[href] = null, resumableState.preconnects && (resumableState.preconnects += ", "), resumableState.preconnects += header) : (header = [], pushLinkImpl(header, { href, rel: "dns-prefetch" }), renderState.preconnects.add(header));
          }
          enqueueFlush(request);
        }
      } else
        previousDispatcher.D(href);
    }
    function preconnect(href, crossOrigin) {
      var request = resolveRequest();
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if ("string" === typeof href && href) {
          var bucket = "use-credentials" === crossOrigin ? "credentials" : "string" === typeof crossOrigin ? "anonymous" : "default";
          if (!resumableState.connectResources[bucket].hasOwnProperty(href)) {
            resumableState.connectResources[bucket][href] = null;
            resumableState = renderState.headers;
            var header, JSCompiler_temp;
            if (JSCompiler_temp = resumableState && 0 < resumableState.remainingCapacity) {
              JSCompiler_temp = "<" + ("" + href).replace(
                regexForHrefInLinkHeaderURLContext,
                escapeHrefForLinkHeaderURLContextReplacer
              ) + ">; rel=preconnect";
              if ("string" === typeof crossOrigin) {
                var escapedCrossOrigin = ("" + crossOrigin).replace(
                  regexForLinkHeaderQuotedParamValueContext,
                  escapeStringForLinkHeaderQuotedParamValueContextReplacer
                );
                JSCompiler_temp += '; crossorigin="' + escapedCrossOrigin + '"';
              }
              JSCompiler_temp = (header = JSCompiler_temp, 2 <= (resumableState.remainingCapacity -= header.length));
            }
            JSCompiler_temp ? (renderState.resets.connect[bucket][href] = null, resumableState.preconnects && (resumableState.preconnects += ", "), resumableState.preconnects += header) : (bucket = [], pushLinkImpl(bucket, {
              rel: "preconnect",
              href,
              crossOrigin
            }), renderState.preconnects.add(bucket));
          }
          enqueueFlush(request);
        }
      } else
        previousDispatcher.C(href, crossOrigin);
    }
    function preload(href, as, options) {
      var request = resolveRequest();
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if (as && href) {
          switch (as) {
            case "image":
              if (options) {
                var imageSrcSet = options.imageSrcSet;
                var imageSizes = options.imageSizes;
                var fetchPriority = options.fetchPriority;
              }
              var key = imageSrcSet ? imageSrcSet + "\n" + (imageSizes || "") : href;
              if (resumableState.imageResources.hasOwnProperty(key))
                return;
              resumableState.imageResources[key] = PRELOAD_NO_CREDS;
              resumableState = renderState.headers;
              var header;
              resumableState && 0 < resumableState.remainingCapacity && "high" === fetchPriority && (header = getPreloadAsHeader(href, as, options), 2 <= (resumableState.remainingCapacity -= header.length)) ? (renderState.resets.image[key] = PRELOAD_NO_CREDS, resumableState.highImagePreloads && (resumableState.highImagePreloads += ", "), resumableState.highImagePreloads += header) : (resumableState = [], pushLinkImpl(
                resumableState,
                assign(
                  { rel: "preload", href: imageSrcSet ? void 0 : href, as },
                  options
                )
              ), "high" === fetchPriority ? renderState.highImagePreloads.add(resumableState) : (renderState.bulkPreloads.add(resumableState), renderState.preloads.images.set(key, resumableState)));
              break;
            case "style":
              if (resumableState.styleResources.hasOwnProperty(href))
                return;
              imageSrcSet = [];
              pushLinkImpl(
                imageSrcSet,
                assign({ rel: "preload", href, as }, options)
              );
              resumableState.styleResources[href] = !options || "string" !== typeof options.crossOrigin && "string" !== typeof options.integrity ? PRELOAD_NO_CREDS : [options.crossOrigin, options.integrity];
              renderState.preloads.stylesheets.set(href, imageSrcSet);
              renderState.bulkPreloads.add(imageSrcSet);
              break;
            case "script":
              if (resumableState.scriptResources.hasOwnProperty(href))
                return;
              imageSrcSet = [];
              renderState.preloads.scripts.set(href, imageSrcSet);
              renderState.bulkPreloads.add(imageSrcSet);
              pushLinkImpl(
                imageSrcSet,
                assign({ rel: "preload", href, as }, options)
              );
              resumableState.scriptResources[href] = !options || "string" !== typeof options.crossOrigin && "string" !== typeof options.integrity ? PRELOAD_NO_CREDS : [options.crossOrigin, options.integrity];
              break;
            default:
              if (resumableState.unknownResources.hasOwnProperty(as)) {
                if (imageSrcSet = resumableState.unknownResources[as], imageSrcSet.hasOwnProperty(href))
                  return;
              } else
                imageSrcSet = {}, resumableState.unknownResources[as] = imageSrcSet;
              imageSrcSet[href] = PRELOAD_NO_CREDS;
              if ((resumableState = renderState.headers) && 0 < resumableState.remainingCapacity && "font" === as && (key = getPreloadAsHeader(href, as, options), 2 <= (resumableState.remainingCapacity -= key.length)))
                renderState.resets.font[href] = PRELOAD_NO_CREDS, resumableState.fontPreloads && (resumableState.fontPreloads += ", "), resumableState.fontPreloads += key;
              else
                switch (resumableState = [], href = assign({ rel: "preload", href, as }, options), pushLinkImpl(resumableState, href), as) {
                  case "font":
                    renderState.fontPreloads.add(resumableState);
                    break;
                  default:
                    renderState.bulkPreloads.add(resumableState);
                }
          }
          enqueueFlush(request);
        }
      } else
        previousDispatcher.L(href, as, options);
    }
    function preloadModule(href, options) {
      var request = resolveRequest();
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if (href) {
          var as = options && "string" === typeof options.as ? options.as : "script";
          switch (as) {
            case "script":
              if (resumableState.moduleScriptResources.hasOwnProperty(href))
                return;
              as = [];
              resumableState.moduleScriptResources[href] = !options || "string" !== typeof options.crossOrigin && "string" !== typeof options.integrity ? PRELOAD_NO_CREDS : [options.crossOrigin, options.integrity];
              renderState.preloads.moduleScripts.set(href, as);
              break;
            default:
              if (resumableState.moduleUnknownResources.hasOwnProperty(as)) {
                var resources = resumableState.unknownResources[as];
                if (resources.hasOwnProperty(href))
                  return;
              } else
                resources = {}, resumableState.moduleUnknownResources[as] = resources;
              as = [];
              resources[href] = PRELOAD_NO_CREDS;
          }
          pushLinkImpl(as, assign({ rel: "modulepreload", href }, options));
          renderState.bulkPreloads.add(as);
          enqueueFlush(request);
        }
      } else
        previousDispatcher.m(href, options);
    }
    function preinitStyle(href, precedence, options) {
      var request = resolveRequest();
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if (href) {
          precedence = precedence || "default";
          var styleQueue = renderState.styles.get(precedence), resourceState = resumableState.styleResources.hasOwnProperty(href) ? resumableState.styleResources[href] : void 0;
          null !== resourceState && (resumableState.styleResources[href] = null, styleQueue || (styleQueue = {
            precedence: escapeTextForBrowser(precedence),
            rules: [],
            hrefs: [],
            sheets: /* @__PURE__ */ new Map()
          }, renderState.styles.set(precedence, styleQueue)), precedence = {
            state: 0,
            props: assign(
              { rel: "stylesheet", href, "data-precedence": precedence },
              options
            )
          }, resourceState && (2 === resourceState.length && adoptPreloadCredentials(precedence.props, resourceState), (renderState = renderState.preloads.stylesheets.get(href)) && 0 < renderState.length ? renderState.length = 0 : precedence.state = 1), styleQueue.sheets.set(href, precedence), enqueueFlush(request));
        }
      } else
        previousDispatcher.S(href, precedence, options);
    }
    function preinitScript(src, options) {
      var request = resolveRequest();
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if (src) {
          var resourceState = resumableState.scriptResources.hasOwnProperty(src) ? resumableState.scriptResources[src] : void 0;
          null !== resourceState && (resumableState.scriptResources[src] = null, options = assign({ src, async: true }, options), resourceState && (2 === resourceState.length && adoptPreloadCredentials(options, resourceState), src = renderState.preloads.scripts.get(src)) && (src.length = 0), src = [], renderState.scripts.add(src), pushScriptImpl(src, options), enqueueFlush(request));
        }
      } else
        previousDispatcher.X(src, options);
    }
    function preinitModuleScript(src, options) {
      var request = resolveRequest();
      if (request) {
        var resumableState = request.resumableState, renderState = request.renderState;
        if (src) {
          var resourceState = resumableState.moduleScriptResources.hasOwnProperty(
            src
          ) ? resumableState.moduleScriptResources[src] : void 0;
          null !== resourceState && (resumableState.moduleScriptResources[src] = null, options = assign({ src, type: "module", async: true }, options), resourceState && (2 === resourceState.length && adoptPreloadCredentials(options, resourceState), src = renderState.preloads.moduleScripts.get(src)) && (src.length = 0), src = [], renderState.scripts.add(src), pushScriptImpl(src, options), enqueueFlush(request));
        }
      } else
        previousDispatcher.M(src, options);
    }
    function adoptPreloadCredentials(target, preloadState) {
      null == target.crossOrigin && (target.crossOrigin = preloadState[0]);
      null == target.integrity && (target.integrity = preloadState[1]);
    }
    function getPreloadAsHeader(href, as, params) {
      href = ("" + href).replace(
        regexForHrefInLinkHeaderURLContext,
        escapeHrefForLinkHeaderURLContextReplacer
      );
      as = ("" + as).replace(
        regexForLinkHeaderQuotedParamValueContext,
        escapeStringForLinkHeaderQuotedParamValueContextReplacer
      );
      as = "<" + href + '>; rel=preload; as="' + as + '"';
      for (var paramName in params)
        hasOwnProperty.call(params, paramName) && (href = params[paramName], "string" === typeof href && (as += "; " + paramName.toLowerCase() + '="' + ("" + href).replace(
          regexForLinkHeaderQuotedParamValueContext,
          escapeStringForLinkHeaderQuotedParamValueContextReplacer
        ) + '"'));
      return as;
    }
    var regexForHrefInLinkHeaderURLContext = /[<>\r\n]/g;
    function escapeHrefForLinkHeaderURLContextReplacer(match) {
      switch (match) {
        case "<":
          return "%3C";
        case ">":
          return "%3E";
        case "\n":
          return "%0A";
        case "\r":
          return "%0D";
        default:
          throw Error(
            "escapeLinkHrefForHeaderContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
          );
      }
    }
    var regexForLinkHeaderQuotedParamValueContext = /["';,\r\n]/g;
    function escapeStringForLinkHeaderQuotedParamValueContextReplacer(match) {
      switch (match) {
        case '"':
          return "%22";
        case "'":
          return "%27";
        case ";":
          return "%3B";
        case ",":
          return "%2C";
        case "\n":
          return "%0A";
        case "\r":
          return "%0D";
        default:
          throw Error(
            "escapeStringForLinkHeaderQuotedParamValueContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React"
          );
      }
    }
    function hoistStyleQueueDependency(styleQueue) {
      this.styles.add(styleQueue);
    }
    function hoistStylesheetDependency(stylesheet) {
      this.stylesheets.add(stylesheet);
    }
    var requestStorage = new async_hooks.AsyncLocalStorage();
    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
    function getComponentNameFromType(type) {
      if (null == type)
        return null;
      if ("function" === typeof type)
        return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
      if ("string" === typeof type)
        return type;
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if ("object" === typeof type)
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Provider";
          case REACT_CONSUMER_TYPE:
            return (type._context.displayName || "Context") + ".Consumer";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
          case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {
            }
        }
      return null;
    }
    var emptyContextObject = {};
    var currentActiveSnapshot = null;
    function popToNearestCommonAncestor(prev, next) {
      if (prev !== next) {
        prev.context._currentValue = prev.parentValue;
        prev = prev.parent;
        var parentNext = next.parent;
        if (null === prev) {
          if (null !== parentNext)
            throw Error(
              "The stacks must reach the root at the same time. This is a bug in React."
            );
        } else {
          if (null === parentNext)
            throw Error(
              "The stacks must reach the root at the same time. This is a bug in React."
            );
          popToNearestCommonAncestor(prev, parentNext);
        }
        next.context._currentValue = next.value;
      }
    }
    function popAllPrevious(prev) {
      prev.context._currentValue = prev.parentValue;
      prev = prev.parent;
      null !== prev && popAllPrevious(prev);
    }
    function pushAllNext(next) {
      var parentNext = next.parent;
      null !== parentNext && pushAllNext(parentNext);
      next.context._currentValue = next.value;
    }
    function popPreviousToCommonLevel(prev, next) {
      prev.context._currentValue = prev.parentValue;
      prev = prev.parent;
      if (null === prev)
        throw Error(
          "The depth must equal at least at zero before reaching the root. This is a bug in React."
        );
      prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : popPreviousToCommonLevel(prev, next);
    }
    function popNextToCommonLevel(prev, next) {
      var parentNext = next.parent;
      if (null === parentNext)
        throw Error(
          "The depth must equal at least at zero before reaching the root. This is a bug in React."
        );
      prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext);
      next.context._currentValue = next.value;
    }
    function switchContext(newSnapshot) {
      var prev = currentActiveSnapshot;
      prev !== newSnapshot && (null === prev ? pushAllNext(newSnapshot) : null === newSnapshot ? popAllPrevious(prev) : prev.depth === newSnapshot.depth ? popToNearestCommonAncestor(prev, newSnapshot) : prev.depth > newSnapshot.depth ? popPreviousToCommonLevel(prev, newSnapshot) : popNextToCommonLevel(prev, newSnapshot), currentActiveSnapshot = newSnapshot);
    }
    var classComponentUpdater = {
      isMounted: function() {
        return false;
      },
      enqueueSetState: function(inst, payload) {
        inst = inst._reactInternals;
        null !== inst.queue && inst.queue.push(payload);
      },
      enqueueReplaceState: function(inst, payload) {
        inst = inst._reactInternals;
        inst.replace = true;
        inst.queue = [payload];
      },
      enqueueForceUpdate: function() {
      }
    };
    var emptyTreeContext = { id: 1, overflow: "" };
    function pushTreeContext(baseContext, totalChildren, index) {
      var baseIdWithLeadingBit = baseContext.id;
      baseContext = baseContext.overflow;
      var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
      baseIdWithLeadingBit &= ~(1 << baseLength);
      index += 1;
      var length = 32 - clz32(totalChildren) + baseLength;
      if (30 < length) {
        var numberOfOverflowBits = baseLength - baseLength % 5;
        length = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
        baseIdWithLeadingBit >>= numberOfOverflowBits;
        baseLength -= numberOfOverflowBits;
        return {
          id: 1 << 32 - clz32(totalChildren) + baseLength | index << baseLength | baseIdWithLeadingBit,
          overflow: length + baseContext
        };
      }
      return {
        id: 1 << length | index << baseLength | baseIdWithLeadingBit,
        overflow: baseContext
      };
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
      x >>>= 0;
      return 0 === x ? 32 : 31 - (log(x) / LN2 | 0) | 0;
    }
    var SuspenseException = Error(
      "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"
    );
    function noop$2() {
    }
    function trackUsedThenable(thenableState2, thenable, index) {
      index = thenableState2[index];
      void 0 === index ? thenableState2.push(thenable) : index !== thenable && (thenable.then(noop$2, noop$2), thenable = index);
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenable.reason;
        default:
          "string" === typeof thenable.status ? thenable.then(noop$2, noop$2) : (thenableState2 = thenable, thenableState2.status = "pending", thenableState2.then(
            function(fulfilledValue) {
              if ("pending" === thenable.status) {
                var fulfilledThenable = thenable;
                fulfilledThenable.status = "fulfilled";
                fulfilledThenable.value = fulfilledValue;
              }
            },
            function(error) {
              if ("pending" === thenable.status) {
                var rejectedThenable = thenable;
                rejectedThenable.status = "rejected";
                rejectedThenable.reason = error;
              }
            }
          ));
          switch (thenable.status) {
            case "fulfilled":
              return thenable.value;
            case "rejected":
              throw thenable.reason;
          }
          suspendedThenable = thenable;
          throw SuspenseException;
      }
    }
    var suspendedThenable = null;
    function getSuspendedThenable() {
      if (null === suspendedThenable)
        throw Error(
          "Expected a suspended thenable. This is a bug in React. Please file an issue."
        );
      var thenable = suspendedThenable;
      suspendedThenable = null;
      return thenable;
    }
    function is(x, y) {
      return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = "function" === typeof Object.is ? Object.is : is;
    var currentlyRenderingComponent = null;
    var currentlyRenderingTask = null;
    var currentlyRenderingRequest = null;
    var currentlyRenderingKeyPath = null;
    var firstWorkInProgressHook = null;
    var workInProgressHook = null;
    var isReRender = false;
    var didScheduleRenderPhaseUpdate = false;
    var localIdCounter = 0;
    var actionStateCounter = 0;
    var actionStateMatchingIndex = -1;
    var thenableIndexCounter = 0;
    var thenableState = null;
    var renderPhaseUpdates = null;
    var numberOfReRenders = 0;
    function resolveCurrentlyRenderingComponent() {
      if (null === currentlyRenderingComponent)
        throw Error(
          "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
        );
      return currentlyRenderingComponent;
    }
    function createHook() {
      if (0 < numberOfReRenders)
        throw Error("Rendered more hooks than during the previous render");
      return { memoizedState: null, queue: null, next: null };
    }
    function createWorkInProgressHook() {
      null === workInProgressHook ? null === firstWorkInProgressHook ? (isReRender = false, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = true, workInProgressHook = firstWorkInProgressHook) : null === workInProgressHook.next ? (isReRender = false, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = true, workInProgressHook = workInProgressHook.next);
      return workInProgressHook;
    }
    function getThenableStateAfterSuspending() {
      var state = thenableState;
      thenableState = null;
      return state;
    }
    function resetHooksState() {
      currentlyRenderingKeyPath = currentlyRenderingRequest = currentlyRenderingTask = currentlyRenderingComponent = null;
      didScheduleRenderPhaseUpdate = false;
      firstWorkInProgressHook = null;
      numberOfReRenders = 0;
      workInProgressHook = renderPhaseUpdates = null;
    }
    function basicStateReducer(state, action) {
      return "function" === typeof action ? action(state) : action;
    }
    function useReducer(reducer, initialArg, init) {
      currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
      workInProgressHook = createWorkInProgressHook();
      if (isReRender) {
        var queue = workInProgressHook.queue;
        initialArg = queue.dispatch;
        if (null !== renderPhaseUpdates && (init = renderPhaseUpdates.get(queue), void 0 !== init)) {
          renderPhaseUpdates.delete(queue);
          queue = workInProgressHook.memoizedState;
          do
            queue = reducer(queue, init.action), init = init.next;
          while (null !== init);
          workInProgressHook.memoizedState = queue;
          return [queue, initialArg];
        }
        return [workInProgressHook.memoizedState, initialArg];
      }
      reducer = reducer === basicStateReducer ? "function" === typeof initialArg ? initialArg() : initialArg : void 0 !== init ? init(initialArg) : initialArg;
      workInProgressHook.memoizedState = reducer;
      reducer = workInProgressHook.queue = { last: null, dispatch: null };
      reducer = reducer.dispatch = dispatchAction.bind(
        null,
        currentlyRenderingComponent,
        reducer
      );
      return [workInProgressHook.memoizedState, reducer];
    }
    function useMemo(nextCreate, deps) {
      currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
      workInProgressHook = createWorkInProgressHook();
      deps = void 0 === deps ? null : deps;
      if (null !== workInProgressHook) {
        var prevState = workInProgressHook.memoizedState;
        if (null !== prevState && null !== deps) {
          var prevDeps = prevState[1];
          a:
            if (null === prevDeps)
              prevDeps = false;
            else {
              for (var i = 0; i < prevDeps.length && i < deps.length; i++)
                if (!objectIs(deps[i], prevDeps[i])) {
                  prevDeps = false;
                  break a;
                }
              prevDeps = true;
            }
          if (prevDeps)
            return prevState[0];
        }
      }
      nextCreate = nextCreate();
      workInProgressHook.memoizedState = [nextCreate, deps];
      return nextCreate;
    }
    function dispatchAction(componentIdentity, queue, action) {
      if (25 <= numberOfReRenders)
        throw Error(
          "Too many re-renders. React limits the number of renders to prevent an infinite loop."
        );
      if (componentIdentity === currentlyRenderingComponent)
        if (didScheduleRenderPhaseUpdate = true, componentIdentity = { action, next: null }, null === renderPhaseUpdates && (renderPhaseUpdates = /* @__PURE__ */ new Map()), action = renderPhaseUpdates.get(queue), void 0 === action)
          renderPhaseUpdates.set(queue, componentIdentity);
        else {
          for (queue = action; null !== queue.next; )
            queue = queue.next;
          queue.next = componentIdentity;
        }
    }
    function throwOnUseEffectEventCall() {
      throw Error(
        "A function wrapped in useEffectEvent can't be called during rendering."
      );
    }
    function unsupportedStartTransition() {
      throw Error("startTransition cannot be called during server rendering.");
    }
    function unsupportedSetOptimisticState() {
      throw Error("Cannot update optimistic state while rendering.");
    }
    function createPostbackActionStateKey(permalink, componentKeyPath, hookIndex) {
      if (void 0 !== permalink)
        return "p" + permalink;
      permalink = JSON.stringify([componentKeyPath, null, hookIndex]);
      componentKeyPath = crypto.createHash("md5");
      componentKeyPath.update(permalink);
      return "k" + componentKeyPath.digest("hex");
    }
    function useActionState(action, initialState, permalink) {
      resolveCurrentlyRenderingComponent();
      var actionStateHookIndex = actionStateCounter++, request = currentlyRenderingRequest;
      if ("function" === typeof action.$$FORM_ACTION) {
        var nextPostbackStateKey = null, componentKeyPath = currentlyRenderingKeyPath;
        request = request.formState;
        var isSignatureEqual = action.$$IS_SIGNATURE_EQUAL;
        if (null !== request && "function" === typeof isSignatureEqual) {
          var postbackKey = request[1];
          isSignatureEqual.call(action, request[2], request[3]) && (nextPostbackStateKey = createPostbackActionStateKey(
            permalink,
            componentKeyPath,
            actionStateHookIndex
          ), postbackKey === nextPostbackStateKey && (actionStateMatchingIndex = actionStateHookIndex, initialState = request[0]));
        }
        var boundAction = action.bind(null, initialState);
        action = function(payload) {
          boundAction(payload);
        };
        "function" === typeof boundAction.$$FORM_ACTION && (action.$$FORM_ACTION = function(prefix2) {
          prefix2 = boundAction.$$FORM_ACTION(prefix2);
          void 0 !== permalink && (permalink += "", prefix2.action = permalink);
          var formData = prefix2.data;
          formData && (null === nextPostbackStateKey && (nextPostbackStateKey = createPostbackActionStateKey(
            permalink,
            componentKeyPath,
            actionStateHookIndex
          )), formData.append("$ACTION_KEY", nextPostbackStateKey));
          return prefix2;
        });
        return [initialState, action, false];
      }
      var boundAction$22 = action.bind(null, initialState);
      return [
        initialState,
        function(payload) {
          boundAction$22(payload);
        },
        false
      ];
    }
    function unwrapThenable(thenable) {
      var index = thenableIndexCounter;
      thenableIndexCounter += 1;
      null === thenableState && (thenableState = []);
      return trackUsedThenable(thenableState, thenable, index);
    }
    function readPreviousThenableFromState() {
      var index = thenableIndexCounter;
      thenableIndexCounter += 1;
      if (null !== thenableState)
        return index = thenableState[index], index = void 0 === index ? void 0 : index.value, index;
    }
    function unsupportedRefresh() {
      throw Error("Cache cannot be refreshed during server rendering.");
    }
    function noop$1() {
    }
    var HooksDispatcher = {
      readContext: function(context) {
        return context._currentValue;
      },
      use: function(usable) {
        if (null !== usable && "object" === typeof usable) {
          if ("function" === typeof usable.then)
            return unwrapThenable(usable);
          if (usable.$$typeof === REACT_CONTEXT_TYPE)
            return usable._currentValue;
        }
        throw Error("An unsupported type was passed to use(): " + String(usable));
      },
      useContext: function(context) {
        resolveCurrentlyRenderingComponent();
        return context._currentValue;
      },
      useMemo,
      useReducer,
      useRef: function(initialValue) {
        currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
        workInProgressHook = createWorkInProgressHook();
        var previousRef = workInProgressHook.memoizedState;
        return null === previousRef ? (initialValue = { current: initialValue }, workInProgressHook.memoizedState = initialValue) : previousRef;
      },
      useState: function(initialState) {
        return useReducer(basicStateReducer, initialState);
      },
      useInsertionEffect: noop$1,
      useLayoutEffect: noop$1,
      useCallback: function(callback, deps) {
        return useMemo(function() {
          return callback;
        }, deps);
      },
      useImperativeHandle: noop$1,
      useEffect: noop$1,
      useDebugValue: noop$1,
      useDeferredValue: function(value, initialValue) {
        resolveCurrentlyRenderingComponent();
        return void 0 !== initialValue ? initialValue : value;
      },
      useTransition: function() {
        resolveCurrentlyRenderingComponent();
        return [false, unsupportedStartTransition];
      },
      useId: function() {
        var JSCompiler_inline_result = currentlyRenderingTask.treeContext;
        var overflow = JSCompiler_inline_result.overflow;
        JSCompiler_inline_result = JSCompiler_inline_result.id;
        JSCompiler_inline_result = (JSCompiler_inline_result & ~(1 << 32 - clz32(JSCompiler_inline_result) - 1)).toString(32) + overflow;
        var resumableState = currentResumableState;
        if (null === resumableState)
          throw Error(
            "Invalid hook call. Hooks can only be called inside of the body of a function component."
          );
        overflow = localIdCounter++;
        JSCompiler_inline_result = ":" + resumableState.idPrefix + "R" + JSCompiler_inline_result;
        0 < overflow && (JSCompiler_inline_result += "H" + overflow.toString(32));
        return JSCompiler_inline_result + ":";
      },
      useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
        if (void 0 === getServerSnapshot)
          throw Error(
            "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
          );
        return getServerSnapshot();
      },
      useCacheRefresh: function() {
        return unsupportedRefresh;
      },
      useEffectEvent: function() {
        return throwOnUseEffectEventCall;
      },
      useMemoCache: function(size) {
        for (var data = Array(size), i = 0; i < size; i++)
          data[i] = REACT_MEMO_CACHE_SENTINEL;
        return data;
      },
      useHostTransitionStatus: function() {
        resolveCurrentlyRenderingComponent();
        return sharedNotPendingObject;
      },
      useOptimistic: function(passthrough) {
        resolveCurrentlyRenderingComponent();
        return [passthrough, unsupportedSetOptimisticState];
      }
    };
    HooksDispatcher.useFormState = useActionState;
    HooksDispatcher.useActionState = useActionState;
    var currentResumableState = null;
    var DefaultAsyncDispatcher = {
      getCacheForType: function() {
        throw Error("Not implemented.");
      }
    };
    var prefix;
    function describeBuiltInComponentFrame(name) {
      if (void 0 === prefix)
        try {
          throw Error();
        } catch (x) {
          var match = x.stack.trim().match(/\n( *(at )?)/);
          prefix = match && match[1] || "";
        }
      return "\n" + prefix + name;
    }
    var reentry = false;
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry)
        return "";
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var RunInRootFrame = {
        DetermineComponentFrameRoot: function() {
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if ("object" === typeof Reflect && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  var control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x$24) {
                  control = x$24;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x$25) {
                control = x$25;
              }
              (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {
              });
            }
          } catch (sample) {
            if (sample && control && "string" === typeof sample.stack)
              return [sample.stack, control.stack];
          }
          return [null, null];
        }
      };
      RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
      var namePropDescriptor = Object.getOwnPropertyDescriptor(
        RunInRootFrame.DetermineComponentFrameRoot,
        "name"
      );
      namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
        value: "DetermineComponentFrameRoot"
      });
      try {
        var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
        if (sampleStack && controlStack) {
          var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
          for (namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot"); )
            RunInRootFrame++;
          for (; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes(
            "DetermineComponentFrameRoot"
          ); )
            namePropDescriptor++;
          if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length)
            for (RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]; )
              namePropDescriptor--;
          for (; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--)
            if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
              if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
                do
                  if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                    var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
                    fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
                    return frame;
                  }
                while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
              }
              break;
            }
        }
      } finally {
        reentry = false, Error.prepareStackTrace = previousPrepareStackTrace;
      }
      return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
    }
    function defaultErrorHandler(error) {
      console.error(error);
      return null;
    }
    function noop() {
    }
    function createRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError, onPostpone, formState) {
      var pingedTasks = [], abortSet = /* @__PURE__ */ new Set();
      resumableState = {
        destination: null,
        flushScheduled: false,
        resumableState,
        renderState,
        rootFormatContext,
        progressiveChunkSize: void 0 === progressiveChunkSize ? 12800 : progressiveChunkSize,
        status: 0,
        fatalError: null,
        nextSegmentId: 0,
        allPendingTasks: 0,
        pendingRootTasks: 0,
        completedRootSegment: null,
        abortableTasks: abortSet,
        pingedTasks,
        clientRenderedBoundaries: [],
        completedBoundaries: [],
        partialBoundaries: [],
        trackedPostpones: null,
        onError: void 0 === onError ? defaultErrorHandler : onError,
        onPostpone: void 0 === onPostpone ? noop : onPostpone,
        onAllReady: void 0 === onAllReady ? noop : onAllReady,
        onShellReady: void 0 === onShellReady ? noop : onShellReady,
        onShellError: void 0 === onShellError ? noop : onShellError,
        onFatalError: void 0 === onFatalError ? noop : onFatalError,
        formState: void 0 === formState ? null : formState
      };
      renderState = createPendingSegment(
        resumableState,
        0,
        null,
        rootFormatContext,
        false,
        false
      );
      renderState.parentFlushed = true;
      children = createRenderTask(
        resumableState,
        null,
        children,
        -1,
        null,
        renderState,
        null,
        abortSet,
        null,
        rootFormatContext,
        emptyContextObject,
        null,
        emptyTreeContext,
        null,
        false
      );
      pingedTasks.push(children);
      return resumableState;
    }
    function createPrerenderRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError, onPostpone) {
      children = createRequest(
        children,
        resumableState,
        renderState,
        rootFormatContext,
        progressiveChunkSize,
        onError,
        onAllReady,
        onShellReady,
        onShellError,
        onFatalError,
        onPostpone,
        void 0
      );
      children.trackedPostpones = {
        workingMap: /* @__PURE__ */ new Map(),
        rootNodes: [],
        rootSlots: null
      };
      return children;
    }
    var currentRequest = null;
    function resolveRequest() {
      if (currentRequest)
        return currentRequest;
      var store = requestStorage.getStore();
      return store ? store : null;
    }
    function pingTask(request, task) {
      request.pingedTasks.push(task);
      1 === request.pingedTasks.length && (request.flushScheduled = null !== request.destination, setImmediate(function() {
        return performWork(request);
      }));
    }
    function createSuspenseBoundary(request, fallbackAbortableTasks) {
      return {
        status: 0,
        rootSegmentID: -1,
        parentFlushed: false,
        pendingTasks: 0,
        completedSegments: [],
        byteSize: 0,
        fallbackAbortableTasks,
        errorDigest: null,
        contentState: createHoistableState(),
        fallbackState: createHoistableState(),
        trackedContentKeyPath: null,
        trackedFallbackNode: null
      };
    }
    function createRenderTask(request, thenableState2, node, childIndex, blockedBoundary, blockedSegment, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
      request.allPendingTasks++;
      null === blockedBoundary ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
      var task = {
        replay: null,
        node,
        childIndex,
        ping: function() {
          return pingTask(request, task);
        },
        blockedBoundary,
        blockedSegment,
        hoistableState,
        abortSet,
        keyPath,
        formatContext,
        legacyContext,
        context,
        treeContext,
        componentStack,
        thenableState: thenableState2,
        isFallback
      };
      abortSet.add(task);
      return task;
    }
    function createReplayTask(request, thenableState2, replay, node, childIndex, blockedBoundary, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
      request.allPendingTasks++;
      null === blockedBoundary ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
      replay.pendingTasks++;
      var task = {
        replay,
        node,
        childIndex,
        ping: function() {
          return pingTask(request, task);
        },
        blockedBoundary,
        blockedSegment: null,
        hoistableState,
        abortSet,
        keyPath,
        formatContext,
        legacyContext,
        context,
        treeContext,
        componentStack,
        thenableState: thenableState2,
        isFallback
      };
      abortSet.add(task);
      return task;
    }
    function createPendingSegment(request, index, boundary, parentFormatContext, lastPushedText, textEmbedded) {
      return {
        status: 0,
        id: -1,
        index,
        parentFlushed: false,
        chunks: [],
        children: [],
        parentFormatContext,
        boundary,
        lastPushedText,
        textEmbedded
      };
    }
    function createBuiltInComponentStack(task, type) {
      return { tag: 0, parent: task.componentStack, type };
    }
    function getThrownInfo(request, node) {
      if (node && null !== request.trackedPostpones) {
        try {
          request = "";
          do {
            switch (node.tag) {
              case 0:
                request += describeBuiltInComponentFrame(node.type);
                break;
              case 1:
                request += describeNativeComponentFrame(node.type, false);
                break;
              case 2:
                request += describeNativeComponentFrame(node.type, true);
            }
            node = node.parent;
          } while (node);
          var JSCompiler_temp = request;
        } catch (x) {
          JSCompiler_temp = "\nError generating stack: " + x.message + "\n" + x.stack;
        }
        JSCompiler_temp = { componentStack: JSCompiler_temp };
      } else
        JSCompiler_temp = {};
      return JSCompiler_temp;
    }
    function logRecoverableError(request, error, errorInfo) {
      request = request.onError(error, errorInfo);
      if (null == request || "string" === typeof request)
        return request;
    }
    function fatalError(request, error) {
      var onShellError = request.onShellError;
      onShellError(error);
      onShellError = request.onFatalError;
      onShellError(error);
      null !== request.destination ? (request.status = 2, request.destination.destroy(error)) : (request.status = 1, request.fatalError = error);
    }
    function renderWithHooks(request, task, keyPath, Component, props, secondArg) {
      var prevThenableState = task.thenableState;
      task.thenableState = null;
      currentlyRenderingComponent = {};
      currentlyRenderingTask = task;
      currentlyRenderingRequest = request;
      currentlyRenderingKeyPath = keyPath;
      actionStateCounter = localIdCounter = 0;
      actionStateMatchingIndex = -1;
      thenableIndexCounter = 0;
      thenableState = prevThenableState;
      for (request = Component(props, secondArg); didScheduleRenderPhaseUpdate; )
        didScheduleRenderPhaseUpdate = false, actionStateCounter = localIdCounter = 0, actionStateMatchingIndex = -1, thenableIndexCounter = 0, numberOfReRenders += 1, workInProgressHook = null, request = Component(props, secondArg);
      resetHooksState();
      return request;
    }
    function finishFunctionComponent(request, task, keyPath, children, hasId, actionStateCount, actionStateMatchingIndex2) {
      var didEmitActionStateMarkers = false;
      if (0 !== actionStateCount && null !== request.formState) {
        var segment = task.blockedSegment;
        if (null !== segment) {
          didEmitActionStateMarkers = true;
          segment = segment.chunks;
          for (var i = 0; i < actionStateCount; i++)
            i === actionStateMatchingIndex2 ? segment.push(formStateMarkerIsMatching) : segment.push(formStateMarkerIsNotMatching);
        }
      }
      actionStateCount = task.keyPath;
      task.keyPath = keyPath;
      hasId ? (keyPath = task.treeContext, task.treeContext = pushTreeContext(keyPath, 1, 0), renderNode(request, task, children, -1), task.treeContext = keyPath) : didEmitActionStateMarkers ? renderNode(request, task, children, -1) : renderNodeDestructive(request, task, children, -1);
      task.keyPath = actionStateCount;
    }
    function renderElement(request, task, keyPath, type, props, ref) {
      if ("function" === typeof type)
        if (type.prototype && type.prototype.isReactComponent) {
          var JSCompiler_inline_result = props;
          if ("ref" in props) {
            JSCompiler_inline_result = {};
            for (var propName in props)
              "ref" !== propName && (JSCompiler_inline_result[propName] = props[propName]);
          }
          var defaultProps = type.defaultProps;
          if (defaultProps) {
            JSCompiler_inline_result === props && (JSCompiler_inline_result = assign(
              {},
              JSCompiler_inline_result,
              props
            ));
            for (var propName$32 in defaultProps)
              void 0 === JSCompiler_inline_result[propName$32] && (JSCompiler_inline_result[propName$32] = defaultProps[propName$32]);
          }
          props = task.componentStack;
          task.componentStack = { tag: 2, parent: task.componentStack, type };
          defaultProps = emptyContextObject;
          ref = type.contextType;
          "object" === typeof ref && null !== ref && (defaultProps = ref._currentValue);
          defaultProps = new type(JSCompiler_inline_result, defaultProps);
          propName$32 = void 0 !== defaultProps.state ? defaultProps.state : null;
          defaultProps.updater = classComponentUpdater;
          defaultProps.props = JSCompiler_inline_result;
          defaultProps.state = propName$32;
          ref = { queue: [], replace: false };
          defaultProps._reactInternals = ref;
          var contextType = type.contextType;
          defaultProps.context = "object" === typeof contextType && null !== contextType ? contextType._currentValue : emptyContextObject;
          contextType = type.getDerivedStateFromProps;
          "function" === typeof contextType && (contextType = contextType(JSCompiler_inline_result, propName$32), propName$32 = null === contextType || void 0 === contextType ? propName$32 : assign({}, propName$32, contextType), defaultProps.state = propName$32);
          if ("function" !== typeof type.getDerivedStateFromProps && "function" !== typeof defaultProps.getSnapshotBeforeUpdate && ("function" === typeof defaultProps.UNSAFE_componentWillMount || "function" === typeof defaultProps.componentWillMount))
            if (type = defaultProps.state, "function" === typeof defaultProps.componentWillMount && defaultProps.componentWillMount(), "function" === typeof defaultProps.UNSAFE_componentWillMount && defaultProps.UNSAFE_componentWillMount(), type !== defaultProps.state && classComponentUpdater.enqueueReplaceState(
              defaultProps,
              defaultProps.state,
              null
            ), null !== ref.queue && 0 < ref.queue.length)
              if (type = ref.queue, contextType = ref.replace, ref.queue = null, ref.replace = false, contextType && 1 === type.length)
                defaultProps.state = type[0];
              else {
                ref = contextType ? type[0] : defaultProps.state;
                propName$32 = true;
                for (contextType = contextType ? 1 : 0; contextType < type.length; contextType++)
                  propName = type[contextType], propName = "function" === typeof propName ? propName.call(
                    defaultProps,
                    ref,
                    JSCompiler_inline_result,
                    void 0
                  ) : propName, null != propName && (propName$32 ? (propName$32 = false, ref = assign({}, ref, propName)) : assign(ref, propName));
                defaultProps.state = ref;
              }
            else
              ref.queue = null;
          type = defaultProps.render();
          JSCompiler_inline_result = task.keyPath;
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, type, -1);
          task.keyPath = JSCompiler_inline_result;
          task.componentStack = props;
        } else
          JSCompiler_inline_result = task.componentStack, task.componentStack = {
            tag: 1,
            parent: task.componentStack,
            type
          }, type = renderWithHooks(request, task, keyPath, type, props, void 0), finishFunctionComponent(
            request,
            task,
            keyPath,
            type,
            0 !== localIdCounter,
            actionStateCounter,
            actionStateMatchingIndex
          ), task.componentStack = JSCompiler_inline_result;
      else if ("string" === typeof type) {
        JSCompiler_inline_result = task.componentStack;
        task.componentStack = createBuiltInComponentStack(task, type);
        defaultProps = task.blockedSegment;
        if (null === defaultProps)
          defaultProps = props.children, ref = task.formatContext, propName$32 = task.keyPath, task.formatContext = getChildFormatContext(ref, type, props), task.keyPath = keyPath, renderNode(request, task, defaultProps, -1), task.formatContext = ref, task.keyPath = propName$32;
        else {
          propName$32 = pushStartInstance(
            defaultProps.chunks,
            type,
            props,
            request.resumableState,
            request.renderState,
            task.hoistableState,
            task.formatContext,
            defaultProps.lastPushedText,
            task.isFallback
          );
          defaultProps.lastPushedText = false;
          ref = task.formatContext;
          contextType = task.keyPath;
          task.formatContext = getChildFormatContext(ref, type, props);
          task.keyPath = keyPath;
          renderNode(request, task, propName$32, -1);
          task.formatContext = ref;
          task.keyPath = contextType;
          a: {
            keyPath = defaultProps.chunks;
            request = request.resumableState;
            switch (type) {
              case "title":
              case "style":
              case "script":
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "input":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr":
                break a;
              case "body":
                if (1 >= ref.insertionMode) {
                  request.hasBody = true;
                  break a;
                }
                break;
              case "html":
                if (0 === ref.insertionMode) {
                  request.hasHtml = true;
                  break a;
                }
            }
            keyPath.push(endChunkForTag(type));
          }
          defaultProps.lastPushedText = false;
        }
        task.componentStack = JSCompiler_inline_result;
      } else {
        switch (type) {
          case REACT_LEGACY_HIDDEN_TYPE:
          case REACT_DEBUG_TRACING_MODE_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_FRAGMENT_TYPE:
            type = task.keyPath;
            task.keyPath = keyPath;
            renderNodeDestructive(request, task, props.children, -1);
            task.keyPath = type;
            return;
          case REACT_OFFSCREEN_TYPE:
            "hidden" !== props.mode && (type = task.keyPath, task.keyPath = keyPath, renderNodeDestructive(request, task, props.children, -1), task.keyPath = type);
            return;
          case REACT_SUSPENSE_LIST_TYPE:
            type = task.componentStack;
            task.componentStack = createBuiltInComponentStack(task, "SuspenseList");
            JSCompiler_inline_result = task.keyPath;
            task.keyPath = keyPath;
            renderNodeDestructive(request, task, props.children, -1);
            task.keyPath = JSCompiler_inline_result;
            task.componentStack = type;
            return;
          case REACT_SCOPE_TYPE:
            throw Error("ReactDOMServer does not yet support scope components.");
          case REACT_SUSPENSE_TYPE:
            a:
              if (null !== task.replay) {
                type = task.keyPath;
                task.keyPath = keyPath;
                keyPath = props.children;
                try {
                  renderNode(request, task, keyPath, -1);
                } finally {
                  task.keyPath = type;
                }
              } else {
                var previousComponentStack = task.componentStack;
                type = task.componentStack = createBuiltInComponentStack(
                  task,
                  "Suspense"
                );
                var prevKeyPath = task.keyPath;
                ref = task.blockedBoundary;
                var parentHoistableState = task.hoistableState, parentSegment = task.blockedSegment;
                propName$32 = props.fallback;
                var content = props.children;
                props = /* @__PURE__ */ new Set();
                contextType = createSuspenseBoundary(request, props);
                null !== request.trackedPostpones && (contextType.trackedContentKeyPath = keyPath);
                propName = createPendingSegment(
                  request,
                  parentSegment.chunks.length,
                  contextType,
                  task.formatContext,
                  false,
                  false
                );
                parentSegment.children.push(propName);
                parentSegment.lastPushedText = false;
                var contentRootSegment = createPendingSegment(
                  request,
                  0,
                  null,
                  task.formatContext,
                  false,
                  false
                );
                contentRootSegment.parentFlushed = true;
                task.blockedBoundary = contextType;
                task.hoistableState = contextType.contentState;
                task.blockedSegment = contentRootSegment;
                task.keyPath = keyPath;
                try {
                  if (renderNode(request, task, content, -1), contentRootSegment.lastPushedText && contentRootSegment.textEmbedded && contentRootSegment.chunks.push(textSeparator), contentRootSegment.status = 1, queueCompletedSegment(contextType, contentRootSegment), 0 === contextType.pendingTasks && 0 === contextType.status) {
                    contextType.status = 1;
                    task.componentStack = previousComponentStack;
                    break a;
                  }
                } catch (error) {
                  contentRootSegment.status = 4, contextType.status = 4, JSCompiler_inline_result = getThrownInfo(
                    request,
                    task.componentStack
                  ), "object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(error.message, JSCompiler_inline_result), defaultProps = "POSTPONE") : defaultProps = logRecoverableError(
                    request,
                    error,
                    JSCompiler_inline_result
                  ), contextType.errorDigest = defaultProps, untrackBoundary(request, contextType);
                } finally {
                  task.blockedBoundary = ref, task.hoistableState = parentHoistableState, task.blockedSegment = parentSegment, task.keyPath = prevKeyPath, task.componentStack = previousComponentStack;
                }
                JSCompiler_inline_result = [
                  keyPath[0],
                  "Suspense Fallback",
                  keyPath[2]
                ];
                defaultProps = request.trackedPostpones;
                null !== defaultProps && (previousComponentStack = [
                  JSCompiler_inline_result[1],
                  JSCompiler_inline_result[2],
                  [],
                  null
                ], defaultProps.workingMap.set(
                  JSCompiler_inline_result,
                  previousComponentStack
                ), 5 === contextType.status ? defaultProps.workingMap.get(keyPath)[4] = previousComponentStack : contextType.trackedFallbackNode = previousComponentStack);
                task = createRenderTask(
                  request,
                  null,
                  propName$32,
                  -1,
                  ref,
                  propName,
                  contextType.fallbackState,
                  props,
                  JSCompiler_inline_result,
                  task.formatContext,
                  task.legacyContext,
                  task.context,
                  task.treeContext,
                  type,
                  true
                );
                request.pingedTasks.push(task);
              }
            return;
        }
        if ("object" === typeof type && null !== type)
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              JSCompiler_inline_result = task.componentStack;
              task.componentStack = {
                tag: 1,
                parent: task.componentStack,
                type: type.render
              };
              if ("ref" in props)
                for (contextType in defaultProps = {}, props)
                  "ref" !== contextType && (defaultProps[contextType] = props[contextType]);
              else
                defaultProps = props;
              type = renderWithHooks(
                request,
                task,
                keyPath,
                type.render,
                defaultProps,
                ref
              );
              finishFunctionComponent(
                request,
                task,
                keyPath,
                type,
                0 !== localIdCounter,
                actionStateCounter,
                actionStateMatchingIndex
              );
              task.componentStack = JSCompiler_inline_result;
              return;
            case REACT_MEMO_TYPE:
              renderElement(request, task, keyPath, type.type, props, ref);
              return;
            case REACT_PROVIDER_TYPE:
            case REACT_CONTEXT_TYPE:
              defaultProps = props.children;
              JSCompiler_inline_result = task.keyPath;
              props = props.value;
              ref = type._currentValue;
              type._currentValue = props;
              propName$32 = currentActiveSnapshot;
              currentActiveSnapshot = type = {
                parent: propName$32,
                depth: null === propName$32 ? 0 : propName$32.depth + 1,
                context: type,
                parentValue: ref,
                value: props
              };
              task.context = type;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, defaultProps, -1);
              request = currentActiveSnapshot;
              if (null === request)
                throw Error(
                  "Tried to pop a Context at the root of the app. This is a bug in React."
                );
              request.context._currentValue = request.parentValue;
              request = currentActiveSnapshot = request.parent;
              task.context = request;
              task.keyPath = JSCompiler_inline_result;
              return;
            case REACT_CONSUMER_TYPE:
              props = props.children;
              type = props(type._context._currentValue);
              props = task.keyPath;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, type, -1);
              task.keyPath = props;
              return;
            case REACT_LAZY_TYPE:
              JSCompiler_inline_result = task.componentStack;
              task.componentStack = createBuiltInComponentStack(task, "Lazy");
              defaultProps = type._init;
              type = defaultProps(type._payload);
              renderElement(request, task, keyPath, type, props, void 0);
              task.componentStack = JSCompiler_inline_result;
              return;
          }
        throw Error(
          "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((null == type ? type : typeof type) + ".")
        );
      }
    }
    function resumeNode(request, task, segmentId, node, childIndex) {
      var prevReplay = task.replay, blockedBoundary = task.blockedBoundary, resumedSegment = createPendingSegment(
        request,
        0,
        null,
        task.formatContext,
        false,
        false
      );
      resumedSegment.id = segmentId;
      resumedSegment.parentFlushed = true;
      try {
        task.replay = null, task.blockedSegment = resumedSegment, renderNode(request, task, node, childIndex), resumedSegment.status = 1, null === blockedBoundary ? request.completedRootSegment = resumedSegment : (queueCompletedSegment(blockedBoundary, resumedSegment), blockedBoundary.parentFlushed && request.partialBoundaries.push(blockedBoundary));
      } finally {
        task.replay = prevReplay, task.blockedSegment = null;
      }
    }
    function renderNodeDestructive(request, task, node$jscomp$0, childIndex) {
      if (null !== task.replay && "number" === typeof task.replay.slots)
        resumeNode(request, task, task.replay.slots, node$jscomp$0, childIndex);
      else if (task.node = node$jscomp$0, task.childIndex = childIndex, null !== node$jscomp$0) {
        if ("object" === typeof node$jscomp$0) {
          switch (node$jscomp$0.$$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = node$jscomp$0.type, key = node$jscomp$0.key, props = node$jscomp$0.props;
              node$jscomp$0 = props.ref;
              var ref = void 0 !== node$jscomp$0 ? node$jscomp$0 : null;
              var name = getComponentNameFromType(type), keyOrIndex = null == key ? -1 === childIndex ? 0 : childIndex : key;
              key = [task.keyPath, name, keyOrIndex];
              if (null !== task.replay)
                a: {
                  var replay = task.replay;
                  childIndex = replay.nodes;
                  for (node$jscomp$0 = 0; node$jscomp$0 < childIndex.length; node$jscomp$0++) {
                    var node = childIndex[node$jscomp$0];
                    if (keyOrIndex === node[1]) {
                      if (4 === node.length) {
                        if (null !== name && name !== node[0])
                          throw Error(
                            "Expected the resume to render <" + node[0] + "> in this slot but instead it rendered <" + name + ">. The tree doesn't match so React will fallback to client rendering."
                          );
                        var childNodes = node[2];
                        name = node[3];
                        keyOrIndex = task.node;
                        task.replay = {
                          nodes: childNodes,
                          slots: name,
                          pendingTasks: 1
                        };
                        try {
                          renderElement(request, task, key, type, props, ref);
                          if (1 === task.replay.pendingTasks && 0 < task.replay.nodes.length)
                            throw Error(
                              "Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering."
                            );
                          task.replay.pendingTasks--;
                        } catch (x) {
                          if ("object" === typeof x && null !== x && (x === SuspenseException || "function" === typeof x.then))
                            throw task.node === keyOrIndex && (task.replay = replay), x;
                          task.replay.pendingTasks--;
                          props = getThrownInfo(request, task.componentStack);
                          erroredReplay(
                            request,
                            task.blockedBoundary,
                            x,
                            props,
                            childNodes,
                            name
                          );
                        }
                        task.replay = replay;
                      } else {
                        if (type !== REACT_SUSPENSE_TYPE)
                          throw Error(
                            "Expected the resume to render <Suspense> in this slot but instead it rendered <" + (getComponentNameFromType(type) || "Unknown") + ">. The tree doesn't match so React will fallback to client rendering."
                          );
                        b: {
                          type = void 0;
                          ref = node[5];
                          replay = node[2];
                          name = node[3];
                          keyOrIndex = null === node[4] ? [] : node[4][2];
                          node = null === node[4] ? null : node[4][3];
                          var previousComponentStack = task.componentStack, suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, "Suspense"), prevKeyPath = task.keyPath, previousReplaySet = task.replay, parentBoundary = task.blockedBoundary, parentHoistableState = task.hoistableState, content = props.children;
                          props = props.fallback;
                          var fallbackAbortSet = /* @__PURE__ */ new Set(), resumedBoundary = createSuspenseBoundary(
                            request,
                            fallbackAbortSet
                          );
                          resumedBoundary.parentFlushed = true;
                          resumedBoundary.rootSegmentID = ref;
                          task.blockedBoundary = resumedBoundary;
                          task.hoistableState = resumedBoundary.contentState;
                          task.replay = {
                            nodes: replay,
                            slots: name,
                            pendingTasks: 1
                          };
                          try {
                            renderNode(request, task, content, -1);
                            if (1 === task.replay.pendingTasks && 0 < task.replay.nodes.length)
                              throw Error(
                                "Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering."
                              );
                            task.replay.pendingTasks--;
                            if (0 === resumedBoundary.pendingTasks && 0 === resumedBoundary.status) {
                              resumedBoundary.status = 1;
                              request.completedBoundaries.push(resumedBoundary);
                              break b;
                            }
                          } catch (error) {
                            resumedBoundary.status = 4, childNodes = getThrownInfo(
                              request,
                              task.componentStack
                            ), "object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(error.message, childNodes), type = "POSTPONE") : type = logRecoverableError(
                              request,
                              error,
                              childNodes
                            ), resumedBoundary.errorDigest = type, task.replay.pendingTasks--, request.clientRenderedBoundaries.push(
                              resumedBoundary
                            );
                          } finally {
                            task.blockedBoundary = parentBoundary, task.hoistableState = parentHoistableState, task.replay = previousReplaySet, task.keyPath = prevKeyPath, task.componentStack = previousComponentStack;
                          }
                          task = createReplayTask(
                            request,
                            null,
                            { nodes: keyOrIndex, slots: node, pendingTasks: 0 },
                            props,
                            -1,
                            parentBoundary,
                            resumedBoundary.fallbackState,
                            fallbackAbortSet,
                            [key[0], "Suspense Fallback", key[2]],
                            task.formatContext,
                            task.legacyContext,
                            task.context,
                            task.treeContext,
                            suspenseComponentStack,
                            true
                          );
                          request.pingedTasks.push(task);
                        }
                      }
                      childIndex.splice(node$jscomp$0, 1);
                      break a;
                    }
                  }
                }
              else
                renderElement(request, task, key, type, props, ref);
              return;
            case REACT_PORTAL_TYPE:
              throw Error(
                "Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render."
              );
            case REACT_LAZY_TYPE:
              childNodes = task.componentStack;
              task.componentStack = createBuiltInComponentStack(task, "Lazy");
              props = node$jscomp$0._init;
              node$jscomp$0 = props(node$jscomp$0._payload);
              task.componentStack = childNodes;
              renderNodeDestructive(request, task, node$jscomp$0, childIndex);
              return;
          }
          if (isArrayImpl(node$jscomp$0)) {
            renderChildrenArray(request, task, node$jscomp$0, childIndex);
            return;
          }
          null === node$jscomp$0 || "object" !== typeof node$jscomp$0 ? childNodes = null : (childNodes = MAYBE_ITERATOR_SYMBOL && node$jscomp$0[MAYBE_ITERATOR_SYMBOL] || node$jscomp$0["@@iterator"], childNodes = "function" === typeof childNodes ? childNodes : null);
          if (childNodes && (childNodes = childNodes.call(node$jscomp$0))) {
            node$jscomp$0 = childNodes.next();
            if (!node$jscomp$0.done) {
              props = [];
              do
                props.push(node$jscomp$0.value), node$jscomp$0 = childNodes.next();
              while (!node$jscomp$0.done);
              renderChildrenArray(request, task, props, childIndex);
            }
            return;
          }
          if ("function" === typeof node$jscomp$0[ASYNC_ITERATOR] && (childNodes = node$jscomp$0[ASYNC_ITERATOR]())) {
            props = task.componentStack;
            task.componentStack = createBuiltInComponentStack(
              task,
              "AsyncIterable"
            );
            key = task.thenableState;
            task.thenableState = null;
            thenableIndexCounter = 0;
            thenableState = key;
            key = [];
            type = false;
            if (childNodes === node$jscomp$0)
              for (node$jscomp$0 = readPreviousThenableFromState(); void 0 !== node$jscomp$0; ) {
                if (node$jscomp$0.done) {
                  type = true;
                  break;
                }
                key.push(node$jscomp$0.value);
                node$jscomp$0 = readPreviousThenableFromState();
              }
            if (!type)
              for (node$jscomp$0 = unwrapThenable(childNodes.next()); !node$jscomp$0.done; )
                key.push(node$jscomp$0.value), node$jscomp$0 = unwrapThenable(childNodes.next());
            task.componentStack = props;
            renderChildrenArray(request, task, key, childIndex);
            return;
          }
          if ("function" === typeof node$jscomp$0.then)
            return task.thenableState = null, renderNodeDestructive(
              request,
              task,
              unwrapThenable(node$jscomp$0),
              childIndex
            );
          if (node$jscomp$0.$$typeof === REACT_CONTEXT_TYPE)
            return renderNodeDestructive(
              request,
              task,
              node$jscomp$0._currentValue,
              childIndex
            );
          request = Object.prototype.toString.call(node$jscomp$0);
          throw Error(
            "Objects are not valid as a React child (found: " + ("[object Object]" === request ? "object with keys {" + Object.keys(node$jscomp$0).join(", ") + "}" : request) + "). If you meant to render a collection of children, use an array instead."
          );
        }
        if ("string" === typeof node$jscomp$0)
          task = task.blockedSegment, null !== task && (task.lastPushedText = pushTextInstance(
            task.chunks,
            node$jscomp$0,
            request.renderState,
            task.lastPushedText
          ));
        else if ("number" === typeof node$jscomp$0 || "bigint" === typeof node$jscomp$0)
          task = task.blockedSegment, null !== task && (task.lastPushedText = pushTextInstance(
            task.chunks,
            "" + node$jscomp$0,
            request.renderState,
            task.lastPushedText
          ));
      }
    }
    function renderChildrenArray(request, task, children, childIndex) {
      var prevKeyPath = task.keyPath;
      if (-1 !== childIndex && (task.keyPath = [task.keyPath, "Fragment", childIndex], null !== task.replay)) {
        for (var replay = task.replay, replayNodes = replay.nodes, j = 0; j < replayNodes.length; j++) {
          var node = replayNodes[j];
          if (node[1] === childIndex) {
            childIndex = node[2];
            node = node[3];
            task.replay = { nodes: childIndex, slots: node, pendingTasks: 1 };
            try {
              renderChildrenArray(request, task, children, -1);
              if (1 === task.replay.pendingTasks && 0 < task.replay.nodes.length)
                throw Error(
                  "Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering."
                );
              task.replay.pendingTasks--;
            } catch (x) {
              if ("object" === typeof x && null !== x && (x === SuspenseException || "function" === typeof x.then))
                throw x;
              task.replay.pendingTasks--;
              children = getThrownInfo(request, task.componentStack);
              erroredReplay(
                request,
                task.blockedBoundary,
                x,
                children,
                childIndex,
                node
              );
            }
            task.replay = replay;
            replayNodes.splice(j, 1);
            break;
          }
        }
        task.keyPath = prevKeyPath;
        return;
      }
      replay = task.treeContext;
      replayNodes = children.length;
      if (null !== task.replay && (j = task.replay.slots, null !== j && "object" === typeof j)) {
        for (childIndex = 0; childIndex < replayNodes; childIndex++) {
          node = children[childIndex];
          task.treeContext = pushTreeContext(replay, replayNodes, childIndex);
          var resumeSegmentID = j[childIndex];
          "number" === typeof resumeSegmentID ? (resumeNode(request, task, resumeSegmentID, node, childIndex), delete j[childIndex]) : renderNode(request, task, node, childIndex);
        }
        task.treeContext = replay;
        task.keyPath = prevKeyPath;
        return;
      }
      for (j = 0; j < replayNodes; j++)
        childIndex = children[j], task.treeContext = pushTreeContext(replay, replayNodes, j), renderNode(request, task, childIndex, j);
      task.treeContext = replay;
      task.keyPath = prevKeyPath;
    }
    function trackPostpone(request, trackedPostpones, task, segment) {
      segment.status = 5;
      var keyPath = task.keyPath, boundary = task.blockedBoundary;
      if (null === boundary)
        segment.id = request.nextSegmentId++, trackedPostpones.rootSlots = segment.id, null !== request.completedRootSegment && (request.completedRootSegment.status = 5);
      else {
        if (null !== boundary && 0 === boundary.status) {
          boundary.status = 5;
          boundary.rootSegmentID = request.nextSegmentId++;
          var boundaryKeyPath = boundary.trackedContentKeyPath;
          if (null === boundaryKeyPath)
            throw Error(
              "It should not be possible to postpone at the root. This is a bug in React."
            );
          var fallbackReplayNode = boundary.trackedFallbackNode, children = [];
          if (boundaryKeyPath === keyPath && -1 === task.childIndex) {
            -1 === segment.id && (segment.id = segment.parentFlushed ? boundary.rootSegmentID : request.nextSegmentId++);
            segment = [
              boundaryKeyPath[1],
              boundaryKeyPath[2],
              children,
              segment.id,
              fallbackReplayNode,
              boundary.rootSegmentID
            ];
            trackedPostpones.workingMap.set(boundaryKeyPath, segment);
            addToReplayParent(segment, boundaryKeyPath[0], trackedPostpones);
            return;
          }
          var boundaryNode$43 = trackedPostpones.workingMap.get(boundaryKeyPath);
          void 0 === boundaryNode$43 ? (boundaryNode$43 = [
            boundaryKeyPath[1],
            boundaryKeyPath[2],
            children,
            null,
            fallbackReplayNode,
            boundary.rootSegmentID
          ], trackedPostpones.workingMap.set(boundaryKeyPath, boundaryNode$43), addToReplayParent(
            boundaryNode$43,
            boundaryKeyPath[0],
            trackedPostpones
          )) : (boundaryKeyPath = boundaryNode$43, boundaryKeyPath[4] = fallbackReplayNode, boundaryKeyPath[5] = boundary.rootSegmentID);
        }
        -1 === segment.id && (segment.id = segment.parentFlushed && null !== boundary ? boundary.rootSegmentID : request.nextSegmentId++);
        if (-1 === task.childIndex)
          null === keyPath ? trackedPostpones.rootSlots = segment.id : (task = trackedPostpones.workingMap.get(keyPath), void 0 === task ? (task = [keyPath[1], keyPath[2], [], segment.id], addToReplayParent(task, keyPath[0], trackedPostpones)) : task[3] = segment.id);
        else {
          if (null === keyPath)
            if (request = trackedPostpones.rootSlots, null === request)
              request = trackedPostpones.rootSlots = {};
            else {
              if ("number" === typeof request)
                throw Error(
                  "It should not be possible to postpone both at the root of an element as well as a slot below. This is a bug in React."
                );
            }
          else if (boundary = trackedPostpones.workingMap, boundaryKeyPath = boundary.get(keyPath), void 0 === boundaryKeyPath)
            request = {}, boundaryKeyPath = [keyPath[1], keyPath[2], [], request], boundary.set(keyPath, boundaryKeyPath), addToReplayParent(boundaryKeyPath, keyPath[0], trackedPostpones);
          else if (request = boundaryKeyPath[3], null === request)
            request = boundaryKeyPath[3] = {};
          else if ("number" === typeof request)
            throw Error(
              "It should not be possible to postpone both at the root of an element as well as a slot below. This is a bug in React."
            );
          request[task.childIndex] = segment.id;
        }
      }
    }
    function untrackBoundary(request, boundary) {
      request = request.trackedPostpones;
      null !== request && (boundary = boundary.trackedContentKeyPath, null !== boundary && (boundary = request.workingMap.get(boundary), void 0 !== boundary && (boundary.length = 4, boundary[2] = [], boundary[3] = null)));
    }
    function renderNode(request, task, node, childIndex) {
      var previousFormatContext = task.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context, previousKeyPath = task.keyPath, previousTreeContext = task.treeContext, previousComponentStack = task.componentStack, segment = task.blockedSegment;
      if (null === segment)
        try {
          return renderNodeDestructive(request, task, node, childIndex);
        } catch (thrownValue) {
          if (resetHooksState(), childIndex = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue, "object" === typeof childIndex && null !== childIndex && "function" === typeof childIndex.then) {
            node = childIndex;
            childIndex = getThenableStateAfterSuspending();
            request = createReplayTask(
              request,
              childIndex,
              task.replay,
              task.node,
              task.childIndex,
              task.blockedBoundary,
              task.hoistableState,
              task.abortSet,
              task.keyPath,
              task.formatContext,
              task.legacyContext,
              task.context,
              task.treeContext,
              null !== task.componentStack ? task.componentStack.parent : null,
              task.isFallback
            ).ping;
            node.then(request, request);
            task.formatContext = previousFormatContext;
            task.legacyContext = previousLegacyContext;
            task.context = previousContext;
            task.keyPath = previousKeyPath;
            task.treeContext = previousTreeContext;
            task.componentStack = previousComponentStack;
            switchContext(previousContext);
            return;
          }
        }
      else {
        var childrenLength = segment.children.length, chunkLength = segment.chunks.length;
        try {
          return renderNodeDestructive(request, task, node, childIndex);
        } catch (thrownValue$49) {
          if (resetHooksState(), segment.children.length = childrenLength, segment.chunks.length = chunkLength, childIndex = thrownValue$49 === SuspenseException ? getSuspendedThenable() : thrownValue$49, "object" === typeof childIndex && null !== childIndex) {
            if ("function" === typeof childIndex.then) {
              node = childIndex;
              childIndex = getThenableStateAfterSuspending();
              segment = task.blockedSegment;
              childrenLength = createPendingSegment(
                request,
                segment.chunks.length,
                null,
                task.formatContext,
                segment.lastPushedText,
                true
              );
              segment.children.push(childrenLength);
              segment.lastPushedText = false;
              request = createRenderTask(
                request,
                childIndex,
                task.node,
                task.childIndex,
                task.blockedBoundary,
                childrenLength,
                task.hoistableState,
                task.abortSet,
                task.keyPath,
                task.formatContext,
                task.legacyContext,
                task.context,
                task.treeContext,
                null !== task.componentStack ? task.componentStack.parent : null,
                task.isFallback
              ).ping;
              node.then(request, request);
              task.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              task.keyPath = previousKeyPath;
              task.treeContext = previousTreeContext;
              task.componentStack = previousComponentStack;
              switchContext(previousContext);
              return;
            }
            if (childIndex.$$typeof === REACT_POSTPONE_TYPE && null !== request.trackedPostpones && null !== task.blockedBoundary) {
              node = request.trackedPostpones;
              segment = getThrownInfo(request, task.componentStack);
              request.onPostpone(childIndex.message, segment);
              childIndex = task.blockedSegment;
              segment = createPendingSegment(
                request,
                childIndex.chunks.length,
                null,
                task.formatContext,
                childIndex.lastPushedText,
                true
              );
              childIndex.children.push(segment);
              childIndex.lastPushedText = false;
              trackPostpone(request, node, task, segment);
              task.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              task.keyPath = previousKeyPath;
              task.treeContext = previousTreeContext;
              task.componentStack = previousComponentStack;
              switchContext(previousContext);
              return;
            }
          }
        }
      }
      task.formatContext = previousFormatContext;
      task.legacyContext = previousLegacyContext;
      task.context = previousContext;
      task.keyPath = previousKeyPath;
      task.treeContext = previousTreeContext;
      switchContext(previousContext);
      throw childIndex;
    }
    function erroredReplay(request, boundary, error, errorInfo, replayNodes, resumeSlots) {
      "object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(error.message, errorInfo), errorInfo = "POSTPONE") : errorInfo = logRecoverableError(request, error, errorInfo);
      abortRemainingReplayNodes(
        request,
        boundary,
        replayNodes,
        resumeSlots,
        error,
        errorInfo
      );
    }
    function abortTaskSoft(task) {
      var boundary = task.blockedBoundary;
      task = task.blockedSegment;
      null !== task && (task.status = 3, finishedTask(this, boundary, task));
    }
    function abortRemainingReplayNodes(request$jscomp$0, boundary, nodes, slots, error, errorDigest$jscomp$0) {
      for (var i = 0; i < nodes.length; i++) {
        var node = nodes[i];
        if (4 === node.length)
          abortRemainingReplayNodes(
            request$jscomp$0,
            boundary,
            node[2],
            node[3],
            error,
            errorDigest$jscomp$0
          );
        else {
          node = node[5];
          var request = request$jscomp$0, errorDigest = errorDigest$jscomp$0, resumedBoundary = createSuspenseBoundary(request, /* @__PURE__ */ new Set());
          resumedBoundary.parentFlushed = true;
          resumedBoundary.rootSegmentID = node;
          resumedBoundary.status = 4;
          resumedBoundary.errorDigest = errorDigest;
          resumedBoundary.parentFlushed && request.clientRenderedBoundaries.push(resumedBoundary);
        }
      }
      nodes.length = 0;
      if (null !== slots) {
        if (null === boundary)
          throw Error(
            "We should not have any resumable nodes in the shell. This is a bug in React."
          );
        4 !== boundary.status && (boundary.status = 4, boundary.errorDigest = errorDigest$jscomp$0, boundary.parentFlushed && request$jscomp$0.clientRenderedBoundaries.push(boundary));
        if ("object" === typeof slots)
          for (var index in slots)
            delete slots[index];
      }
    }
    function abortTask(task, request, error) {
      var boundary = task.blockedBoundary, segment = task.blockedSegment;
      null !== segment && (segment.status = 3);
      if (null === boundary) {
        if (boundary = {}, 1 !== request.status && 2 !== request.status) {
          task = task.replay;
          if (null === task) {
            "object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (task = Error(
              "The render was aborted with postpone when the shell is incomplete. Reason: " + error.message
            ), logRecoverableError(request, task, boundary), fatalError(request, task)) : (logRecoverableError(request, error, boundary), fatalError(request, error));
            return;
          }
          task.pendingTasks--;
          0 === task.pendingTasks && 0 < task.nodes.length && ("object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(error.message, boundary), boundary = "POSTPONE") : boundary = logRecoverableError(request, error, boundary), abortRemainingReplayNodes(
            request,
            null,
            task.nodes,
            task.slots,
            error,
            boundary
          ));
          request.pendingRootTasks--;
          0 === request.pendingRootTasks && completeShell(request);
        }
      } else
        boundary.pendingTasks--, 4 !== boundary.status && (boundary.status = 4, task = getThrownInfo(request, task.componentStack), "object" === typeof error && null !== error && error.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(error.message, task), task = "POSTPONE") : task = logRecoverableError(request, error, task), boundary.errorDigest = task, untrackBoundary(request, boundary), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary)), boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
          return abortTask(fallbackTask, request, error);
        }), boundary.fallbackAbortableTasks.clear();
      request.allPendingTasks--;
      0 === request.allPendingTasks && completeAll(request);
    }
    function safelyEmitEarlyPreloads(request, shellComplete) {
      try {
        var renderState = request.renderState, onHeaders = renderState.onHeaders;
        if (onHeaders) {
          var headers = renderState.headers;
          if (headers) {
            renderState.headers = null;
            var linkHeader = headers.preconnects;
            headers.fontPreloads && (linkHeader && (linkHeader += ", "), linkHeader += headers.fontPreloads);
            headers.highImagePreloads && (linkHeader && (linkHeader += ", "), linkHeader += headers.highImagePreloads);
            if (!shellComplete) {
              var queueIter = renderState.styles.values(), queueStep = queueIter.next();
              b:
                for (; 0 < headers.remainingCapacity && !queueStep.done; queueStep = queueIter.next())
                  for (var sheetIter = queueStep.value.sheets.values(), sheetStep = sheetIter.next(); 0 < headers.remainingCapacity && !sheetStep.done; sheetStep = sheetIter.next()) {
                    var sheet = sheetStep.value, props = sheet.props, key = props.href, props$jscomp$0 = sheet.props, header = getPreloadAsHeader(props$jscomp$0.href, "style", {
                      crossOrigin: props$jscomp$0.crossOrigin,
                      integrity: props$jscomp$0.integrity,
                      nonce: props$jscomp$0.nonce,
                      type: props$jscomp$0.type,
                      fetchPriority: props$jscomp$0.fetchPriority,
                      referrerPolicy: props$jscomp$0.referrerPolicy,
                      media: props$jscomp$0.media
                    });
                    if (2 <= (headers.remainingCapacity -= header.length))
                      renderState.resets.style[key] = PRELOAD_NO_CREDS, linkHeader && (linkHeader += ", "), linkHeader += header, renderState.resets.style[key] = "string" === typeof props.crossOrigin || "string" === typeof props.integrity ? [props.crossOrigin, props.integrity] : PRELOAD_NO_CREDS;
                    else
                      break b;
                  }
            }
            linkHeader ? onHeaders({ Link: linkHeader }) : onHeaders({});
          }
        }
      } catch (error) {
        logRecoverableError(request, error, {});
      }
    }
    function completeShell(request) {
      null === request.trackedPostpones && safelyEmitEarlyPreloads(request, true);
      request.onShellError = noop;
      request = request.onShellReady;
      request();
    }
    function completeAll(request) {
      safelyEmitEarlyPreloads(
        request,
        null === request.trackedPostpones ? true : null === request.completedRootSegment || 5 !== request.completedRootSegment.status
      );
      request = request.onAllReady;
      request();
    }
    function queueCompletedSegment(boundary, segment) {
      if (0 === segment.chunks.length && 1 === segment.children.length && null === segment.children[0].boundary && -1 === segment.children[0].id) {
        var childSegment = segment.children[0];
        childSegment.id = segment.id;
        childSegment.parentFlushed = true;
        1 === childSegment.status && queueCompletedSegment(boundary, childSegment);
      } else
        boundary.completedSegments.push(segment);
    }
    function finishedTask(request, boundary, segment) {
      if (null === boundary) {
        if (null !== segment && segment.parentFlushed) {
          if (null !== request.completedRootSegment)
            throw Error(
              "There can only be one root segment. This is a bug in React."
            );
          request.completedRootSegment = segment;
        }
        request.pendingRootTasks--;
        0 === request.pendingRootTasks && completeShell(request);
      } else
        boundary.pendingTasks--, 4 !== boundary.status && (0 === boundary.pendingTasks ? (0 === boundary.status && (boundary.status = 1), null !== segment && segment.parentFlushed && 1 === segment.status && queueCompletedSegment(boundary, segment), boundary.parentFlushed && request.completedBoundaries.push(boundary), 1 === boundary.status && (boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary.fallbackAbortableTasks.clear())) : null !== segment && segment.parentFlushed && 1 === segment.status && (queueCompletedSegment(boundary, segment), 1 === boundary.completedSegments.length && boundary.parentFlushed && request.partialBoundaries.push(boundary)));
      request.allPendingTasks--;
      0 === request.allPendingTasks && completeAll(request);
    }
    function performWork(request$jscomp$1) {
      if (2 !== request$jscomp$1.status) {
        var prevContext = currentActiveSnapshot, prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = HooksDispatcher;
        var prevAsyncDispatcher = ReactSharedInternals.A;
        ReactSharedInternals.A = DefaultAsyncDispatcher;
        var prevRequest = currentRequest;
        currentRequest = request$jscomp$1;
        var prevResumableState = currentResumableState;
        currentResumableState = request$jscomp$1.resumableState;
        try {
          var pingedTasks = request$jscomp$1.pingedTasks, i;
          for (i = 0; i < pingedTasks.length; i++) {
            var task = pingedTasks[i], request = request$jscomp$1, segment = task.blockedSegment;
            if (null === segment) {
              var request$jscomp$0 = request;
              if (0 !== task.replay.pendingTasks) {
                switchContext(task.context);
                try {
                  renderNodeDestructive(
                    request$jscomp$0,
                    task,
                    task.node,
                    task.childIndex
                  );
                  if (1 === task.replay.pendingTasks && 0 < task.replay.nodes.length)
                    throw Error(
                      "Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering."
                    );
                  task.replay.pendingTasks--;
                  task.abortSet.delete(task);
                  finishedTask(request$jscomp$0, task.blockedBoundary, null);
                } catch (thrownValue) {
                  resetHooksState();
                  var x = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;
                  if ("object" === typeof x && null !== x && "function" === typeof x.then) {
                    var ping = task.ping;
                    x.then(ping, ping);
                    task.thenableState = getThenableStateAfterSuspending();
                    null !== task.componentStack && (task.componentStack = task.componentStack.parent);
                  } else {
                    task.replay.pendingTasks--;
                    task.abortSet.delete(task);
                    var errorInfo = getThrownInfo(
                      request$jscomp$0,
                      task.componentStack
                    );
                    erroredReplay(
                      request$jscomp$0,
                      task.blockedBoundary,
                      x,
                      errorInfo,
                      task.replay.nodes,
                      task.replay.slots
                    );
                    request$jscomp$0.pendingRootTasks--;
                    0 === request$jscomp$0.pendingRootTasks && completeShell(request$jscomp$0);
                    request$jscomp$0.allPendingTasks--;
                    0 === request$jscomp$0.allPendingTasks && completeAll(request$jscomp$0);
                  }
                } finally {
                }
              }
            } else
              a: {
                request$jscomp$0 = void 0;
                var segment$jscomp$0 = segment;
                if (0 === segment$jscomp$0.status) {
                  switchContext(task.context);
                  var childrenLength = segment$jscomp$0.children.length, chunkLength = segment$jscomp$0.chunks.length;
                  try {
                    renderNodeDestructive(
                      request,
                      task,
                      task.node,
                      task.childIndex
                    ), segment$jscomp$0.lastPushedText && segment$jscomp$0.textEmbedded && segment$jscomp$0.chunks.push(textSeparator), task.abortSet.delete(task), segment$jscomp$0.status = 1, finishedTask(request, task.blockedBoundary, segment$jscomp$0);
                  } catch (thrownValue) {
                    resetHooksState();
                    segment$jscomp$0.children.length = childrenLength;
                    segment$jscomp$0.chunks.length = chunkLength;
                    var x$jscomp$0 = thrownValue === SuspenseException ? getSuspendedThenable() : thrownValue;
                    if ("object" === typeof x$jscomp$0 && null !== x$jscomp$0) {
                      if ("function" === typeof x$jscomp$0.then) {
                        var ping$jscomp$0 = task.ping;
                        x$jscomp$0.then(ping$jscomp$0, ping$jscomp$0);
                        task.thenableState = getThenableStateAfterSuspending();
                        null !== task.componentStack && (task.componentStack = task.componentStack.parent);
                        break a;
                      }
                      if (null !== request.trackedPostpones && x$jscomp$0.$$typeof === REACT_POSTPONE_TYPE) {
                        var trackedPostpones = request.trackedPostpones;
                        task.abortSet.delete(task);
                        var postponeInfo = getThrownInfo(
                          request,
                          task.componentStack
                        );
                        request.onPostpone(x$jscomp$0.message, postponeInfo);
                        trackPostpone(
                          request,
                          trackedPostpones,
                          task,
                          segment$jscomp$0
                        );
                        finishedTask(
                          request,
                          task.blockedBoundary,
                          segment$jscomp$0
                        );
                        break a;
                      }
                    }
                    var errorInfo$jscomp$0 = getThrownInfo(
                      request,
                      task.componentStack
                    );
                    task.abortSet.delete(task);
                    segment$jscomp$0.status = 4;
                    var boundary = task.blockedBoundary;
                    "object" === typeof x$jscomp$0 && null !== x$jscomp$0 && x$jscomp$0.$$typeof === REACT_POSTPONE_TYPE ? (request.onPostpone(x$jscomp$0.message, errorInfo$jscomp$0), request$jscomp$0 = "POSTPONE") : request$jscomp$0 = logRecoverableError(
                      request,
                      x$jscomp$0,
                      errorInfo$jscomp$0
                    );
                    null === boundary ? fatalError(request, x$jscomp$0) : (boundary.pendingTasks--, 4 !== boundary.status && (boundary.status = 4, boundary.errorDigest = request$jscomp$0, untrackBoundary(request, boundary), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary)));
                    request.allPendingTasks--;
                    0 === request.allPendingTasks && completeAll(request);
                  } finally {
                  }
                }
              }
          }
          pingedTasks.splice(0, i);
          null !== request$jscomp$1.destination && flushCompletedQueues(request$jscomp$1, request$jscomp$1.destination);
        } catch (error) {
          logRecoverableError(request$jscomp$1, error, {}), fatalError(request$jscomp$1, error);
        } finally {
          currentResumableState = prevResumableState, ReactSharedInternals.H = prevDispatcher, ReactSharedInternals.A = prevAsyncDispatcher, prevDispatcher === HooksDispatcher && switchContext(prevContext), currentRequest = prevRequest;
        }
      }
    }
    function flushSubtree(request, destination, segment, hoistableState) {
      segment.parentFlushed = true;
      switch (segment.status) {
        case 0:
          segment.id = request.nextSegmentId++;
        case 5:
          return hoistableState = segment.id, segment.lastPushedText = false, segment.textEmbedded = false, request = request.renderState, writeChunk(destination, placeholder1), writeChunk(destination, request.placeholderPrefix), request = hoistableState.toString(16), writeChunk(destination, request), writeChunkAndReturn(destination, placeholder2);
        case 1:
          segment.status = 2;
          var r = true, chunks = segment.chunks, chunkIdx = 0;
          segment = segment.children;
          for (var childIdx = 0; childIdx < segment.length; childIdx++) {
            for (r = segment[childIdx]; chunkIdx < r.index; chunkIdx++)
              writeChunk(destination, chunks[chunkIdx]);
            r = flushSegment(request, destination, r, hoistableState);
          }
          for (; chunkIdx < chunks.length - 1; chunkIdx++)
            writeChunk(destination, chunks[chunkIdx]);
          chunkIdx < chunks.length && (r = writeChunkAndReturn(destination, chunks[chunkIdx]));
          return r;
        default:
          throw Error(
            "Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React."
          );
      }
    }
    function flushSegment(request, destination, segment, hoistableState) {
      var boundary = segment.boundary;
      if (null === boundary)
        return flushSubtree(request, destination, segment, hoistableState);
      boundary.parentFlushed = true;
      if (4 === boundary.status)
        boundary = boundary.errorDigest, writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary), writeChunk(destination, clientRenderedSuspenseBoundaryError1), boundary && (writeChunk(destination, clientRenderedSuspenseBoundaryError1A), writeChunk(destination, escapeTextForBrowser(boundary)), writeChunk(
          destination,
          clientRenderedSuspenseBoundaryErrorAttrInterstitial
        )), writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2), flushSubtree(request, destination, segment, hoistableState);
      else if (1 !== boundary.status)
        0 === boundary.status && (boundary.rootSegmentID = request.nextSegmentId++), 0 < boundary.completedSegments.length && request.partialBoundaries.push(boundary), writeStartPendingSuspenseBoundary(
          destination,
          request.renderState,
          boundary.rootSegmentID
        ), hoistableState && (boundary = boundary.fallbackState, boundary.styles.forEach(hoistStyleQueueDependency, hoistableState), boundary.stylesheets.forEach(
          hoistStylesheetDependency,
          hoistableState
        )), flushSubtree(request, destination, segment, hoistableState);
      else if (boundary.byteSize > request.progressiveChunkSize)
        boundary.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary), writeStartPendingSuspenseBoundary(
          destination,
          request.renderState,
          boundary.rootSegmentID
        ), flushSubtree(request, destination, segment, hoistableState);
      else {
        hoistableState && (segment = boundary.contentState, segment.styles.forEach(hoistStyleQueueDependency, hoistableState), segment.stylesheets.forEach(hoistStylesheetDependency, hoistableState));
        writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        segment = boundary.completedSegments;
        if (1 !== segment.length)
          throw Error(
            "A previously unvisited boundary must have exactly one root segment. This is a bug in React."
          );
        flushSegment(request, destination, segment[0], hoistableState);
      }
      return writeChunkAndReturn(destination, endSuspenseBoundary);
    }
    function flushSegmentContainer(request, destination, segment, hoistableState) {
      writeStartSegment(
        destination,
        request.renderState,
        segment.parentFormatContext,
        segment.id
      );
      flushSegment(request, destination, segment, hoistableState);
      return writeEndSegment(destination, segment.parentFormatContext);
    }
    function flushCompletedBoundary(request, destination, boundary) {
      for (var completedSegments = boundary.completedSegments, i = 0; i < completedSegments.length; i++)
        flushPartiallyCompletedSegment(
          request,
          destination,
          boundary,
          completedSegments[i]
        );
      completedSegments.length = 0;
      writeHoistablesForBoundary(
        destination,
        boundary.contentState,
        request.renderState
      );
      completedSegments = request.resumableState;
      request = request.renderState;
      i = boundary.rootSegmentID;
      boundary = boundary.contentState;
      var requiresStyleInsertion = request.stylesToHoist;
      request.stylesToHoist = false;
      var scriptFormat = 0 === completedSegments.streamingFormat;
      scriptFormat ? (writeChunk(destination, request.startInlineScript), requiresStyleInsertion ? 0 === (completedSegments.instructions & 2) ? (completedSegments.instructions |= 10, writeChunk(destination, completeBoundaryWithStylesScript1FullBoth)) : 0 === (completedSegments.instructions & 8) ? (completedSegments.instructions |= 8, writeChunk(
        destination,
        completeBoundaryWithStylesScript1FullPartial
      )) : writeChunk(destination, completeBoundaryWithStylesScript1Partial) : 0 === (completedSegments.instructions & 2) ? (completedSegments.instructions |= 2, writeChunk(destination, completeBoundaryScript1Full)) : writeChunk(destination, completeBoundaryScript1Partial)) : requiresStyleInsertion ? writeChunk(destination, completeBoundaryWithStylesData1) : writeChunk(destination, completeBoundaryData1);
      completedSegments = i.toString(16);
      writeChunk(destination, request.boundaryPrefix);
      writeChunk(destination, completedSegments);
      scriptFormat ? writeChunk(destination, completeBoundaryScript2) : writeChunk(destination, completeBoundaryData2);
      writeChunk(destination, request.segmentPrefix);
      writeChunk(destination, completedSegments);
      requiresStyleInsertion ? scriptFormat ? (writeChunk(destination, completeBoundaryScript3a), writeStyleResourceDependenciesInJS(destination, boundary)) : (writeChunk(destination, completeBoundaryData3a), writeStyleResourceDependenciesInAttr(destination, boundary)) : scriptFormat && writeChunk(destination, completeBoundaryScript3b);
      completedSegments = scriptFormat ? writeChunkAndReturn(destination, completeBoundaryScriptEnd) : writeChunkAndReturn(destination, dataElementQuotedEnd);
      return writeBootstrap(destination, request) && completedSegments;
    }
    function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
      if (2 === segment.status)
        return true;
      var hoistableState = boundary.contentState, segmentID = segment.id;
      if (-1 === segmentID) {
        if (-1 === (segment.id = boundary.rootSegmentID))
          throw Error(
            "A root segment ID must have been assigned by now. This is a bug in React."
          );
        return flushSegmentContainer(request, destination, segment, hoistableState);
      }
      if (segmentID === boundary.rootSegmentID)
        return flushSegmentContainer(request, destination, segment, hoistableState);
      flushSegmentContainer(request, destination, segment, hoistableState);
      boundary = request.resumableState;
      request = request.renderState;
      (segment = 0 === boundary.streamingFormat) ? (writeChunk(destination, request.startInlineScript), 0 === (boundary.instructions & 1) ? (boundary.instructions |= 1, writeChunk(destination, completeSegmentScript1Full)) : writeChunk(destination, completeSegmentScript1Partial)) : writeChunk(destination, completeSegmentData1);
      writeChunk(destination, request.segmentPrefix);
      segmentID = segmentID.toString(16);
      writeChunk(destination, segmentID);
      segment ? writeChunk(destination, completeSegmentScript2) : writeChunk(destination, completeSegmentData2);
      writeChunk(destination, request.placeholderPrefix);
      writeChunk(destination, segmentID);
      destination = segment ? writeChunkAndReturn(destination, completeSegmentScriptEnd) : writeChunkAndReturn(destination, dataElementQuotedEnd);
      return destination;
    }
    function flushCompletedQueues(request, destination) {
      currentView = new Uint8Array(2048);
      writtenBytes = 0;
      destinationHasCapacity$1 = true;
      try {
        if (!(0 < request.pendingRootTasks)) {
          var i, completedRootSegment = request.completedRootSegment;
          if (null !== completedRootSegment) {
            if (5 === completedRootSegment.status)
              return;
            var renderState = request.renderState;
            if ((0 !== request.allPendingTasks || null !== request.trackedPostpones) && renderState.externalRuntimeScript) {
              var _renderState$external = renderState.externalRuntimeScript, resumableState = request.resumableState, src = _renderState$external.src, chunks = _renderState$external.chunks;
              resumableState.scriptResources.hasOwnProperty(src) || (resumableState.scriptResources[src] = null, renderState.scripts.add(chunks));
            }
            var htmlChunks = renderState.htmlChunks, headChunks = renderState.headChunks, i$jscomp$0;
            if (htmlChunks) {
              for (i$jscomp$0 = 0; i$jscomp$0 < htmlChunks.length; i$jscomp$0++)
                writeChunk(destination, htmlChunks[i$jscomp$0]);
              if (headChunks)
                for (i$jscomp$0 = 0; i$jscomp$0 < headChunks.length; i$jscomp$0++)
                  writeChunk(destination, headChunks[i$jscomp$0]);
              else
                writeChunk(destination, startChunkForTag("head")), writeChunk(destination, endOfStartTag);
            } else if (headChunks)
              for (i$jscomp$0 = 0; i$jscomp$0 < headChunks.length; i$jscomp$0++)
                writeChunk(destination, headChunks[i$jscomp$0]);
            var charsetChunks = renderState.charsetChunks;
            for (i$jscomp$0 = 0; i$jscomp$0 < charsetChunks.length; i$jscomp$0++)
              writeChunk(destination, charsetChunks[i$jscomp$0]);
            charsetChunks.length = 0;
            renderState.preconnects.forEach(flushResource, destination);
            renderState.preconnects.clear();
            var viewportChunks = renderState.viewportChunks;
            for (i$jscomp$0 = 0; i$jscomp$0 < viewportChunks.length; i$jscomp$0++)
              writeChunk(destination, viewportChunks[i$jscomp$0]);
            viewportChunks.length = 0;
            renderState.fontPreloads.forEach(flushResource, destination);
            renderState.fontPreloads.clear();
            renderState.highImagePreloads.forEach(flushResource, destination);
            renderState.highImagePreloads.clear();
            renderState.styles.forEach(flushStylesInPreamble, destination);
            var importMapChunks = renderState.importMapChunks;
            for (i$jscomp$0 = 0; i$jscomp$0 < importMapChunks.length; i$jscomp$0++)
              writeChunk(destination, importMapChunks[i$jscomp$0]);
            importMapChunks.length = 0;
            renderState.bootstrapScripts.forEach(flushResource, destination);
            renderState.scripts.forEach(flushResource, destination);
            renderState.scripts.clear();
            renderState.bulkPreloads.forEach(flushResource, destination);
            renderState.bulkPreloads.clear();
            var hoistableChunks = renderState.hoistableChunks;
            for (i$jscomp$0 = 0; i$jscomp$0 < hoistableChunks.length; i$jscomp$0++)
              writeChunk(destination, hoistableChunks[i$jscomp$0]);
            hoistableChunks.length = 0;
            htmlChunks && null === headChunks && writeChunk(destination, endChunkForTag("head"));
            flushSegment(request, destination, completedRootSegment, null);
            request.completedRootSegment = null;
            writeBootstrap(destination, request.renderState);
          }
          var renderState$jscomp$0 = request.renderState;
          completedRootSegment = 0;
          var viewportChunks$jscomp$0 = renderState$jscomp$0.viewportChunks;
          for (completedRootSegment = 0; completedRootSegment < viewportChunks$jscomp$0.length; completedRootSegment++)
            writeChunk(destination, viewportChunks$jscomp$0[completedRootSegment]);
          viewportChunks$jscomp$0.length = 0;
          renderState$jscomp$0.preconnects.forEach(flushResource, destination);
          renderState$jscomp$0.preconnects.clear();
          renderState$jscomp$0.fontPreloads.forEach(flushResource, destination);
          renderState$jscomp$0.fontPreloads.clear();
          renderState$jscomp$0.highImagePreloads.forEach(
            flushResource,
            destination
          );
          renderState$jscomp$0.highImagePreloads.clear();
          renderState$jscomp$0.styles.forEach(preloadLateStyles, destination);
          renderState$jscomp$0.scripts.forEach(flushResource, destination);
          renderState$jscomp$0.scripts.clear();
          renderState$jscomp$0.bulkPreloads.forEach(flushResource, destination);
          renderState$jscomp$0.bulkPreloads.clear();
          var hoistableChunks$jscomp$0 = renderState$jscomp$0.hoistableChunks;
          for (completedRootSegment = 0; completedRootSegment < hoistableChunks$jscomp$0.length; completedRootSegment++)
            writeChunk(destination, hoistableChunks$jscomp$0[completedRootSegment]);
          hoistableChunks$jscomp$0.length = 0;
          var clientRenderedBoundaries = request.clientRenderedBoundaries;
          for (i = 0; i < clientRenderedBoundaries.length; i++) {
            var boundary = clientRenderedBoundaries[i];
            renderState$jscomp$0 = destination;
            var resumableState$jscomp$0 = request.resumableState, renderState$jscomp$1 = request.renderState, id = boundary.rootSegmentID, errorDigest = boundary.errorDigest, scriptFormat = 0 === resumableState$jscomp$0.streamingFormat;
            scriptFormat ? (writeChunk(
              renderState$jscomp$0,
              renderState$jscomp$1.startInlineScript
            ), 0 === (resumableState$jscomp$0.instructions & 4) ? (resumableState$jscomp$0.instructions |= 4, writeChunk(renderState$jscomp$0, clientRenderScript1Full)) : writeChunk(renderState$jscomp$0, clientRenderScript1Partial)) : writeChunk(renderState$jscomp$0, clientRenderData1);
            writeChunk(renderState$jscomp$0, renderState$jscomp$1.boundaryPrefix);
            writeChunk(renderState$jscomp$0, id.toString(16));
            scriptFormat && writeChunk(renderState$jscomp$0, clientRenderScript1A);
            errorDigest && (scriptFormat ? (writeChunk(
              renderState$jscomp$0,
              clientRenderErrorScriptArgInterstitial
            ), writeChunk(
              renderState$jscomp$0,
              escapeJSStringsForInstructionScripts(errorDigest || "")
            )) : (writeChunk(renderState$jscomp$0, clientRenderData2), writeChunk(
              renderState$jscomp$0,
              escapeTextForBrowser(errorDigest || "")
            )));
            var JSCompiler_inline_result = scriptFormat ? writeChunkAndReturn(renderState$jscomp$0, clientRenderScriptEnd) : writeChunkAndReturn(renderState$jscomp$0, dataElementQuotedEnd);
            if (!JSCompiler_inline_result) {
              request.destination = null;
              i++;
              clientRenderedBoundaries.splice(0, i);
              return;
            }
          }
          clientRenderedBoundaries.splice(0, i);
          var completedBoundaries = request.completedBoundaries;
          for (i = 0; i < completedBoundaries.length; i++)
            if (!flushCompletedBoundary(request, destination, completedBoundaries[i])) {
              request.destination = null;
              i++;
              completedBoundaries.splice(0, i);
              return;
            }
          completedBoundaries.splice(0, i);
          completeWriting(destination);
          currentView = new Uint8Array(2048);
          writtenBytes = 0;
          destinationHasCapacity$1 = true;
          var partialBoundaries = request.partialBoundaries;
          for (i = 0; i < partialBoundaries.length; i++) {
            var boundary$55 = partialBoundaries[i];
            a: {
              clientRenderedBoundaries = request;
              boundary = destination;
              var completedSegments = boundary$55.completedSegments;
              for (JSCompiler_inline_result = 0; JSCompiler_inline_result < completedSegments.length; JSCompiler_inline_result++)
                if (!flushPartiallyCompletedSegment(
                  clientRenderedBoundaries,
                  boundary,
                  boundary$55,
                  completedSegments[JSCompiler_inline_result]
                )) {
                  JSCompiler_inline_result++;
                  completedSegments.splice(0, JSCompiler_inline_result);
                  var JSCompiler_inline_result$jscomp$0 = false;
                  break a;
                }
              completedSegments.splice(0, JSCompiler_inline_result);
              JSCompiler_inline_result$jscomp$0 = writeHoistablesForBoundary(
                boundary,
                boundary$55.contentState,
                clientRenderedBoundaries.renderState
              );
            }
            if (!JSCompiler_inline_result$jscomp$0) {
              request.destination = null;
              i++;
              partialBoundaries.splice(0, i);
              return;
            }
          }
          partialBoundaries.splice(0, i);
          var largeBoundaries = request.completedBoundaries;
          for (i = 0; i < largeBoundaries.length; i++)
            if (!flushCompletedBoundary(request, destination, largeBoundaries[i])) {
              request.destination = null;
              i++;
              largeBoundaries.splice(0, i);
              return;
            }
          largeBoundaries.splice(0, i);
        }
      } finally {
        0 === request.allPendingTasks && 0 === request.pingedTasks.length && 0 === request.clientRenderedBoundaries.length && 0 === request.completedBoundaries.length ? (request.flushScheduled = false, null === request.trackedPostpones && (i = request.resumableState, i.hasBody && writeChunk(destination, endChunkForTag("body")), i.hasHtml && writeChunk(destination, endChunkForTag("html"))), completeWriting(destination), flushBuffered(destination), destination.end(), request.destination = null) : (completeWriting(destination), flushBuffered(destination));
      }
    }
    function startWork(request) {
      request.flushScheduled = null !== request.destination;
      setImmediate(function() {
        return requestStorage.run(request, performWork, request);
      });
      null === request.trackedPostpones && setImmediate(function() {
        return requestStorage.run(
          request,
          enqueueEarlyPreloadsAfterInitialWork,
          request
        );
      });
    }
    function enqueueEarlyPreloadsAfterInitialWork(request) {
      safelyEmitEarlyPreloads(request, 0 === request.pendingRootTasks);
    }
    function enqueueFlush(request) {
      false === request.flushScheduled && 0 === request.pingedTasks.length && null !== request.destination && (request.flushScheduled = true, setImmediate(function() {
        var destination = request.destination;
        destination ? flushCompletedQueues(request, destination) : request.flushScheduled = false;
      }));
    }
    function startFlowing(request, destination) {
      if (1 === request.status)
        request.status = 2, destination.destroy(request.fatalError);
      else if (2 !== request.status && null === request.destination) {
        request.destination = destination;
        try {
          flushCompletedQueues(request, destination);
        } catch (error) {
          logRecoverableError(request, error, {}), fatalError(request, error);
        }
      }
    }
    function abort(request, reason) {
      try {
        var abortableTasks = request.abortableTasks;
        if (0 < abortableTasks.size) {
          var error = void 0 === reason ? Error("The render was aborted by the server without a reason.") : reason;
          abortableTasks.forEach(function(task) {
            return abortTask(task, request, error);
          });
          abortableTasks.clear();
        }
        null !== request.destination && flushCompletedQueues(request, request.destination);
      } catch (error$57) {
        logRecoverableError(request, error$57, {}), fatalError(request, error$57);
      }
    }
    function addToReplayParent(node, parentKeyPath, trackedPostpones) {
      if (null === parentKeyPath)
        trackedPostpones.rootNodes.push(node);
      else {
        var workingMap = trackedPostpones.workingMap, parentNode = workingMap.get(parentKeyPath);
        void 0 === parentNode && (parentNode = [parentKeyPath[1], parentKeyPath[2], [], null], workingMap.set(parentKeyPath, parentNode), addToReplayParent(parentNode, parentKeyPath[0], trackedPostpones));
        parentNode[2].push(node);
      }
    }
    function getPostponedState(request) {
      var trackedPostpones = request.trackedPostpones;
      if (null === trackedPostpones || 0 === trackedPostpones.rootNodes.length && null === trackedPostpones.rootSlots)
        return request.trackedPostpones = null;
      if (null !== request.completedRootSegment && 5 === request.completedRootSegment.status) {
        var resumableState = request.resumableState, renderState = request.renderState;
        resumableState.nextFormID = 0;
        resumableState.hasBody = false;
        resumableState.hasHtml = false;
        resumableState.unknownResources = { font: renderState.resets.font };
        resumableState.dnsResources = renderState.resets.dns;
        resumableState.connectResources = renderState.resets.connect;
        resumableState.imageResources = renderState.resets.image;
        resumableState.styleResources = renderState.resets.style;
        resumableState.scriptResources = {};
        resumableState.moduleUnknownResources = {};
        resumableState.moduleScriptResources = {};
      } else
        resumableState = request.resumableState, resumableState.bootstrapScriptContent = void 0, resumableState.bootstrapScripts = void 0, resumableState.bootstrapModules = void 0;
      return {
        nextSegmentId: request.nextSegmentId,
        rootFormatContext: request.rootFormatContext,
        progressiveChunkSize: request.progressiveChunkSize,
        resumableState: request.resumableState,
        replayNodes: trackedPostpones.rootNodes,
        replaySlots: trackedPostpones.rootSlots
      };
    }
    function createDrainHandler(destination, request) {
      return function() {
        return startFlowing(request, destination);
      };
    }
    function createCancelHandler(request, reason) {
      return function() {
        request.destination = null;
        abort(request, Error(reason));
      };
    }
    function createRequestImpl(children, options) {
      var resumableState = createResumableState(
        options ? options.identifierPrefix : void 0,
        options ? options.unstable_externalRuntimeSrc : void 0,
        options ? options.bootstrapScriptContent : void 0,
        options ? options.bootstrapScripts : void 0,
        options ? options.bootstrapModules : void 0
      );
      return createRequest(
        children,
        resumableState,
        createRenderState(
          resumableState,
          options ? options.nonce : void 0,
          options ? options.unstable_externalRuntimeSrc : void 0,
          options ? options.importMap : void 0,
          options ? options.onHeaders : void 0,
          options ? options.maxHeadersLength : void 0
        ),
        createRootFormatContext(options ? options.namespaceURI : void 0),
        options ? options.progressiveChunkSize : void 0,
        options ? options.onError : void 0,
        options ? options.onAllReady : void 0,
        options ? options.onShellReady : void 0,
        options ? options.onShellError : void 0,
        void 0,
        options ? options.onPostpone : void 0,
        options ? options.formState : void 0
      );
    }
    function resumeRequestImpl(children, postponedState, options) {
      var renderState = createRenderState(
        postponedState.resumableState,
        options ? options.nonce : void 0,
        void 0,
        void 0,
        void 0,
        void 0
      ), onError = options ? options.onError : void 0, onAllReady = options ? options.onAllReady : void 0, onShellReady = options ? options.onShellReady : void 0, onShellError = options ? options.onShellError : void 0, onPostpone = options ? options.onPostpone : void 0;
      options = [];
      var abortSet = /* @__PURE__ */ new Set();
      renderState = {
        destination: null,
        flushScheduled: false,
        resumableState: postponedState.resumableState,
        renderState,
        rootFormatContext: postponedState.rootFormatContext,
        progressiveChunkSize: postponedState.progressiveChunkSize,
        status: 0,
        fatalError: null,
        nextSegmentId: postponedState.nextSegmentId,
        allPendingTasks: 0,
        pendingRootTasks: 0,
        completedRootSegment: null,
        abortableTasks: abortSet,
        pingedTasks: options,
        clientRenderedBoundaries: [],
        completedBoundaries: [],
        partialBoundaries: [],
        trackedPostpones: null,
        onError: void 0 === onError ? defaultErrorHandler : onError,
        onPostpone: void 0 === onPostpone ? noop : onPostpone,
        onAllReady: void 0 === onAllReady ? noop : onAllReady,
        onShellReady: void 0 === onShellReady ? noop : onShellReady,
        onShellError: void 0 === onShellError ? noop : onShellError,
        onFatalError: noop,
        formState: null
      };
      "number" === typeof postponedState.replaySlots ? (onError = postponedState.replaySlots, onAllReady = createPendingSegment(
        renderState,
        0,
        null,
        postponedState.rootFormatContext,
        false,
        false
      ), onAllReady.id = onError, onAllReady.parentFlushed = true, children = createRenderTask(
        renderState,
        null,
        children,
        -1,
        null,
        onAllReady,
        null,
        abortSet,
        null,
        postponedState.rootFormatContext,
        emptyContextObject,
        null,
        emptyTreeContext,
        null,
        false
      ), options.push(children)) : (children = createReplayTask(
        renderState,
        null,
        {
          nodes: postponedState.replayNodes,
          slots: postponedState.replaySlots,
          pendingTasks: 0
        },
        children,
        -1,
        null,
        null,
        abortSet,
        null,
        postponedState.rootFormatContext,
        emptyContextObject,
        null,
        emptyTreeContext,
        null,
        false
      ), options.push(children));
      return renderState;
    }
    function createFakeWritable(readable) {
      return {
        write: function(chunk) {
          return readable.push(chunk);
        },
        end: function() {
          readable.push(null);
        },
        destroy: function(error) {
          readable.destroy(error);
        }
      };
    }
    exports2.prerenderToNodeStream = function(children, options) {
      return new Promise(function(resolve, reject) {
        var resumableState = createResumableState(
          options ? options.identifierPrefix : void 0,
          options ? options.unstable_externalRuntimeSrc : void 0,
          options ? options.bootstrapScriptContent : void 0,
          options ? options.bootstrapScripts : void 0,
          options ? options.bootstrapModules : void 0
        ), request = createPrerenderRequest(
          children,
          resumableState,
          createRenderState(
            resumableState,
            void 0,
            options ? options.unstable_externalRuntimeSrc : void 0,
            options ? options.importMap : void 0,
            options ? options.onHeaders : void 0,
            options ? options.maxHeadersLength : void 0
          ),
          createRootFormatContext(options ? options.namespaceURI : void 0),
          options ? options.progressiveChunkSize : void 0,
          options ? options.onError : void 0,
          function() {
            var readable = new stream.Readable({
              read: function() {
                startFlowing(request, writable);
              }
            }), writable = createFakeWritable(readable);
            readable = {
              postponed: getPostponedState(request),
              prelude: readable
            };
            resolve(readable);
          },
          void 0,
          void 0,
          reject,
          options ? options.onPostpone : void 0
        );
        if (options && options.signal) {
          var signal = options.signal;
          if (signal.aborted)
            abort(request, signal.reason);
          else {
            var listener = function() {
              abort(request, signal.reason);
              signal.removeEventListener("abort", listener);
            };
            signal.addEventListener("abort", listener);
          }
        }
        startWork(request);
      });
    };
    exports2.renderToPipeableStream = function(children, options) {
      var request = createRequestImpl(children, options), hasStartedFlowing = false;
      startWork(request);
      return {
        pipe: function(destination) {
          if (hasStartedFlowing)
            throw Error(
              "React currently only supports piping to one writable stream."
            );
          hasStartedFlowing = true;
          safelyEmitEarlyPreloads(
            request,
            null === request.trackedPostpones ? 0 === request.pendingRootTasks : null === request.completedRootSegment ? 0 === request.pendingRootTasks : 5 !== request.completedRootSegment.status
          );
          startFlowing(request, destination);
          destination.on("drain", createDrainHandler(destination, request));
          destination.on(
            "error",
            createCancelHandler(
              request,
              "The destination stream errored while writing data."
            )
          );
          destination.on(
            "close",
            createCancelHandler(request, "The destination stream closed early.")
          );
          return destination;
        },
        abort: function(reason) {
          abort(request, reason);
        }
      };
    };
    exports2.resumeToPipeableStream = function(children, postponedState, options) {
      var request = resumeRequestImpl(children, postponedState, options), hasStartedFlowing = false;
      startWork(request);
      return {
        pipe: function(destination) {
          if (hasStartedFlowing)
            throw Error(
              "React currently only supports piping to one writable stream."
            );
          hasStartedFlowing = true;
          startFlowing(request, destination);
          destination.on("drain", createDrainHandler(destination, request));
          destination.on(
            "error",
            createCancelHandler(
              request,
              "The destination stream errored while writing data."
            )
          );
          destination.on(
            "close",
            createCancelHandler(request, "The destination stream closed early.")
          );
          return destination;
        },
        abort: function(reason) {
          abort(request, reason);
        }
      };
    };
    exports2.version = "19.0.0-experimental-4508873393-20240430";
  }
});

// node_modules/react-dom/cjs/react-dom-server-legacy.node.development.js
var require_react_dom_server_legacy_node_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.node.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React = require_react();
        var ReactDOM = require_react_dom();
        var ReactVersion = "19.0.0-experimental-4508873393-20240430";
        var ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var stack = ReactSharedInternals.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var disableDefaultPropsExceptForClasses = true;
        var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
        var REACT_POSTPONE_TYPE = Symbol.for("react.postpone");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ASYNC_ITERATOR = Symbol.asyncIterator;
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var jsxPropsParents = /* @__PURE__ */ new WeakMap();
        var jsxChildrenParents = /* @__PURE__ */ new WeakMap();
        function objectName(object) {
          var name = Object.prototype.toString.call(object);
          return name.replace(/^\[object (.*)\]$/, function(m, p0) {
            return p0;
          });
        }
        function describeKeyForErrorMessage(key) {
          var encodedKey = JSON.stringify(key);
          return '"' + key + '"' === encodedKey ? key : encodedKey;
        }
        function describeValueForErrorMessage(value) {
          switch (typeof value) {
            case "string": {
              return JSON.stringify(value.length <= 10 ? value : value.slice(0, 10) + "...");
            }
            case "object": {
              if (isArray(value)) {
                return "[...]";
              }
              if (value !== null && value.$$typeof === CLIENT_REFERENCE_TAG) {
                return describeClientReference();
              }
              var name = objectName(value);
              if (name === "Object") {
                return "{...}";
              }
              return name;
            }
            case "function": {
              if (value.$$typeof === CLIENT_REFERENCE_TAG) {
                return describeClientReference();
              }
              var _name = value.displayName || value.name;
              return _name ? "function " + _name : "function";
            }
            default:
              return String(value);
          }
        }
        function describeElementType(type) {
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeElementType(type.render);
              case REACT_MEMO_TYPE:
                return describeElementType(type.type);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeElementType(init(payload));
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var CLIENT_REFERENCE_TAG = Symbol.for("react.client.reference");
        function describeClientReference(ref) {
          return "client";
        }
        function describeObjectForErrorMessage(objectOrArray, expandedName) {
          var objKind = objectName(objectOrArray);
          if (objKind !== "Object" && objKind !== "Array") {
            return objKind;
          }
          var str = "";
          var start = -1;
          var length = 0;
          if (isArray(objectOrArray)) {
            if (jsxChildrenParents.has(objectOrArray)) {
              var type = jsxChildrenParents.get(objectOrArray);
              str = "<" + describeElementType(type) + ">";
              var array = objectOrArray;
              for (var i = 0; i < array.length; i++) {
                var value = array[i];
                var substr = void 0;
                if (typeof value === "string") {
                  substr = value;
                } else if (typeof value === "object" && value !== null) {
                  substr = "{" + describeObjectForErrorMessage(value) + "}";
                } else {
                  substr = "{" + describeValueForErrorMessage(value) + "}";
                }
                if ("" + i === expandedName) {
                  start = str.length;
                  length = substr.length;
                  str += substr;
                } else if (substr.length < 15 && str.length + substr.length < 40) {
                  str += substr;
                } else {
                  str += "{...}";
                }
              }
              str += "</" + describeElementType(type) + ">";
            } else {
              str = "[";
              var _array = objectOrArray;
              for (var _i = 0; _i < _array.length; _i++) {
                if (_i > 0) {
                  str += ", ";
                }
                var _value = _array[_i];
                var _substr = void 0;
                if (typeof _value === "object" && _value !== null) {
                  _substr = describeObjectForErrorMessage(_value);
                } else {
                  _substr = describeValueForErrorMessage(_value);
                }
                if ("" + _i === expandedName) {
                  start = str.length;
                  length = _substr.length;
                  str += _substr;
                } else if (_substr.length < 10 && str.length + _substr.length < 40) {
                  str += _substr;
                } else {
                  str += "...";
                }
              }
              str += "]";
            }
          } else {
            if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) {
              str = "<" + describeElementType(objectOrArray.type) + "/>";
            } else if (objectOrArray.$$typeof === CLIENT_REFERENCE_TAG) {
              return describeClientReference();
            } else if (jsxPropsParents.has(objectOrArray)) {
              var _type = jsxPropsParents.get(objectOrArray);
              str = "<" + (describeElementType(_type) || "...");
              var object = objectOrArray;
              var names = Object.keys(object);
              for (var _i2 = 0; _i2 < names.length; _i2++) {
                str += " ";
                var name = names[_i2];
                str += describeKeyForErrorMessage(name) + "=";
                var _value2 = object[name];
                var _substr2 = void 0;
                if (name === expandedName && typeof _value2 === "object" && _value2 !== null) {
                  _substr2 = describeObjectForErrorMessage(_value2);
                } else {
                  _substr2 = describeValueForErrorMessage(_value2);
                }
                if (typeof _value2 !== "string") {
                  _substr2 = "{" + _substr2 + "}";
                }
                if (name === expandedName) {
                  start = str.length;
                  length = _substr2.length;
                  str += _substr2;
                } else if (_substr2.length < 10 && str.length + _substr2.length < 40) {
                  str += _substr2;
                } else {
                  str += "...";
                }
              }
              str += ">";
            } else {
              str = "{";
              var _object = objectOrArray;
              var _names = Object.keys(_object);
              for (var _i3 = 0; _i3 < _names.length; _i3++) {
                if (_i3 > 0) {
                  str += ", ";
                }
                var _name2 = _names[_i3];
                str += describeKeyForErrorMessage(_name2) + ": ";
                var _value3 = _object[_name2];
                var _substr3 = void 0;
                if (typeof _value3 === "object" && _value3 !== null) {
                  _substr3 = describeObjectForErrorMessage(_value3);
                } else {
                  _substr3 = describeValueForErrorMessage(_value3);
                }
                if (_name2 === expandedName) {
                  start = str.length;
                  length = _substr3.length;
                  str += _substr3;
                } else if (_substr3.length < 10 && str.length + _substr3.length < 40) {
                  str += _substr3;
                } else {
                  str += "...";
                }
              }
              str += "}";
            }
          }
          if (expandedName === void 0) {
            return str;
          }
          if (start > -1 && length > 0) {
            var highlight = " ".repeat(start) + "^".repeat(length);
            return "\n  " + str + "\n  " + highlight;
          }
          return "\n  " + str;
        }
        function createFastHashJS(key) {
          return murmurhash3_32_gc(key, 0);
        }
        function murmurhash3_32_gc(key, seed) {
          var remainder, bytes, h1, h1b, c1, c2, k1, i;
          remainder = key.length & 3;
          bytes = key.length - remainder;
          h1 = seed;
          c1 = 3432918353;
          c2 = 461845907;
          i = 0;
          while (i < bytes) {
            k1 = key.charCodeAt(i) & 255 | (key.charCodeAt(++i) & 255) << 8 | (key.charCodeAt(++i) & 255) << 16 | (key.charCodeAt(++i) & 255) << 24;
            ++i;
            k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
            h1 ^= k1;
            h1 = h1 << 13 | h1 >>> 19;
            h1b = (h1 & 65535) * 5 + (((h1 >>> 16) * 5 & 65535) << 16) & 4294967295;
            h1 = (h1b & 65535) + 27492 + (((h1b >>> 16) + 58964 & 65535) << 16);
          }
          k1 = 0;
          switch (remainder) {
            case 3:
              k1 ^= (key.charCodeAt(i + 2) & 255) << 16;
            case 2:
              k1 ^= (key.charCodeAt(i + 1) & 255) << 8;
            case 1:
              k1 ^= key.charCodeAt(i) & 255;
              k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
              k1 = k1 << 15 | k1 >>> 17;
              k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
              h1 ^= k1;
          }
          h1 ^= key.length;
          h1 ^= h1 >>> 16;
          h1 = (h1 & 65535) * 2246822507 + (((h1 >>> 16) * 2246822507 & 65535) << 16) & 4294967295;
          h1 ^= h1 >>> 13;
          h1 = (h1 & 65535) * 3266489909 + (((h1 >>> 16) * 3266489909 & 65535) << 16) & 4294967295;
          h1 ^= h1 >>> 16;
          return h1 >>> 0;
        }
        function scheduleWork(callback) {
          callback();
        }
        function beginWriting(destination) {
        }
        function writeChunk(destination, chunk) {
          writeChunkAndReturn(destination, chunk);
        }
        function writeChunkAndReturn(destination, chunk) {
          return destination.push(chunk);
        }
        function completeWriting(destination) {
        }
        function close(destination) {
          destination.push(null);
        }
        function stringToChunk(content) {
          return content;
        }
        function stringToPrecomputedChunk(content) {
          return content;
        }
        function closeWithError(destination, error2) {
          destination.destroy(error2);
        }
        var assign = Object.assign;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkOptionStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` option is an unsupported type %s. This value must be coerced to a string before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        var unitlessNumbers = /* @__PURE__ */ new Set([
          "animationIterationCount",
          "aspectRatio",
          "borderImageOutset",
          "borderImageSlice",
          "borderImageWidth",
          "boxFlex",
          "boxFlexGroup",
          "boxOrdinalGroup",
          "columnCount",
          "columns",
          "flex",
          "flexGrow",
          "flexPositive",
          "flexShrink",
          "flexNegative",
          "flexOrder",
          "gridArea",
          "gridRow",
          "gridRowEnd",
          "gridRowSpan",
          "gridRowStart",
          "gridColumn",
          "gridColumnEnd",
          "gridColumnSpan",
          "gridColumnStart",
          "fontWeight",
          "lineClamp",
          "lineHeight",
          "opacity",
          "order",
          "orphans",
          "scale",
          "tabSize",
          "widows",
          "zIndex",
          "zoom",
          "fillOpacity",
          // SVG-related properties
          "floodOpacity",
          "stopOpacity",
          "strokeDasharray",
          "strokeDashoffset",
          "strokeMiterlimit",
          "strokeOpacity",
          "strokeWidth",
          "MozAnimationIterationCount",
          // Known Prefixed Properties
          "MozBoxFlex",
          // TODO: Remove these since they shouldn't be used in modern code
          "MozBoxFlexGroup",
          "MozLineClamp",
          "msAnimationIterationCount",
          "msFlex",
          "msZoom",
          "msFlexGrow",
          "msFlexNegative",
          "msFlexOrder",
          "msFlexPositive",
          "msFlexShrink",
          "msGridColumn",
          "msGridColumnSpan",
          "msGridRow",
          "msGridRowSpan",
          "WebkitAnimationIterationCount",
          "WebkitBoxFlex",
          "WebKitBoxFlexGroup",
          "WebkitBoxOrdinalGroup",
          "WebkitColumnCount",
          "WebkitColumns",
          "WebkitFlex",
          "WebkitFlexGrow",
          "WebkitFlexPositive",
          "WebkitFlexShrink",
          "WebkitLineClamp"
        ]);
        function isUnitlessNumber(name) {
          return unitlessNumbers.has(name);
        }
        var aliases = /* @__PURE__ */ new Map([
          ["acceptCharset", "accept-charset"],
          ["htmlFor", "for"],
          ["httpEquiv", "http-equiv"],
          // HTML and SVG attributes, but the SVG attribute is case sensitive.],
          ["crossOrigin", "crossorigin"],
          // This is a list of all SVG attributes that need special casing.
          // Regular attributes that just accept strings.],
          ["accentHeight", "accent-height"],
          ["alignmentBaseline", "alignment-baseline"],
          ["arabicForm", "arabic-form"],
          ["baselineShift", "baseline-shift"],
          ["capHeight", "cap-height"],
          ["clipPath", "clip-path"],
          ["clipRule", "clip-rule"],
          ["colorInterpolation", "color-interpolation"],
          ["colorInterpolationFilters", "color-interpolation-filters"],
          ["colorProfile", "color-profile"],
          ["colorRendering", "color-rendering"],
          ["dominantBaseline", "dominant-baseline"],
          ["enableBackground", "enable-background"],
          ["fillOpacity", "fill-opacity"],
          ["fillRule", "fill-rule"],
          ["floodColor", "flood-color"],
          ["floodOpacity", "flood-opacity"],
          ["fontFamily", "font-family"],
          ["fontSize", "font-size"],
          ["fontSizeAdjust", "font-size-adjust"],
          ["fontStretch", "font-stretch"],
          ["fontStyle", "font-style"],
          ["fontVariant", "font-variant"],
          ["fontWeight", "font-weight"],
          ["glyphName", "glyph-name"],
          ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
          ["glyphOrientationVertical", "glyph-orientation-vertical"],
          ["horizAdvX", "horiz-adv-x"],
          ["horizOriginX", "horiz-origin-x"],
          ["imageRendering", "image-rendering"],
          ["letterSpacing", "letter-spacing"],
          ["lightingColor", "lighting-color"],
          ["markerEnd", "marker-end"],
          ["markerMid", "marker-mid"],
          ["markerStart", "marker-start"],
          ["overlinePosition", "overline-position"],
          ["overlineThickness", "overline-thickness"],
          ["paintOrder", "paint-order"],
          ["panose-1", "panose-1"],
          ["pointerEvents", "pointer-events"],
          ["renderingIntent", "rendering-intent"],
          ["shapeRendering", "shape-rendering"],
          ["stopColor", "stop-color"],
          ["stopOpacity", "stop-opacity"],
          ["strikethroughPosition", "strikethrough-position"],
          ["strikethroughThickness", "strikethrough-thickness"],
          ["strokeDasharray", "stroke-dasharray"],
          ["strokeDashoffset", "stroke-dashoffset"],
          ["strokeLinecap", "stroke-linecap"],
          ["strokeLinejoin", "stroke-linejoin"],
          ["strokeMiterlimit", "stroke-miterlimit"],
          ["strokeOpacity", "stroke-opacity"],
          ["strokeWidth", "stroke-width"],
          ["textAnchor", "text-anchor"],
          ["textDecoration", "text-decoration"],
          ["textRendering", "text-rendering"],
          ["transformOrigin", "transform-origin"],
          ["underlinePosition", "underline-position"],
          ["underlineThickness", "underline-thickness"],
          ["unicodeBidi", "unicode-bidi"],
          ["unicodeRange", "unicode-range"],
          ["unitsPerEm", "units-per-em"],
          ["vAlphabetic", "v-alphabetic"],
          ["vHanging", "v-hanging"],
          ["vIdeographic", "v-ideographic"],
          ["vMathematical", "v-mathematical"],
          ["vectorEffect", "vector-effect"],
          ["vertAdvY", "vert-adv-y"],
          ["vertOriginX", "vert-origin-x"],
          ["vertOriginY", "vert-origin-y"],
          ["wordSpacing", "word-spacing"],
          ["writingMode", "writing-mode"],
          ["xmlnsXlink", "xmlns:xlink"],
          ["xHeight", "x-height"]
        ]);
        function getAttributeAlias(name) {
          return aliases.get(name) || name;
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              if (tagName === "select") {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`.");
              } else {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties$1 = {};
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty$1(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            if (rARIACamel$1.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
            if (rARIA$1.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties$1[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function validateProperties$2(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        function isCustomElement(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return false;
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          fetchpriority: "fetchPriority",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          inert: "inert",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          transformorigin: "transformOrigin",
          "transform-origin": "transformOrigin",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var warnedProperties = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name, value, eventRegistry) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties[name] = true;
              return true;
            }
            if (typeof value === "function") {
              if (tagName === "form" && name === "action") {
                return true;
              }
              if (tagName === "input" && name === "formAction") {
                return true;
              }
              if (tagName === "button" && name === "formAction") {
                return true;
              }
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties[name] = true;
              return true;
            }
            if (rARIA.test(name) || rARIACamel.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            } else if (name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties[name] = true;
              return true;
            }
            switch (name) {
              case "dangerouslySetInnerHTML":
              case "children":
              case "style":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
              case "ref": {
                return true;
              }
              case "innerText":
              case "textContent":
                return true;
            }
            switch (typeof value) {
              case "boolean": {
                switch (name) {
                  case "autoFocus":
                  case "checked":
                  case "multiple":
                  case "muted":
                  case "selected":
                  case "contentEditable":
                  case "spellCheck":
                  case "draggable":
                  case "value":
                  case "autoReverse":
                  case "externalResourcesRequired":
                  case "focusable":
                  case "preserveAlpha":
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                  case "capture":
                  case "download":
                  case "inert": {
                    return true;
                  }
                  default: {
                    var prefix2 = name.toLowerCase().slice(0, 5);
                    if (prefix2 === "data-" || prefix2 === "aria-") {
                      return true;
                    }
                    if (value) {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                    } else {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                    }
                    warnedProperties[name] = true;
                    return true;
                  }
                }
              }
              case "function":
              case "symbol":
                warnedProperties[name] = true;
                return false;
              case "string": {
                if (value === "false" || value === "true") {
                  switch (name) {
                    case "checked":
                    case "selected":
                    case "multiple":
                    case "muted":
                    case "allowFullScreen":
                    case "async":
                    case "autoPlay":
                    case "controls":
                    case "default":
                    case "defer":
                    case "disabled":
                    case "disablePictureInPicture":
                    case "disableRemotePlayback":
                    case "formNoValidate":
                    case "hidden":
                    case "loop":
                    case "noModule":
                    case "noValidate":
                    case "open":
                    case "playsInline":
                    case "readOnly":
                    case "required":
                    case "reversed":
                    case "scoped":
                    case "seamless":
                    case "itemScope":
                    case "inert": {
                      break;
                    }
                    default: {
                      return true;
                    }
                  }
                  error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
        }
        function warnUnknownProperties(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props, eventRegistry) {
          if (isCustomElement(type) || typeof props.is === "string") {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        function camelize(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }
        function warnHyphenatedStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          }
        }
        function warnBadVendoredStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          }
        }
        function warnStyleValueWithSemicolon(name, value) {
          {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          }
        }
        function warnStyleValueIsNaN(name, value) {
          {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnStyleValueIsInfinity(name, value) {
          {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnValidStyle(name, value) {
          {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name);
              }
            }
          }
        }
        function getCrossOriginString(input) {
          if (typeof input === "string") {
            return input === "use-credentials" ? input : "";
          }
          return void 0;
        }
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.slice(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape;
          }
          return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text) {
          if (typeof text === "boolean" || typeof text === "number" || typeof text === "bigint") {
            return "" + text;
          }
          return escapeHtml(text);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        function sanitizeURL(url) {
          if (isJavaScriptProtocol.test("" + url)) {
            return "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')";
          }
          return url;
        }
        var clientRenderBoundary = '$RX=function(b,c,d,e,f){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),f&&(a.cstck=f),b._reactRetry&&b._reactRetry())};';
        var completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};';
        var completeBoundaryWithStyles = '$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};';
        var completeSegment = "$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};";
        var formReplaying = `addEventListener("submit",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute("formAction");null!=f&&(e=f,b=null)}"javascript:throw new Error('React form unexpectedly submitted.')"===e&&(a.preventDefault(),b?(a=document.createElement("input"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.ownerDocument||c,(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,d,b))}});`;
        function getValueDescriptorExpectingObjectForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : 'something with type "' + typeof thing + '"';
        }
        var ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
        var sharedNotPendingObject = {
          pending: false,
          data: null,
          method: null,
          action: null
        };
        var NotPending = Object.freeze(sharedNotPendingObject);
        var previousDispatcher = ReactDOMSharedInternals.d;
        ReactDOMSharedInternals.d = {
          f: previousDispatcher.f,
          r: previousDispatcher.r,
          D: prefetchDNS,
          C: preconnect,
          L: preload,
          m: preloadModule,
          X: preinitScript,
          S: preinitStyle,
          M: preinitModuleScript
        };
        var ScriptStreamingFormat = 0;
        var DataStreamingFormat = 1;
        var NothingSent = 0;
        var SentCompleteSegmentFunction = 1;
        var SentCompleteBoundaryFunction = 2;
        var SentClientRenderFunction = 4;
        var SentStyleInsertionFunction = 8;
        var SentFormReplayingRuntime = 16;
        var EXISTS = null;
        var PRELOAD_NO_CREDS = [];
        {
          Object.freeze(PRELOAD_NO_CREDS);
        }
        var dataElementQuotedEnd = stringToPrecomputedChunk('"></template>');
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("</script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var scriptNonce = stringToPrecomputedChunk('" nonce="');
        var scriptIntegirty = stringToPrecomputedChunk('" integrity="');
        var scriptCrossOrigin = stringToPrecomputedChunk('" crossorigin="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""></script>');
        function escapeEntireInlineScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        var importMapScriptStart = stringToPrecomputedChunk('<script type="importmap">');
        var importMapScriptEnd = stringToPrecomputedChunk("</script>");
        var DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS = 2e3;
        var didWarnForNewBooleanPropsWithEmptyValue;
        {
          didWarnForNewBooleanPropsWithEmptyValue = {};
        }
        function createRenderState$1(resumableState, nonce, externalRuntimeConfig, importMap, onHeaders, maxHeadersLength) {
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var idPrefix = resumableState.idPrefix;
          var bootstrapChunks = [];
          var externalRuntimeScript = null;
          var bootstrapScriptContent = resumableState.bootstrapScriptContent, bootstrapScripts = resumableState.bootstrapScripts, bootstrapModules = resumableState.bootstrapModules;
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeEntireInlineScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          {
            if (externalRuntimeConfig !== void 0) {
              if (typeof externalRuntimeConfig === "string") {
                externalRuntimeScript = {
                  src: externalRuntimeConfig,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig,
                  async: true,
                  integrity: void 0,
                  nonce
                });
              } else {
                externalRuntimeScript = {
                  src: externalRuntimeConfig.src,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig.src,
                  async: true,
                  integrity: externalRuntimeConfig.integrity,
                  nonce
                });
              }
            }
          }
          var importMapChunks = [];
          if (importMap !== void 0) {
            var map = importMap;
            importMapChunks.push(importMapScriptStart);
            importMapChunks.push(stringToChunk(escapeEntireInlineScriptContent(JSON.stringify(map))));
            importMapChunks.push(importMapScriptEnd);
          }
          {
            if (onHeaders && typeof maxHeadersLength === "number") {
              if (maxHeadersLength <= 0) {
                error("React expected a positive non-zero `maxHeadersLength` option but found %s instead. When using the `onHeaders` option you may supply an optional `maxHeadersLength` option as well however, when setting this value to zero or less no headers will be captured.", maxHeadersLength === 0 ? "zero" : maxHeadersLength);
              }
            }
          }
          var headers = onHeaders ? {
            preconnects: "",
            fontPreloads: "",
            highImagePreloads: "",
            remainingCapacity: typeof maxHeadersLength === "number" ? maxHeadersLength : DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS
          } : null;
          var renderState = {
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: stringToPrecomputedChunk(idPrefix + "B:"),
            startInlineScript: inlineScriptWithNonce,
            htmlChunks: null,
            headChunks: null,
            externalRuntimeScript,
            bootstrapChunks,
            importMapChunks,
            onHeaders,
            headers,
            resets: {
              font: {},
              dns: {},
              connect: {
                default: {},
                anonymous: {},
                credentials: {}
              },
              image: {},
              style: {}
            },
            charsetChunks: [],
            viewportChunks: [],
            hoistableChunks: [],
            // cleared on flush
            preconnects: /* @__PURE__ */ new Set(),
            fontPreloads: /* @__PURE__ */ new Set(),
            highImagePreloads: /* @__PURE__ */ new Set(),
            // usedImagePreloads: new Set(),
            styles: /* @__PURE__ */ new Map(),
            bootstrapScripts: /* @__PURE__ */ new Set(),
            scripts: /* @__PURE__ */ new Set(),
            bulkPreloads: /* @__PURE__ */ new Set(),
            preloads: {
              images: /* @__PURE__ */ new Map(),
              stylesheets: /* @__PURE__ */ new Map(),
              scripts: /* @__PURE__ */ new Map(),
              moduleScripts: /* @__PURE__ */ new Map()
            },
            nonce,
            // like a module global for currently rendering boundary
            hoistableState: null,
            stylesToHoist: false
          };
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              var scriptConfig = bootstrapScripts[i];
              var src = void 0, crossOrigin = void 0, integrity = void 0;
              var props = {
                rel: "preload",
                as: "script",
                fetchPriority: "low",
                nonce
              };
              if (typeof scriptConfig === "string") {
                props.href = src = scriptConfig;
              } else {
                props.href = src = scriptConfig.src;
                props.integrity = integrity = typeof scriptConfig.integrity === "string" ? scriptConfig.integrity : void 0;
                props.crossOrigin = crossOrigin = typeof scriptConfig === "string" || scriptConfig.crossOrigin == null ? void 0 : scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              }
              preloadBootstrapScriptOrModule(resumableState, renderState, src, props);
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (typeof integrity === "string") {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));
              }
              if (typeof crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              var _scriptConfig = bootstrapModules[_i];
              var _src = void 0, _crossOrigin = void 0, _integrity = void 0;
              var _props = {
                rel: "modulepreload",
                fetchPriority: "low",
                nonce
              };
              if (typeof _scriptConfig === "string") {
                _props.href = _src = _scriptConfig;
              } else {
                _props.href = _src = _scriptConfig.src;
                _props.integrity = _integrity = typeof _scriptConfig.integrity === "string" ? _scriptConfig.integrity : void 0;
                _props.crossOrigin = _crossOrigin = typeof _scriptConfig === "string" || _scriptConfig.crossOrigin == null ? void 0 : _scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              }
              preloadBootstrapScriptOrModule(resumableState, renderState, _src, _props);
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (typeof _integrity === "string") {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));
              }
              if (typeof _crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          return renderState;
        }
        function createResumableState(identifierPrefix, externalRuntimeConfig, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var streamingFormat = ScriptStreamingFormat;
          {
            if (externalRuntimeConfig !== void 0) {
              streamingFormat = DataStreamingFormat;
            }
          }
          return {
            idPrefix,
            nextFormID: 0,
            streamingFormat,
            bootstrapScriptContent,
            bootstrapScripts,
            bootstrapModules,
            instructions: NothingSent,
            hasBody: false,
            hasHtml: false,
            // @TODO add bootstrap script to implicit preloads
            // persistent
            unknownResources: {},
            dnsResources: {},
            connectResources: {
              default: {},
              anonymous: {},
              credentials: {}
            },
            imageResources: {},
            styleResources: {},
            scriptResources: {},
            moduleUnknownResources: {},
            moduleScriptResources: {}
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_HTML_MODE = 1;
        var HTML_MODE = 2;
        var SVG_MODE = 3;
        var MATHML_MODE = 4;
        var HTML_TABLE_MODE = 5;
        var HTML_TABLE_BODY_MODE = 6;
        var HTML_TABLE_ROW_MODE = 7;
        var HTML_COLGROUP_MODE = 8;
        var NO_SCOPE = (
          /*         */
          0
        );
        var NOSCRIPT_SCOPE = (
          /*   */
          1
        );
        var PICTURE_SCOPE = (
          /*    */
          2
        );
        function createFormatContext(insertionMode, selectedValue, tagScope) {
          return {
            insertionMode,
            selectedValue,
            tagScope
          };
        }
        function createRootFormatContext(namespaceURI) {
          var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
          return createFormatContext(insertionMode, null, NO_SCOPE);
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "noscript":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope | NOSCRIPT_SCOPE);
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.tagScope);
            case "svg":
              return createFormatContext(SVG_MODE, null, parentContext.tagScope);
            case "picture":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope | PICTURE_SCOPE);
            case "math":
              return createFormatContext(MATHML_MODE, null, parentContext.tagScope);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null, parentContext.tagScope);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.tagScope);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.tagScope);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.tagScope);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null, parentContext.tagScope);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            if (type === "html") {
              return createFormatContext(HTML_HTML_MODE, null, parentContext.tagScope);
            } else {
              return createFormatContext(HTML_MODE, null, parentContext.tagScope);
            }
          } else if (parentContext.insertionMode === HTML_HTML_MODE) {
            return createFormatContext(HTML_MODE, null, parentContext.tagScope);
          }
          return parentContext;
        }
        function makeId(resumableState, treeId, localId) {
          var idPrefix = resumableState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text) {
          return escapeTextForBrowser(text);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance$1(target, text, renderState, textEmbedded) {
          if (text === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text)));
          return true;
        }
        function pushSegmentFinale$1(target, renderState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyleAttribute(target, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !isUnitlessNumber(styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushBooleanAttribute(target, name, value) {
          if (value && typeof value !== "function" && typeof value !== "symbol") {
            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
          }
        }
        function pushStringAttribute(target, name, value) {
          if (typeof value !== "function" && typeof value !== "symbol" && typeof value !== "boolean") {
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        function makeFormFieldPrefix(resumableState) {
          var id = resumableState.nextFormID++;
          return resumableState.idPrefix + id;
        }
        var actionJavaScriptURL = stringToPrecomputedChunk(escapeTextForBrowser(
          // eslint-disable-next-line no-script-url
          "javascript:throw new Error('React form unexpectedly submitted.')"
        ));
        var startHiddenInputChunk = stringToPrecomputedChunk('<input type="hidden"');
        function pushAdditionalFormField(value, key) {
          var target = this;
          target.push(startHiddenInputChunk);
          if (typeof value !== "string") {
            throw new Error("File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action.");
          }
          pushStringAttribute(target, "name", key);
          pushStringAttribute(target, "value", value);
          target.push(endOfStartTagSelfClosing);
        }
        function pushAdditionalFormFields(target, formData) {
          if (formData != null) {
            formData.forEach(pushAdditionalFormField, target);
          }
        }
        function getCustomFormFields(resumableState, formAction) {
          var customAction = formAction.$$FORM_ACTION;
          if (typeof customAction === "function") {
            var prefix2 = makeFormFieldPrefix(resumableState);
            try {
              return formAction.$$FORM_ACTION(prefix2);
            } catch (x) {
              if (typeof x === "object" && x !== null && typeof x.then === "function") {
                throw x;
              }
              {
                error("Failed to serialize an action for progressive enhancement:\n%s", x);
              }
            }
          }
          return null;
        }
        function pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name) {
          var formData = null;
          if (typeof formAction === "function") {
            {
              if (name !== null && !didWarnFormActionName) {
                didWarnFormActionName = true;
                error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.');
              }
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window.");
              }
            }
            var customFields = getCustomFormFields(resumableState, formAction);
            if (customFields !== null) {
              name = customFields.name;
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
            } else {
              target.push(attributeSeparator, stringToChunk("formAction"), attributeAssign, actionJavaScriptURL, attributeEnd);
              name = null;
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(resumableState, renderState);
            }
          }
          if (name != null) {
            pushAttribute(target, "name", name);
          }
          if (formAction != null) {
            pushAttribute(target, "formAction", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "formEncType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "formMethod", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "formTarget", formTarget);
          }
          return formData;
        }
        function pushAttribute(target, name, value) {
          switch (name) {
            case "className": {
              pushStringAttribute(target, "class", value);
              break;
            }
            case "tabIndex": {
              pushStringAttribute(target, "tabindex", value);
              break;
            }
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height": {
              pushStringAttribute(target, name, value);
              break;
            }
            case "style": {
              pushStyleAttribute(target, value);
              return;
            }
            case "src":
            case "href": {
              {
                if (value === "") {
                  {
                    if (name === "src") {
                      error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', name, name);
                    } else {
                      error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', name, name);
                    }
                  }
                  return;
                }
              }
            }
            case "action":
            case "formAction": {
              if (value == null || typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "ref":
              return;
            case "autoFocus":
            case "multiple":
            case "muted": {
              pushBooleanAttribute(target, name.toLowerCase(), value);
              return;
            }
            case "xlinkHref": {
              if (typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var _sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk("xlink:href"), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);
              return;
            }
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha": {
              if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "inert": {
              {
                if (value === "" && !didWarnForNewBooleanPropsWithEmptyValue[name]) {
                  didWarnForNewBooleanPropsWithEmptyValue[name] = true;
                  error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.", name);
                }
              }
            }
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope": {
              if (value && typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              }
              return;
            }
            case "capture":
            case "download": {
              if (value === true) {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              } else if (value === false)
                ;
              else if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "cols":
            case "rows":
            case "size":
            case "span": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value) && value >= 1) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "rowSpan":
            case "start": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value)) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "xlinkActuate":
              pushStringAttribute(target, "xlink:actuate", value);
              return;
            case "xlinkArcrole":
              pushStringAttribute(target, "xlink:arcrole", value);
              return;
            case "xlinkRole":
              pushStringAttribute(target, "xlink:role", value);
              return;
            case "xlinkShow":
              pushStringAttribute(target, "xlink:show", value);
              return;
            case "xlinkTitle":
              pushStringAttribute(target, "xlink:title", value);
              return;
            case "xlinkType":
              pushStringAttribute(target, "xlink:type", value);
              return;
            case "xmlBase":
              pushStringAttribute(target, "xml:base", value);
              return;
            case "xmlLang":
              pushStringAttribute(target, "xml:lang", value);
              return;
            case "xmlSpace":
              pushStringAttribute(target, "xml:space", value);
              return;
            default:
              if (
                // shouldIgnoreAttribute
                // We have already filtered out null/undefined and reserved words.
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              var attributeName = getAttributeAlias(name);
              if (isAttributeNameSafe(attributeName)) {
                switch (typeof value) {
                  case "function":
                  case "symbol":
                    return;
                  case "boolean": {
                    var prefix2 = attributeName.toLowerCase().slice(0, 5);
                    if (prefix2 !== "data-" && prefix2 !== "aria-") {
                      return;
                    }
                  }
                }
                target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        var didWarnFormActionType = false;
        var didWarnFormActionName = false;
        var didWarnFormActionTarget = false;
        var didWarnFormActionMethod = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartAnchor(target, props) {
          target.push(startChunkForTag("a"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "href":
                  if (propValue === "") {
                    pushStringAttribute(target, "href", "");
                  } else {
                    pushAttribute(target, propKey, propValue);
                  }
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartSelect(target, props) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number" && typeof child !== "bigint") {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value = propValue;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var formReplayingRuntimeScript = stringToPrecomputedChunk(formReplaying);
        function injectFormReplayingRuntime(resumableState, renderState) {
          if ((resumableState.instructions & SentFormReplayingRuntime) === NothingSent && !renderState.externalRuntimeScript) {
            resumableState.instructions |= SentFormReplayingRuntime;
            renderState.bootstrapChunks.unshift(renderState.startInlineScript, formReplayingRuntimeScript, endInlineScript);
          }
        }
        var formStateMarkerIsMatching = stringToPrecomputedChunk("<!--F!-->");
        var formStateMarkerIsNotMatching = stringToPrecomputedChunk("<!--F-->");
        function pushFormStateMarkerIsMatching(target) {
          target.push(formStateMarkerIsMatching);
        }
        function pushFormStateMarkerIsNotMatching(target) {
          target.push(formStateMarkerIsNotMatching);
        }
        function pushStartForm(target, props, resumableState, renderState) {
          target.push(startChunkForTag("form"));
          var children = null;
          var innerHTML = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "action":
                  formAction = propValue;
                  break;
                case "encType":
                  formEncType = propValue;
                  break;
                case "method":
                  formMethod = propValue;
                  break;
                case "target":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          var formData = null;
          var formActionName = null;
          if (typeof formAction === "function") {
            {
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window.");
              }
            }
            var customFields = getCustomFormFields(resumableState, formAction);
            if (customFields !== null) {
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
              formActionName = customFields.name;
            } else {
              target.push(attributeSeparator, stringToChunk("action"), attributeAssign, actionJavaScriptURL, attributeEnd);
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(resumableState, renderState);
            }
          }
          if (formAction != null) {
            pushAttribute(target, "action", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "encType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "method", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "target", formTarget);
          }
          target.push(endOfStartTag);
          if (formActionName !== null) {
            target.push(startHiddenInputChunk);
            pushStringAttribute(target, "name", formActionName);
            target.push(endOfStartTagSelfClosing);
            pushAdditionalFormFields(target, formData);
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushInput(target, props, resumableState, renderState) {
          {
            checkControlledValueProps("input", props);
          }
          target.push(startChunkForTag("input"));
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type !== "image" && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('An input can only specify a formAction along with type="submit" or type="image".');
            }
          }
          var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);
          {
            if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          if (checked !== null) {
            pushBooleanAttribute(target, "checked", checked);
          } else if (defaultChecked !== null) {
            pushBooleanAttribute(target, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          pushAdditionalFormFields(target, formData);
          return null;
        }
        function pushStartButton(target, props, resumableState, renderState) {
          target.push(startChunkForTag("button"));
          var children = null;
          var innerHTML = null;
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type != null && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('A button can only specify a formAction along with type="submit" or no type.');
            }
          }
          var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);
          target.push(endOfStartTag);
          pushAdditionalFormFields(target, formData);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartTextArea(target, props) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushMeta(target, props, renderState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {
          if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
            return pushSelfClosing(target, props, "meta");
          } else {
            if (textEmbedded) {
              target.push(textSeparator);
            }
            if (isFallback) {
              return null;
            } else if (typeof props.charSet === "string") {
              return pushSelfClosing(renderState.charsetChunks, props, "meta");
            } else if (props.name === "viewport") {
              return pushSelfClosing(renderState.viewportChunks, props, "meta");
            } else {
              return pushSelfClosing(renderState.hoistableChunks, props, "meta");
            }
          }
        }
        function pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {
          var rel = props.rel;
          var href = props.href;
          var precedence = props.precedence;
          if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== "string" || typeof href !== "string" || href === "") {
            {
              if (rel === "stylesheet" && typeof props.precedence === "string") {
                if (typeof href !== "string" || !href) {
                  error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));
                }
              }
            }
            pushLinkImpl(target, props);
            return null;
          }
          if (props.rel === "stylesheet") {
            var key = getResourceKey(href);
            if (typeof precedence !== "string" || props.disabled != null || props.onLoad || props.onError) {
              {
                if (typeof precedence === "string") {
                  if (props.disabled != null) {
                    error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');
                  } else if (props.onLoad || props.onError) {
                    var propDescription = props.onLoad && props.onError ? "`onLoad` and `onError` props" : props.onLoad ? "`onLoad` prop" : "`onError` prop";
                    error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);
                  }
                }
              }
              return pushLinkImpl(target, props);
            } else {
              var styleQueue = renderState.styles.get(precedence);
              var hasKey = resumableState.styleResources.hasOwnProperty(key);
              var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
              if (resourceState !== EXISTS) {
                resumableState.styleResources[key] = EXISTS;
                if (!styleQueue) {
                  styleQueue = {
                    precedence: stringToChunk(escapeTextForBrowser(precedence)),
                    rules: [],
                    hrefs: [],
                    sheets: /* @__PURE__ */ new Map()
                  };
                  renderState.styles.set(precedence, styleQueue);
                }
                var resource = {
                  state: PENDING$1,
                  props: stylesheetPropsFromRawProps(props)
                };
                if (resourceState) {
                  var preloadState = resourceState;
                  if (preloadState.length === 2) {
                    adoptPreloadCredentials(resource.props, preloadState);
                  }
                  var preloadResource = renderState.preloads.stylesheets.get(key);
                  if (preloadResource && preloadResource.length > 0) {
                    preloadResource.length = 0;
                  } else {
                    resource.state = PRELOADED;
                  }
                }
                styleQueue.sheets.set(key, resource);
                if (hoistableState) {
                  hoistableState.stylesheets.add(resource);
                }
              } else {
                if (styleQueue) {
                  var _resource = styleQueue.sheets.get(key);
                  if (_resource) {
                    if (hoistableState) {
                      hoistableState.stylesheets.add(_resource);
                    }
                  }
                }
              }
              if (textEmbedded) {
                target.push(textSeparator);
              }
              return null;
            }
          } else if (props.onLoad || props.onError) {
            return pushLinkImpl(target, props);
          } else {
            if (textEmbedded) {
              target.push(textSeparator);
            }
            if (isFallback) {
              return null;
            } else {
              return pushLinkImpl(renderState.hoistableChunks, props);
            }
          }
        }
        function pushLinkImpl(target, props) {
          target.push(startChunkForTag("link"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (typeof child === "function" || typeof child === "symbol" || Array.isArray(child)) {
                var childType = typeof child === "function" ? "a Function" : typeof child === "symbol" ? "a Sybmol" : "an Array";
                error("React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. In browsers style Elements can only have `Text` Nodes as children.", childType);
              }
            }
          }
          var precedence = props.precedence;
          var href = props.href;
          if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== "string" || typeof href !== "string" || href === "") {
            return pushStyleImpl(target, props);
          }
          {
            if (href.includes(" ")) {
              error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is "%s".', href);
            }
          }
          var key = getResourceKey(href);
          var styleQueue = renderState.styles.get(precedence);
          var hasKey = resumableState.styleResources.hasOwnProperty(key);
          var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
          if (resourceState !== EXISTS) {
            resumableState.styleResources[key] = EXISTS;
            {
              if (resourceState) {
                error('React encountered a hoistable style tag for the same href as a preload: "%s". When using a style tag to inline styles you should not also preload it as a stylsheet.', href);
              }
            }
            if (!styleQueue) {
              styleQueue = {
                precedence: stringToChunk(escapeTextForBrowser(precedence)),
                rules: [],
                hrefs: [stringToChunk(escapeTextForBrowser(href))],
                sheets: /* @__PURE__ */ new Map()
              };
              renderState.styles.set(precedence, styleQueue);
            } else {
              styleQueue.hrefs.push(stringToChunk(escapeTextForBrowser(href)));
            }
            pushStyleContents(styleQueue.rules, props);
          }
          if (styleQueue) {
            if (hoistableState) {
              hoistableState.styles.add(styleQueue);
            }
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
        }
        function escapeStyleTextContent(styleText) {
          {
            checkHtmlStringCoercion(styleText);
          }
          return ("" + styleText).replace(styleRegex, styleReplacer);
        }
        var styleRegex = /(<\/|<)(s)(tyle)/gi;
        var styleReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\73 " : "\\53 ") + suffix;
        };
        function pushStyleImpl(target, props) {
          target.push(startChunkForTag("style"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeStyleTextContent(child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endChunkForTag("style"));
          return null;
        }
        function pushStyleContents(target, props) {
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
              }
            }
          }
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeStyleTextContent(child)));
          }
          pushInnerHTML(target, innerHTML, children);
          return;
        }
        function pushImg(target, props, resumableState, renderState, pictureOrNoScriptTagInScope) {
          var src = props.src, srcSet = props.srcSet;
          if (props.loading !== "lazy" && (src || srcSet) && (typeof src === "string" || src == null) && (typeof srcSet === "string" || srcSet == null) && props.fetchPriority !== "low" && pictureOrNoScriptTagInScope === false && // We exclude data URIs in src and srcSet since these should not be preloaded
          !(typeof src === "string" && src[4] === ":" && (src[0] === "d" || src[0] === "D") && (src[1] === "a" || src[1] === "A") && (src[2] === "t" || src[2] === "T") && (src[3] === "a" || src[3] === "A")) && !(typeof srcSet === "string" && srcSet[4] === ":" && (srcSet[0] === "d" || srcSet[0] === "D") && (srcSet[1] === "a" || srcSet[1] === "A") && (srcSet[2] === "t" || srcSet[2] === "T") && (srcSet[3] === "a" || srcSet[3] === "A"))) {
            var sizes = typeof props.sizes === "string" ? props.sizes : void 0;
            var key = getImageResourceKey(src, srcSet, sizes);
            var promotablePreloads = renderState.preloads.images;
            var resource = promotablePreloads.get(key);
            if (resource) {
              if (props.fetchPriority === "high" || renderState.highImagePreloads.size < 10) {
                promotablePreloads.delete(key);
                renderState.highImagePreloads.add(resource);
              }
            } else if (!resumableState.imageResources.hasOwnProperty(key)) {
              resumableState.imageResources[key] = PRELOAD_NO_CREDS;
              var crossOrigin = getCrossOriginString(props.crossOrigin);
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // this is a hueristic similar to capping element preloads to 10 unless explicitly
              // fetchPriority="high". We use length here which means it will fit fewer images when
              // the urls are long and more when short. arguably byte size is a better hueristic because
              // it directly translates to how much we send down before content is actually seen.
              // We could unify the counts and also make it so the total is tracked regardless of
              // flushing output but since the headers are likely to be go earlier than content
              // they don't really conflict so for now I've kept them separate
              (props.fetchPriority === "high" || headers.highImagePreloads.length < 500) && // We manually construct the options for the preload only from strings. We don't want to pollute
              // the params list with arbitrary props and if we copied everything over as it we might get
              // coercion errors. We have checks for this in Dev but it seems safer to just only accept values
              // that are strings
              (header = getPreloadAsHeader(src, "image", {
                imageSrcSet: props.srcSet,
                imageSizes: props.sizes,
                crossOrigin,
                integrity: props.integrity,
                nonce: props.nonce,
                type: props.type,
                fetchPriority: props.fetchPriority,
                referrerPolicy: props.refererPolicy
              }), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.image[key] = PRELOAD_NO_CREDS;
                if (headers.highImagePreloads) {
                  headers.highImagePreloads += ", ";
                }
                headers.highImagePreloads += header;
              } else {
                resource = [];
                pushLinkImpl(resource, {
                  rel: "preload",
                  as: "image",
                  // There is a bug in Safari where imageSrcSet is not respected on preload links
                  // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.
                  // This harms older browers that do not support imageSrcSet by making their preloads not work
                  // but this population is shrinking fast and is already small so we accept this tradeoff.
                  href: srcSet ? void 0 : src,
                  imageSrcSet: srcSet,
                  imageSizes: sizes,
                  crossOrigin,
                  integrity: props.integrity,
                  type: props.type,
                  fetchPriority: props.fetchPriority,
                  referrerPolicy: props.referrerPolicy
                });
                if (props.fetchPriority === "high" || renderState.highImagePreloads.size < 10) {
                  renderState.highImagePreloads.add(resource);
                } else {
                  renderState.bulkPreloads.add(resource);
                  promotablePreloads.set(key, resource);
                }
              }
            }
          }
          return pushSelfClosing(target, props, "img");
        }
        function pushSelfClosing(target, props, tag) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushTitle(target, props, renderState, insertionMode, noscriptTagInScope, isFallback) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (Array.isArray(children) && children.length > 1) {
                error("React expects the `children` prop of <title> tags to be a string, number, bigint, or object with a novel `toString` method but found an Array with length %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes. For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.", children.length);
              } else if (typeof child === "function" || typeof child === "symbol") {
                var childType = typeof child === "function" ? "a Function" : "a Sybmol";
                error("React expect children of <title> tags to be a string, number, bigint, or object with a novel `toString` method but found %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value.", childType);
              } else if (child && child.toString === {}.toString) {
                if (child.$$typeof != null) {
                  error("React expects the `children` prop of <title> tags to be a string, number, bigint, or object with a novel `toString` method but found an object that appears to be a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.");
                } else {
                  error("React expects the `children` prop of <title> tags to be a string, number, bigint, or object with a novel `toString` method but found an object that does not implement a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title> is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.");
                }
              }
            }
          }
          if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {
            if (isFallback) {
              return null;
            } else {
              pushTitleImpl(renderState.hoistableChunks, props);
            }
          } else {
            return pushTitleImpl(target, props);
          }
        }
        function pushTitleImpl(target, props) {
          target.push(startChunkForTag("title"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endChunkForTag("title"));
          return null;
        }
        function pushStartHead(target, props, renderState, insertionMode) {
          if (insertionMode < HTML_MODE && renderState.headChunks === null) {
            renderState.headChunks = [];
            return pushStartGenericElement(renderState.headChunks, props, "head");
          } else {
            return pushStartGenericElement(target, props, "head");
          }
        }
        function pushStartHtml(target, props, renderState, insertionMode) {
          if (insertionMode === ROOT_HTML_MODE && renderState.htmlChunks === null) {
            renderState.htmlChunks = [doctypeChunk];
            return pushStartGenericElement(renderState.htmlChunks, props, "html");
          } else {
            return pushStartGenericElement(target, props, "html");
          }
        }
        function pushScript(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {
          var asyncProp = props.async;
          if (typeof props.src !== "string" || !props.src || !(asyncProp && typeof asyncProp !== "function" && typeof asyncProp !== "symbol") || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
            return pushScriptImpl(target, props);
          }
          var src = props.src;
          var key = getResourceKey(src);
          var resources, preloads;
          if (props.type === "module") {
            resources = resumableState.moduleScriptResources;
            preloads = renderState.preloads.moduleScripts;
          } else {
            resources = resumableState.scriptResources;
            preloads = renderState.preloads.scripts;
          }
          var hasKey = resources.hasOwnProperty(key);
          var resourceState = hasKey ? resources[key] : void 0;
          if (resourceState !== EXISTS) {
            resources[key] = EXISTS;
            var scriptProps = props;
            if (resourceState) {
              var preloadState = resourceState;
              if (preloadState.length === 2) {
                scriptProps = assign({}, props);
                adoptPreloadCredentials(scriptProps, preloadState);
              }
              var preloadResource = preloads.get(key);
              if (preloadResource) {
                preloadResource.length = 0;
              }
            }
            var resource = [];
            renderState.scripts.add(resource);
            pushScriptImpl(resource, scriptProps);
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          return null;
        }
        function pushScriptImpl(target, props) {
          target.push(startChunkForTag("script"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            if (children != null && typeof children !== "string") {
              var descriptiveStatement = typeof children === "number" ? "a number for children" : Array.isArray(children) ? "an array for children" : "something unexpected for children";
              error("A script element was rendered with %s. If script element has children it must be a single string. Consider using dangerouslySetInnerHTML or passing a plain string as children.", descriptiveStatement);
            }
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(escapeEntireInlineScriptContent(children)));
          }
          target.push(endChunkForTag("script"));
          return null;
        }
        function pushStartGenericElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              var attributeName = propKey;
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyleAttribute(target, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                case "ref":
                  break;
                case "className":
                  attributeName = "class";
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    if (propValue === false) {
                      continue;
                    } else if (propValue === true) {
                      propValue = "";
                    } else if (typeof propValue === "object") {
                      continue;
                    }
                    target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        function pushStartInstance(target, type, props, resumableState, renderState, hoistableState, formatContext, textEmbedded, isFallback) {
          {
            validateProperties$2(type, props);
            validateProperties$1(type, props);
            validateProperties(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "div":
            case "span":
            case "svg":
            case "path":
              break;
            case "a": {
              return pushStartAnchor(target, props);
            }
            case "g":
            case "p":
            case "li":
              break;
            case "select":
              return pushStartSelect(target, props);
            case "option":
              return pushStartOption(target, props, formatContext);
            case "textarea":
              return pushStartTextArea(target, props);
            case "input":
              return pushInput(target, props, resumableState, renderState);
            case "button":
              return pushStartButton(target, props, resumableState, renderState);
            case "form":
              return pushStartForm(target, props, resumableState, renderState);
            case "menuitem":
              return pushStartMenuItem(target, props);
            case "title":
              return pushTitle(target, props, renderState, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "link":
              return pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "script":
              return pushScript(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));
            case "style":
              return pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));
            case "meta":
              return pushMeta(target, props, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type);
            }
            case "img": {
              return pushImg(target, props, resumableState, renderState, !!(formatContext.tagScope & (PICTURE_SCOPE | NOSCRIPT_SCOPE)));
            }
            case "base":
            case "area":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "keygen":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              break;
            }
            case "head":
              return pushStartHead(target, props, renderState, formatContext.insertionMode);
            case "html": {
              return pushStartHtml(target, props, renderState, formatContext.insertionMode);
            }
            default: {
              if (type.indexOf("-") !== -1) {
                return pushStartCustomElement(target, props, type);
              }
            }
          }
          return pushStartGenericElement(target, props, type);
        }
        var endTagCache = /* @__PURE__ */ new Map();
        function endChunkForTag(tag) {
          var chunk = endTagCache.get(tag);
          if (chunk === void 0) {
            chunk = stringToPrecomputedChunk("</" + tag + ">");
            endTagCache.set(tag, chunk);
          }
          return chunk;
        }
        function pushEndInstance(target, type, props, resumableState, formatContext) {
          switch (type) {
            case "title":
            case "style":
            case "script":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return;
            }
            case "body": {
              if (formatContext.insertionMode <= HTML_HTML_MODE) {
                resumableState.hasBody = true;
                return;
              }
              break;
            }
            case "html":
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                resumableState.hasHtml = true;
                return;
              }
              break;
          }
          target.push(endChunkForTag(type));
        }
        function writeBootstrap(destination, renderState) {
          var bootstrapChunks = renderState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            var lastChunk = bootstrapChunks[i];
            bootstrapChunks.length = 0;
            return writeChunkAndReturn(destination, lastChunk);
          }
          return true;
        }
        function writeCompletedRoot(destination, renderState) {
          return writeBootstrap(destination, renderState);
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, renderState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, renderState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError1D = stringToPrecomputedChunk(' data-cstck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary$1(destination, renderState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, renderState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, stringToChunk(id.toString(16)));
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary$1(destination, renderState, errorDigest, errorMessage, errorStack, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMessage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1D);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary$1(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary$1(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, renderState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + '$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScriptEnd = stringToPrecomputedChunk('")</script>');
        var completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi="" data-sid="');
        var completeSegmentData2 = stringToPrecomputedChunk('" data-pid="');
        var completeSegmentDataEnd = dataElementQuotedEnd;
        function writeCompletedSegmentInstruction(destination, resumableState, renderState, contentSegmentID) {
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if ((resumableState.instructions & SentCompleteSegmentFunction) === NothingSent) {
              resumableState.instructions |= SentCompleteSegmentFunction;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
          } else {
            writeChunk(destination, completeSegmentData1);
          }
          writeChunk(destination, renderState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            writeChunk(destination, completeSegmentScript2);
          } else {
            writeChunk(destination, completeSegmentData2);
          }
          writeChunk(destination, renderState.placeholderPrefix);
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            return writeChunkAndReturn(destination, completeSegmentScriptEnd);
          } else {
            return writeChunkAndReturn(destination, completeSegmentDataEnd);
          }
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3a = stringToPrecomputedChunk('",');
        var completeBoundaryScript3b = stringToPrecomputedChunk('"');
        var completeBoundaryScriptEnd = stringToPrecomputedChunk(")</script>");
        var completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci="" data-bid="');
        var completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri="" data-bid="');
        var completeBoundaryData2 = stringToPrecomputedChunk('" data-sid="');
        var completeBoundaryData3a = stringToPrecomputedChunk('" data-sty="');
        var completeBoundaryDataEnd = dataElementQuotedEnd;
        function writeCompletedBoundaryInstruction(destination, resumableState, renderState, id, hoistableState) {
          var requiresStyleInsertion = renderState.stylesToHoist;
          renderState.stylesToHoist = false;
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if (requiresStyleInsertion) {
              if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                resumableState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;
                writeChunk(destination, completeBoundaryWithStylesScript1FullBoth);
              } else if ((resumableState.instructions & SentStyleInsertionFunction) === NothingSent) {
                resumableState.instructions |= SentStyleInsertionFunction;
                writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);
              } else {
                writeChunk(destination, completeBoundaryWithStylesScript1Partial);
              }
            } else {
              if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                resumableState.instructions |= SentCompleteBoundaryFunction;
                writeChunk(destination, completeBoundaryScript1Full);
              } else {
                writeChunk(destination, completeBoundaryScript1Partial);
              }
            }
          } else {
            if (requiresStyleInsertion) {
              writeChunk(destination, completeBoundaryWithStylesData1);
            } else {
              writeChunk(destination, completeBoundaryData1);
            }
          }
          var idChunk = stringToChunk(id.toString(16));
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, idChunk);
          if (scriptFormat) {
            writeChunk(destination, completeBoundaryScript2);
          } else {
            writeChunk(destination, completeBoundaryData2);
          }
          writeChunk(destination, renderState.segmentPrefix);
          writeChunk(destination, idChunk);
          if (requiresStyleInsertion) {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3a);
              writeStyleResourceDependenciesInJS(destination, hoistableState);
            } else {
              writeChunk(destination, completeBoundaryData3a);
              writeStyleResourceDependenciesInAttr(destination, hoistableState);
            }
          } else {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3b);
            }
          }
          var writeMore;
          if (scriptFormat) {
            writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);
          } else {
            writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);
          }
          return writeBootstrap(destination, renderState) && writeMore;
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        var clientRenderScriptEnd = stringToPrecomputedChunk(")</script>");
        var clientRenderData1 = stringToPrecomputedChunk('<template data-rxi="" data-bid="');
        var clientRenderData2 = stringToPrecomputedChunk('" data-dgst="');
        var clientRenderData3 = stringToPrecomputedChunk('" data-msg="');
        var clientRenderData4 = stringToPrecomputedChunk('" data-stck="');
        var clientRenderData5 = stringToPrecomputedChunk('" data-cstck="');
        var clientRenderDataEnd = dataElementQuotedEnd;
        function writeClientRenderBoundaryInstruction(destination, resumableState, renderState, id, errorDigest, errorMessage, errorStack, errorComponentStack) {
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if ((resumableState.instructions & SentClientRenderFunction) === NothingSent) {
              resumableState.instructions |= SentClientRenderFunction;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
          } else {
            writeChunk(destination, clientRenderData1);
          }
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, stringToChunk(id.toString(16)));
          if (scriptFormat) {
            writeChunk(destination, clientRenderScript1A);
          }
          if (errorDigest || errorMessage || errorStack || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
            } else {
              writeChunk(destination, clientRenderData2);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || "")));
            }
          }
          if (errorMessage || errorStack || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
            } else {
              writeChunk(destination, clientRenderData3);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || "")));
            }
          }
          if (errorStack || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorStack || "")));
            } else {
              writeChunk(destination, clientRenderData4);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorStack || "")));
            }
          }
          if (errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
            } else {
              writeChunk(destination, clientRenderData5);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
            }
          }
          if (scriptFormat) {
            return writeChunkAndReturn(destination, clientRenderScriptEnd);
          } else {
            return writeChunkAndReturn(destination, clientRenderDataEnd);
          }
        }
        var regexForJSStringsInInstructionScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInInstructionScripts, function(match) {
            switch (match) {
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var regexForJSStringsInScripts = /[&><\u2028\u2029]/g;
        function escapeJSObjectForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              case "&":
                return "\\u0026";
              case ">":
                return "\\u003e";
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media="not all" data-precedence="');
        var lateStyleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var lateStyleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var lateStyleTagTemplateClose = stringToPrecomputedChunk("</style>");
        var currentlyRenderingBoundaryHasStylesToHoist = false;
        var destinationHasCapacity = true;
        function flushStyleTagsLateForBoundary(styleQueue) {
          var rules = styleQueue.rules;
          var hrefs = styleQueue.hrefs;
          {
            if (rules.length > 0 && hrefs.length === 0) {
              error("React expected to have at least one href for an a hoistable style but found none. This is a bug in React.");
            }
          }
          var i = 0;
          if (hrefs.length) {
            writeChunk(this, lateStyleTagResourceOpen1);
            writeChunk(this, styleQueue.precedence);
            writeChunk(this, lateStyleTagResourceOpen2);
            for (; i < hrefs.length - 1; i++) {
              writeChunk(this, hrefs[i]);
              writeChunk(this, spaceSeparator);
            }
            writeChunk(this, hrefs[i]);
            writeChunk(this, lateStyleTagResourceOpen3);
            for (i = 0; i < rules.length; i++) {
              writeChunk(this, rules[i]);
            }
            destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose);
            currentlyRenderingBoundaryHasStylesToHoist = true;
            rules.length = 0;
            hrefs.length = 0;
          }
        }
        function hasStylesToHoist(stylesheet) {
          if (stylesheet.state !== PREAMBLE) {
            currentlyRenderingBoundaryHasStylesToHoist = true;
            return true;
          }
          return false;
        }
        function writeHoistablesForBoundary(destination, hoistableState, renderState) {
          currentlyRenderingBoundaryHasStylesToHoist = false;
          destinationHasCapacity = true;
          hoistableState.styles.forEach(flushStyleTagsLateForBoundary, destination);
          hoistableState.stylesheets.forEach(hasStylesToHoist);
          if (currentlyRenderingBoundaryHasStylesToHoist) {
            renderState.stylesToHoist = true;
          }
          return destinationHasCapacity;
        }
        function flushResource(resource) {
          for (var i = 0; i < resource.length; i++) {
            writeChunk(this, resource[i]);
          }
          resource.length = 0;
        }
        var stylesheetFlushingQueue = [];
        function flushStyleInPreamble(stylesheet, key, map) {
          pushLinkImpl(stylesheetFlushingQueue, stylesheet.props);
          for (var i = 0; i < stylesheetFlushingQueue.length; i++) {
            writeChunk(this, stylesheetFlushingQueue[i]);
          }
          stylesheetFlushingQueue.length = 0;
          stylesheet.state = PREAMBLE;
        }
        var styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence="');
        var styleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var spaceSeparator = stringToPrecomputedChunk(" ");
        var styleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var styleTagResourceClose = stringToPrecomputedChunk("</style>");
        function flushStylesInPreamble(styleQueue, precedence) {
          var hasStylesheets = styleQueue.sheets.size > 0;
          styleQueue.sheets.forEach(flushStyleInPreamble, this);
          styleQueue.sheets.clear();
          var rules = styleQueue.rules;
          var hrefs = styleQueue.hrefs;
          if (!hasStylesheets || hrefs.length) {
            writeChunk(this, styleTagResourceOpen1);
            writeChunk(this, styleQueue.precedence);
            var i = 0;
            if (hrefs.length) {
              writeChunk(this, styleTagResourceOpen2);
              for (; i < hrefs.length - 1; i++) {
                writeChunk(this, hrefs[i]);
                writeChunk(this, spaceSeparator);
              }
              writeChunk(this, hrefs[i]);
            }
            writeChunk(this, styleTagResourceOpen3);
            for (i = 0; i < rules.length; i++) {
              writeChunk(this, rules[i]);
            }
            writeChunk(this, styleTagResourceClose);
            rules.length = 0;
            hrefs.length = 0;
          }
        }
        function preloadLateStyle(stylesheet) {
          if (stylesheet.state === PENDING$1) {
            stylesheet.state = PRELOADED;
            var preloadProps = preloadAsStylePropsFromProps(stylesheet.props.href, stylesheet.props);
            pushLinkImpl(stylesheetFlushingQueue, preloadProps);
            for (var i = 0; i < stylesheetFlushingQueue.length; i++) {
              writeChunk(this, stylesheetFlushingQueue[i]);
            }
            stylesheetFlushingQueue.length = 0;
          }
        }
        function preloadLateStyles(styleQueue) {
          styleQueue.sheets.forEach(preloadLateStyle, this);
          styleQueue.sheets.clear();
        }
        function writePreamble(destination, resumableState, renderState, willFlushAllSegments) {
          if (!willFlushAllSegments && renderState.externalRuntimeScript) {
            var _renderState$external = renderState.externalRuntimeScript, src = _renderState$external.src, chunks = _renderState$external.chunks;
            internalPreinitScript(resumableState, renderState, src, chunks);
          }
          var htmlChunks = renderState.htmlChunks;
          var headChunks = renderState.headChunks;
          var i = 0;
          if (htmlChunks) {
            for (i = 0; i < htmlChunks.length; i++) {
              writeChunk(destination, htmlChunks[i]);
            }
            if (headChunks) {
              for (i = 0; i < headChunks.length; i++) {
                writeChunk(destination, headChunks[i]);
              }
            } else {
              writeChunk(destination, startChunkForTag("head"));
              writeChunk(destination, endOfStartTag);
            }
          } else if (headChunks) {
            for (i = 0; i < headChunks.length; i++) {
              writeChunk(destination, headChunks[i]);
            }
          }
          var charsetChunks = renderState.charsetChunks;
          for (i = 0; i < charsetChunks.length; i++) {
            writeChunk(destination, charsetChunks[i]);
          }
          charsetChunks.length = 0;
          renderState.preconnects.forEach(flushResource, destination);
          renderState.preconnects.clear();
          var viewportChunks = renderState.viewportChunks;
          for (i = 0; i < viewportChunks.length; i++) {
            writeChunk(destination, viewportChunks[i]);
          }
          viewportChunks.length = 0;
          renderState.fontPreloads.forEach(flushResource, destination);
          renderState.fontPreloads.clear();
          renderState.highImagePreloads.forEach(flushResource, destination);
          renderState.highImagePreloads.clear();
          renderState.styles.forEach(flushStylesInPreamble, destination);
          var importMapChunks = renderState.importMapChunks;
          for (i = 0; i < importMapChunks.length; i++) {
            writeChunk(destination, importMapChunks[i]);
          }
          importMapChunks.length = 0;
          renderState.bootstrapScripts.forEach(flushResource, destination);
          renderState.scripts.forEach(flushResource, destination);
          renderState.scripts.clear();
          renderState.bulkPreloads.forEach(flushResource, destination);
          renderState.bulkPreloads.clear();
          var hoistableChunks = renderState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
          if (htmlChunks && headChunks === null) {
            writeChunk(destination, endChunkForTag("head"));
          }
        }
        function writeHoistables(destination, resumableState, renderState) {
          var i = 0;
          var viewportChunks = renderState.viewportChunks;
          for (i = 0; i < viewportChunks.length; i++) {
            writeChunk(destination, viewportChunks[i]);
          }
          viewportChunks.length = 0;
          renderState.preconnects.forEach(flushResource, destination);
          renderState.preconnects.clear();
          renderState.fontPreloads.forEach(flushResource, destination);
          renderState.fontPreloads.clear();
          renderState.highImagePreloads.forEach(flushResource, destination);
          renderState.highImagePreloads.clear();
          renderState.styles.forEach(preloadLateStyles, destination);
          renderState.scripts.forEach(flushResource, destination);
          renderState.scripts.clear();
          renderState.bulkPreloads.forEach(flushResource, destination);
          renderState.bulkPreloads.clear();
          var hoistableChunks = renderState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
        }
        function writePostamble(destination, resumableState) {
          if (resumableState.hasBody) {
            writeChunk(destination, endChunkForTag("body"));
          }
          if (resumableState.hasHtml) {
            writeChunk(destination, endChunkForTag("html"));
          }
        }
        var arrayFirstOpenBracket = stringToPrecomputedChunk("[");
        var arraySubsequentOpenBracket = stringToPrecomputedChunk(",[");
        var arrayInterstitial = stringToPrecomputedChunk(",");
        var arrayCloseBracket = stringToPrecomputedChunk("]");
        function writeStyleResourceDependenciesInJS(destination, hoistableState) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          hoistableState.stylesheets.forEach(function(resource) {
            if (resource.state === PREAMBLE)
              ;
            else if (resource.state === LATE) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state = LATE;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInJS(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
        }
        function writeStyleResourceDependencyInJS(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInJS(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInJS(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
            case "ref":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));
        }
        function writeStyleResourceDependenciesInAttr(destination, hoistableState) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          hoistableState.stylesheets.forEach(function(resource) {
            if (resource.state === PREAMBLE)
              ;
            else if (resource.state === LATE) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state = LATE;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
        }
        function writeStyleResourceDependencyInAttr(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInAttr(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInAttr(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
            case "ref":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));
        }
        var PENDING$1 = 0;
        var PRELOADED = 1;
        var PREAMBLE = 2;
        var LATE = 3;
        function createHoistableState() {
          return {
            styles: /* @__PURE__ */ new Set(),
            stylesheets: /* @__PURE__ */ new Set()
          };
        }
        function getResourceKey(href) {
          return href;
        }
        function getImageResourceKey(href, imageSrcSet, imageSizes) {
          if (imageSrcSet) {
            return imageSrcSet + "\n" + (imageSizes || "");
          }
          return href;
        }
        function prefetchDNS(href) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.D(
              /* prefetchDNS */
              href
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (typeof href === "string" && href) {
            var key = getResourceKey(href);
            if (!resumableState.dnsResources.hasOwnProperty(key)) {
              resumableState.dnsResources[key] = EXISTS;
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // Compute the header since we might be able to fit it in the max length
              (header = getPrefetchDNSAsHeader(href), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.dns[key] = EXISTS;
                if (headers.preconnects) {
                  headers.preconnects += ", ";
                }
                headers.preconnects += header;
              } else {
                var resource = [];
                pushLinkImpl(resource, {
                  href,
                  rel: "dns-prefetch"
                });
                renderState.preconnects.add(resource);
              }
            }
            flushResources(request);
          }
        }
        function preconnect(href, crossOrigin) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.C(
              /* preconnect */
              href,
              crossOrigin
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (typeof href === "string" && href) {
            var bucket = crossOrigin === "use-credentials" ? "credentials" : typeof crossOrigin === "string" ? "anonymous" : "default";
            var key = getResourceKey(href);
            if (!resumableState.connectResources[bucket].hasOwnProperty(key)) {
              resumableState.connectResources[bucket][key] = EXISTS;
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // Compute the header since we might be able to fit it in the max length
              (header = getPreconnectAsHeader(href, crossOrigin), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.connect[bucket][key] = EXISTS;
                if (headers.preconnects) {
                  headers.preconnects += ", ";
                }
                headers.preconnects += header;
              } else {
                var resource = [];
                pushLinkImpl(resource, {
                  rel: "preconnect",
                  href,
                  crossOrigin
                });
                renderState.preconnects.add(resource);
              }
            }
            flushResources(request);
          }
        }
        function preload(href, as, options) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.L(
              /* preload */
              href,
              as,
              options
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (as && href) {
            switch (as) {
              case "image": {
                var imageSrcSet, imageSizes, fetchPriority;
                if (options) {
                  imageSrcSet = options.imageSrcSet;
                  imageSizes = options.imageSizes;
                  fetchPriority = options.fetchPriority;
                }
                var key = getImageResourceKey(href, imageSrcSet, imageSizes);
                if (resumableState.imageResources.hasOwnProperty(key)) {
                  return;
                }
                resumableState.imageResources[key] = PRELOAD_NO_CREDS;
                var headers = renderState.headers;
                var header;
                if (headers && headers.remainingCapacity > 0 && fetchPriority === "high" && // Compute the header since we might be able to fit it in the max length
                (header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit
                // we assume all the rest won't as well. This is to avoid getting into a situation
                // where we have a very small remaining capacity but no headers will ever fit and we end
                // up constantly trying to see if the next resource might make it. In the future we can
                // make this behavior different between render and prerender since in the latter case
                // we are less sensitive to the current requests runtime per and more sensitive to maximizing
                // headers.
                (headers.remainingCapacity -= header.length) >= 2)) {
                  renderState.resets.image[key] = PRELOAD_NO_CREDS;
                  if (headers.highImagePreloads) {
                    headers.highImagePreloads += ", ";
                  }
                  headers.highImagePreloads += header;
                } else {
                  var resource = [];
                  pushLinkImpl(resource, assign({
                    rel: "preload",
                    // There is a bug in Safari where imageSrcSet is not respected on preload links
                    // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.
                    // This harms older browers that do not support imageSrcSet by making their preloads not work
                    // but this population is shrinking fast and is already small so we accept this tradeoff.
                    href: imageSrcSet ? void 0 : href,
                    as
                  }, options));
                  if (fetchPriority === "high") {
                    renderState.highImagePreloads.add(resource);
                  } else {
                    renderState.bulkPreloads.add(resource);
                    renderState.preloads.images.set(key, resource);
                  }
                }
                break;
              }
              case "style": {
                var _key = getResourceKey(href);
                if (resumableState.styleResources.hasOwnProperty(_key)) {
                  return;
                }
                var _resource2 = [];
                pushLinkImpl(_resource2, assign({
                  rel: "preload",
                  href,
                  as
                }, options));
                resumableState.styleResources[_key] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                renderState.preloads.stylesheets.set(_key, _resource2);
                renderState.bulkPreloads.add(_resource2);
                break;
              }
              case "script": {
                var _key2 = getResourceKey(href);
                if (resumableState.scriptResources.hasOwnProperty(_key2)) {
                  return;
                }
                var _resource3 = [];
                renderState.preloads.scripts.set(_key2, _resource3);
                renderState.bulkPreloads.add(_resource3);
                pushLinkImpl(_resource3, assign({
                  rel: "preload",
                  href,
                  as
                }, options));
                resumableState.scriptResources[_key2] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                break;
              }
              default: {
                var _key3 = getResourceKey(href);
                var hasAsType = resumableState.unknownResources.hasOwnProperty(as);
                var resources;
                if (hasAsType) {
                  resources = resumableState.unknownResources[as];
                  if (resources.hasOwnProperty(_key3)) {
                    return;
                  }
                } else {
                  resources = {};
                  resumableState.unknownResources[as] = resources;
                }
                resources[_key3] = PRELOAD_NO_CREDS;
                var _headers = renderState.headers;
                var _header;
                if (_headers && _headers.remainingCapacity > 0 && as === "font" && // We compute the header here because we might be able to fit it in the max length
                (_header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit
                // we assume all the rest won't as well. This is to avoid getting into a situation
                // where we have a very small remaining capacity but no headers will ever fit and we end
                // up constantly trying to see if the next resource might make it. In the future we can
                // make this behavior different between render and prerender since in the latter case
                // we are less sensitive to the current requests runtime per and more sensitive to maximizing
                // headers.
                (_headers.remainingCapacity -= _header.length) >= 2)) {
                  renderState.resets.font[_key3] = PRELOAD_NO_CREDS;
                  if (_headers.fontPreloads) {
                    _headers.fontPreloads += ", ";
                  }
                  _headers.fontPreloads += _header;
                } else {
                  var _resource4 = [];
                  var props = assign({
                    rel: "preload",
                    href,
                    as
                  }, options);
                  pushLinkImpl(_resource4, props);
                  switch (as) {
                    case "font":
                      renderState.fontPreloads.add(_resource4);
                      break;
                    default:
                      renderState.bulkPreloads.add(_resource4);
                  }
                }
              }
            }
            flushResources(request);
          }
        }
        function preloadModule(href, options) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.m(
              /* preloadModule */
              href,
              options
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (href) {
            var key = getResourceKey(href);
            var as = options && typeof options.as === "string" ? options.as : "script";
            var resource;
            switch (as) {
              case "script": {
                if (resumableState.moduleScriptResources.hasOwnProperty(key)) {
                  return;
                }
                resource = [];
                resumableState.moduleScriptResources[key] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                renderState.preloads.moduleScripts.set(key, resource);
                break;
              }
              default: {
                var hasAsType = resumableState.moduleUnknownResources.hasOwnProperty(as);
                var resources;
                if (hasAsType) {
                  resources = resumableState.unknownResources[as];
                  if (resources.hasOwnProperty(key)) {
                    return;
                  }
                } else {
                  resources = {};
                  resumableState.moduleUnknownResources[as] = resources;
                }
                resource = [];
                resources[key] = PRELOAD_NO_CREDS;
              }
            }
            pushLinkImpl(resource, assign({
              rel: "modulepreload",
              href
            }, options));
            renderState.bulkPreloads.add(resource);
            flushResources(request);
          }
        }
        function preinitStyle(href, precedence, options) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.S(
              /* preinitStyle */
              href,
              precedence,
              options
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (href) {
            precedence = precedence || "default";
            var key = getResourceKey(href);
            var styleQueue = renderState.styles.get(precedence);
            var hasKey = resumableState.styleResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.styleResources[key] = EXISTS;
              if (!styleQueue) {
                styleQueue = {
                  precedence: stringToChunk(escapeTextForBrowser(precedence)),
                  rules: [],
                  hrefs: [],
                  sheets: /* @__PURE__ */ new Map()
                };
                renderState.styles.set(precedence, styleQueue);
              }
              var resource = {
                state: PENDING$1,
                props: assign({
                  rel: "stylesheet",
                  href,
                  "data-precedence": precedence
                }, options)
              };
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(resource.props, preloadState);
                }
                var preloadResource = renderState.preloads.stylesheets.get(key);
                if (preloadResource && preloadResource.length > 0) {
                  preloadResource.length = 0;
                } else {
                  resource.state = PRELOADED;
                }
              }
              styleQueue.sheets.set(key, resource);
              flushResources(request);
            }
          }
        }
        function preinitScript(src, options) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.X(
              /* preinitScript */
              src,
              options
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (src) {
            var key = getResourceKey(src);
            var hasKey = resumableState.scriptResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.scriptResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.scriptResources[key] = EXISTS;
              var props = assign({
                src,
                async: true
              }, options);
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(props, preloadState);
                }
                var preloadResource = renderState.preloads.scripts.get(key);
                if (preloadResource) {
                  preloadResource.length = 0;
                }
              }
              var resource = [];
              renderState.scripts.add(resource);
              pushScriptImpl(resource, props);
              flushResources(request);
            }
            return;
          }
        }
        function preinitModuleScript(src, options) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.M(
              /* preinitModuleScript */
              src,
              options
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (src) {
            var key = getResourceKey(src);
            var hasKey = resumableState.moduleScriptResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.moduleScriptResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.moduleScriptResources[key] = EXISTS;
              var props = assign({
                src,
                type: "module",
                async: true
              }, options);
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(props, preloadState);
                }
                var preloadResource = renderState.preloads.moduleScripts.get(key);
                if (preloadResource) {
                  preloadResource.length = 0;
                }
              }
              var resource = [];
              renderState.scripts.add(resource);
              pushScriptImpl(resource, props);
              flushResources(request);
            }
            return;
          }
        }
        function preloadBootstrapScriptOrModule(resumableState, renderState, href, props) {
          var key = getResourceKey(href);
          {
            if (resumableState.scriptResources.hasOwnProperty(key) || resumableState.moduleScriptResources.hasOwnProperty(key)) {
              error('Internal React Error: React expected bootstrap script or module with src "%s" to not have been preloaded already. please file an issue', href);
            }
          }
          resumableState.scriptResources[key] = EXISTS;
          resumableState.moduleScriptResources[key] = EXISTS;
          var resource = [];
          pushLinkImpl(resource, props);
          renderState.bootstrapScripts.add(resource);
        }
        function internalPreinitScript(resumableState, renderState, src, chunks) {
          var key = getResourceKey(src);
          if (!resumableState.scriptResources.hasOwnProperty(key)) {
            var resource = chunks;
            resumableState.scriptResources[key] = EXISTS;
            renderState.scripts.add(resource);
          }
          return;
        }
        function preloadAsStylePropsFromProps(href, props) {
          return {
            rel: "preload",
            as: "style",
            href,
            crossOrigin: props.crossOrigin,
            fetchPriority: props.fetchPriority,
            integrity: props.integrity,
            media: props.media,
            hrefLang: props.hrefLang,
            referrerPolicy: props.referrerPolicy
          };
        }
        function stylesheetPropsFromRawProps(rawProps) {
          return assign({}, rawProps, {
            "data-precedence": rawProps.precedence,
            precedence: null
          });
        }
        function adoptPreloadCredentials(target, preloadState) {
          if (target.crossOrigin == null)
            target.crossOrigin = preloadState[0];
          if (target.integrity == null)
            target.integrity = preloadState[1];
        }
        function getPrefetchDNSAsHeader(href) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          return "<" + escapedHref + ">; rel=dns-prefetch";
        }
        function getPreconnectAsHeader(href, crossOrigin) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          var value = "<" + escapedHref + ">; rel=preconnect";
          if (typeof crossOrigin === "string") {
            var escapedCrossOrigin = escapeStringForLinkHeaderQuotedParamValueContext(crossOrigin, "crossOrigin");
            value += '; crossorigin="' + escapedCrossOrigin + '"';
          }
          return value;
        }
        function getPreloadAsHeader(href, as, params) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          var escapedAs = escapeStringForLinkHeaderQuotedParamValueContext(as, "as");
          var value = "<" + escapedHref + '>; rel=preload; as="' + escapedAs + '"';
          for (var paramName in params) {
            if (hasOwnProperty.call(params, paramName)) {
              var paramValue = params[paramName];
              if (typeof paramValue === "string") {
                value += "; " + paramName.toLowerCase() + '="' + escapeStringForLinkHeaderQuotedParamValueContext(paramValue, paramName) + '"';
              }
            }
          }
          return value;
        }
        function getStylesheetPreloadAsHeader(stylesheet) {
          var props = stylesheet.props;
          var preloadOptions = {
            crossOrigin: props.crossOrigin,
            integrity: props.integrity,
            nonce: props.nonce,
            type: props.type,
            fetchPriority: props.fetchPriority,
            referrerPolicy: props.referrerPolicy,
            media: props.media
          };
          return getPreloadAsHeader(props.href, "style", preloadOptions);
        }
        var regexForHrefInLinkHeaderURLContext = /[<>\r\n]/g;
        function escapeHrefForLinkHeaderURLContext(hrefInput) {
          {
            checkAttributeStringCoercion(hrefInput, "href");
          }
          var coercedHref = "" + hrefInput;
          return coercedHref.replace(regexForHrefInLinkHeaderURLContext, escapeHrefForLinkHeaderURLContextReplacer);
        }
        function escapeHrefForLinkHeaderURLContextReplacer(match) {
          switch (match) {
            case "<":
              return "%3C";
            case ">":
              return "%3E";
            case "\n":
              return "%0A";
            case "\r":
              return "%0D";
            default: {
              throw new Error("escapeLinkHrefForHeaderContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
            }
          }
        }
        var regexForLinkHeaderQuotedParamValueContext = /["';,\r\n]/g;
        function escapeStringForLinkHeaderQuotedParamValueContext(value, name) {
          {
            checkOptionStringCoercion(value, name);
          }
          var coerced = "" + value;
          return coerced.replace(regexForLinkHeaderQuotedParamValueContext, escapeStringForLinkHeaderQuotedParamValueContextReplacer);
        }
        function escapeStringForLinkHeaderQuotedParamValueContextReplacer(match) {
          switch (match) {
            case '"':
              return "%22";
            case "'":
              return "%27";
            case ";":
              return "%3B";
            case ",":
              return "%2C";
            case "\n":
              return "%0A";
            case "\r":
              return "%0D";
            default: {
              throw new Error("escapeStringForLinkHeaderQuotedParamValueContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
            }
          }
        }
        function hoistStyleQueueDependency(styleQueue) {
          this.styles.add(styleQueue);
        }
        function hoistStylesheetDependency(stylesheet) {
          this.stylesheets.add(stylesheet);
        }
        function hoistHoistables(parentState, childState) {
          childState.styles.forEach(hoistStyleQueueDependency, parentState);
          childState.stylesheets.forEach(hoistStylesheetDependency, parentState);
        }
        function emitEarlyPreloads(renderState, resumableState, shellComplete) {
          var onHeaders = renderState.onHeaders;
          if (onHeaders) {
            var headers = renderState.headers;
            if (headers) {
              renderState.headers = null;
              var linkHeader = headers.preconnects;
              if (headers.fontPreloads) {
                if (linkHeader) {
                  linkHeader += ", ";
                }
                linkHeader += headers.fontPreloads;
              }
              if (headers.highImagePreloads) {
                if (linkHeader) {
                  linkHeader += ", ";
                }
                linkHeader += headers.highImagePreloads;
              }
              if (!shellComplete) {
                var queueIter = renderState.styles.values();
                outer:
                  for (var queueStep = queueIter.next(); headers.remainingCapacity > 0 && !queueStep.done; queueStep = queueIter.next()) {
                    var sheets = queueStep.value.sheets;
                    var sheetIter = sheets.values();
                    for (var sheetStep = sheetIter.next(); headers.remainingCapacity > 0 && !sheetStep.done; sheetStep = sheetIter.next()) {
                      var sheet = sheetStep.value;
                      var props = sheet.props;
                      var key = getResourceKey(props.href);
                      var header = getStylesheetPreloadAsHeader(sheet);
                      if ((headers.remainingCapacity -= header.length) >= 2) {
                        renderState.resets.style[key] = PRELOAD_NO_CREDS;
                        if (linkHeader) {
                          linkHeader += ", ";
                        }
                        linkHeader += header;
                        renderState.resets.style[key] = typeof props.crossOrigin === "string" || typeof props.integrity === "string" ? [props.crossOrigin, props.integrity] : PRELOAD_NO_CREDS;
                      } else {
                        break outer;
                      }
                    }
                  }
              }
              if (linkHeader) {
                onHeaders({
                  Link: linkHeader
                });
              } else {
                onHeaders({});
              }
              return;
            }
          }
        }
        function createRenderState(resumableState, generateStaticMarkup) {
          var renderState = createRenderState$1(resumableState, void 0, void 0, void 0, void 0, void 0);
          return {
            // Keep this in sync with ReactFizzConfigDOM
            placeholderPrefix: renderState.placeholderPrefix,
            segmentPrefix: renderState.segmentPrefix,
            boundaryPrefix: renderState.boundaryPrefix,
            startInlineScript: renderState.startInlineScript,
            htmlChunks: renderState.htmlChunks,
            headChunks: renderState.headChunks,
            externalRuntimeScript: renderState.externalRuntimeScript,
            bootstrapChunks: renderState.bootstrapChunks,
            importMapChunks: renderState.importMapChunks,
            onHeaders: renderState.onHeaders,
            headers: renderState.headers,
            resets: renderState.resets,
            charsetChunks: renderState.charsetChunks,
            viewportChunks: renderState.viewportChunks,
            hoistableChunks: renderState.hoistableChunks,
            preconnects: renderState.preconnects,
            fontPreloads: renderState.fontPreloads,
            highImagePreloads: renderState.highImagePreloads,
            // usedImagePreloads: renderState.usedImagePreloads,
            styles: renderState.styles,
            bootstrapScripts: renderState.bootstrapScripts,
            scripts: renderState.scripts,
            bulkPreloads: renderState.bulkPreloads,
            preloads: renderState.preloads,
            stylesToHoist: renderState.stylesToHoist,
            // This is an extra field for the legacy renderer
            generateStaticMarkup
          };
        }
        var doctypeChunk = stringToPrecomputedChunk("");
        function pushTextInstance(target, text, renderState, textEmbedded) {
          if (renderState.generateStaticMarkup) {
            target.push(stringToChunk(escapeTextForBrowser(text)));
            return false;
          } else {
            return pushTextInstance$1(target, text, renderState, textEmbedded);
          }
        }
        function pushSegmentFinale(target, renderState, lastPushedText, textEmbedded) {
          if (renderState.generateStaticMarkup) {
            return;
          } else {
            return pushSegmentFinale$1(target, renderState, lastPushedText, textEmbedded);
          }
        }
        function writeStartCompletedSuspenseBoundary(destination, renderState) {
          if (renderState.generateStaticMarkup) {
            return true;
          }
          return writeStartCompletedSuspenseBoundary$1(destination);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, renderState, errorDigest, errorMessage, errorStack, errorComponentStack) {
          if (renderState.generateStaticMarkup) {
            return true;
          }
          return writeStartClientRenderedSuspenseBoundary$1(destination, renderState, errorDigest, errorMessage, errorStack, errorComponentStack);
        }
        function writeEndCompletedSuspenseBoundary(destination, renderState) {
          if (renderState.generateStaticMarkup) {
            return true;
          }
          return writeEndCompletedSuspenseBoundary$1(destination);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, renderState) {
          if (renderState.generateStaticMarkup) {
            return true;
          }
          return writeEndClientRenderedSuspenseBoundary$1(destination);
        }
        var NotPendingTransition = NotPending;
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          if (typeof type === "function") {
            if (type.$$typeof === REACT_CLIENT_REFERENCE) {
              return null;
            }
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE: {
                return null;
              }
              case REACT_CONTEXT_TYPE:
                var context = type;
                {
                  return getContextName(context) + ".Provider";
                }
              case REACT_CONSUMER_TYPE: {
                var consumer = type;
                return getContextName(consumer._context) + ".Consumer";
              }
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue2 = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue2 = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next)
            ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue2;
            context._currentValue2 = nextValue;
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var _value = prevSnapshot.parentValue;
            prevSnapshot.context._currentValue2 = _value;
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext$1(context) {
          var value = context._currentValue2;
          return value;
        }
        function get(key) {
          return key._reactInternals;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutInvalidateContextType;
        var didWarnOnInvalidCallback;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        }
        function warnOnInvalidCallback(callback) {
          {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = String(callback);
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
        }
        function warnOnUndefinedDerivedState(type, partialState) {
          {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          }
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          // $FlowFixMe[missing-local-annot]
          enqueueSetState: function(inst, payload, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback);
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback);
              }
            }
          },
          // $FlowFixMe[missing-local-annot]
          enqueueForceUpdate: function(inst, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback);
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_CONSUMER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext$1(contextType);
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("No `render` method found on the %s instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("No `render` method found on the %s instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (ctor.childContextTypes) {
                error("%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead.", name);
              }
              if (ctor.contextTypes) {
                error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var state = instance.state;
            if (state && (typeof state !== "object" || isArray(state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn(
                    // keep this warning in sync with ReactStrictModeWarning.js
                    "componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                    componentName
                  );
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext$1(contextType);
          } else {
            instance.context = emptyContextObject;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var SuspenseException = new Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
        function createThenableState() {
          return [];
        }
        function noop$2() {
        }
        function trackUsedThenable(thenableState2, thenable, index) {
          var previous = thenableState2[index];
          if (previous === void 0) {
            thenableState2.push(thenable);
          } else {
            if (previous !== thenable) {
              thenable.then(noop$2, noop$2);
              thenable = previous;
            }
          }
          switch (thenable.status) {
            case "fulfilled": {
              var fulfilledValue = thenable.value;
              return fulfilledValue;
            }
            case "rejected": {
              var rejectedError = thenable.reason;
              throw rejectedError;
            }
            default: {
              if (typeof thenable.status === "string") {
                thenable.then(noop$2, noop$2);
              } else {
                var pendingThenable = thenable;
                pendingThenable.status = "pending";
                pendingThenable.then(function(fulfilledValue2) {
                  if (thenable.status === "pending") {
                    var fulfilledThenable2 = thenable;
                    fulfilledThenable2.status = "fulfilled";
                    fulfilledThenable2.value = fulfilledValue2;
                  }
                }, function(error2) {
                  if (thenable.status === "pending") {
                    var rejectedThenable2 = thenable;
                    rejectedThenable2.status = "rejected";
                    rejectedThenable2.reason = error2;
                  }
                });
              }
              switch (thenable.status) {
                case "fulfilled": {
                  var fulfilledThenable = thenable;
                  return fulfilledThenable.value;
                }
                case "rejected": {
                  var rejectedThenable = thenable;
                  throw rejectedThenable.reason;
                }
              }
              suspendedThenable = thenable;
              throw SuspenseException;
            }
          }
        }
        function readPreviousThenable(thenableState2, index) {
          var previous = thenableState2[index];
          if (previous === void 0) {
            return void 0;
          } else {
            return previous.value;
          }
        }
        var suspendedThenable = null;
        function getSuspendedThenable() {
          if (suspendedThenable === null) {
            throw new Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
          }
          var thenable = suspendedThenable;
          suspendedThenable = null;
          return thenable;
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = (
          // $FlowFixMe[method-unbinding]
          typeof Object.is === "function" ? Object.is : is
        );
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var currentlyRenderingRequest = null;
        var currentlyRenderingKeyPath = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var actionStateCounter = 0;
        var actionStateMatchingIndex = -1;
        var thenableIndexCounter = 0;
        var thenableState = null;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          currentlyRenderingRequest = request;
          currentlyRenderingKeyPath = keyPath;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
          actionStateCounter = 0;
          actionStateMatchingIndex = -1;
          thenableIndexCounter = 0;
          thenableState = prevThenableState;
        }
        function prepareToUseThenableState(prevThenableState) {
          thenableIndexCounter = 0;
          thenableState = prevThenableState;
        }
        function finishHooks(Component, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            actionStateCounter = 0;
            actionStateMatchingIndex = -1;
            thenableIndexCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function getThenableStateAfterSuspending() {
          var state = thenableState;
          thenableState = null;
          return state;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function getActionStateCount() {
          return actionStateCounter;
        }
        function getActionStateMatchingIndex() {
          return actionStateMatchingIndex;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          currentlyRenderingRequest = null;
          currentlyRenderingKeyPath = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext$1(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext$1(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState2(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(
            basicStateReducer,
            // useReducer has a special case to support lazy useState initializers
            initialState
          );
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function throwOnUseEffectEventCall() {
          throw new Error("A function wrapped in useEffectEvent can't be called during rendering.");
        }
        function useEffectEvent(callback) {
          return throwOnUseEffectEventCall;
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value, initialValue) {
          resolveCurrentlyRenderingComponent();
          {
            return initialValue !== void 0 ? initialValue : value;
          }
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useHostTransitionStatus() {
          resolveCurrentlyRenderingComponent();
          return NotPendingTransition;
        }
        function unsupportedSetOptimisticState() {
          throw new Error("Cannot update optimistic state while rendering.");
        }
        function useOptimistic(passthrough, reducer) {
          resolveCurrentlyRenderingComponent();
          return [passthrough, unsupportedSetOptimisticState];
        }
        function createPostbackActionStateKey(permalink, componentKeyPath, hookIndex) {
          if (permalink !== void 0) {
            return "p" + permalink;
          } else {
            var keyPath = [componentKeyPath, null, hookIndex];
            var keyPathHash = createFastHashJS(JSON.stringify(keyPath));
            return "k" + keyPathHash;
          }
        }
        function useActionState(action, initialState, permalink) {
          resolveCurrentlyRenderingComponent();
          var actionStateHookIndex = actionStateCounter++;
          var request = currentlyRenderingRequest;
          var formAction = action.$$FORM_ACTION;
          if (typeof formAction === "function") {
            var nextPostbackStateKey = null;
            var state = initialState;
            var componentKeyPath = currentlyRenderingKeyPath;
            var postbackActionState = getFormState(request);
            var isSignatureEqual = action.$$IS_SIGNATURE_EQUAL;
            if (postbackActionState !== null && typeof isSignatureEqual === "function") {
              var postbackKey = postbackActionState[1];
              var postbackReferenceId = postbackActionState[2];
              var postbackBoundArity = postbackActionState[3];
              if (isSignatureEqual.call(action, postbackReferenceId, postbackBoundArity)) {
                nextPostbackStateKey = createPostbackActionStateKey(permalink, componentKeyPath, actionStateHookIndex);
                if (postbackKey === nextPostbackStateKey) {
                  actionStateMatchingIndex = actionStateHookIndex;
                  state = postbackActionState[0];
                }
              }
            }
            var boundAction = action.bind(null, state);
            var dispatch = function(payload) {
              boundAction(payload);
            };
            if (typeof boundAction.$$FORM_ACTION === "function") {
              dispatch.$$FORM_ACTION = function(prefix2) {
                var metadata = boundAction.$$FORM_ACTION(prefix2);
                if (permalink !== void 0) {
                  {
                    checkAttributeStringCoercion(permalink, "target");
                  }
                  permalink += "";
                  metadata.action = permalink;
                }
                var formData = metadata.data;
                if (formData) {
                  if (nextPostbackStateKey === null) {
                    nextPostbackStateKey = createPostbackActionStateKey(permalink, componentKeyPath, actionStateHookIndex);
                  }
                  formData.append("$ACTION_KEY", nextPostbackStateKey);
                }
                return metadata;
              };
            }
            return [state, dispatch, false];
          } else {
            var _boundAction = action.bind(null, initialState);
            var _dispatch2 = function(payload) {
              _boundAction(payload);
            };
            return [initialState, _dispatch2, false];
          }
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var resumableState = currentResumableState;
          if (resumableState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(resumableState, treeId, localId);
        }
        function use2(usable) {
          if (usable !== null && typeof usable === "object") {
            if (typeof usable.then === "function") {
              var thenable = usable;
              return unwrapThenable(thenable);
            } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {
              var context = usable;
              return readContext(context);
            }
          }
          throw new Error("An unsupported type was passed to use(): " + String(usable));
        }
        function unwrapThenable(thenable) {
          var index = thenableIndexCounter;
          thenableIndexCounter += 1;
          if (thenableState === null) {
            thenableState = createThenableState();
          }
          return trackUsedThenable(thenableState, thenable, index);
        }
        function readPreviousThenableFromState() {
          var index = thenableIndexCounter;
          thenableIndexCounter += 1;
          if (thenableState === null) {
            return void 0;
          }
          return readPreviousThenable(thenableState, index);
        }
        function unsupportedRefresh() {
          throw new Error("Cache cannot be refreshed during server rendering.");
        }
        function useCacheRefresh() {
          return unsupportedRefresh;
        }
        function useMemoCache(size) {
          var data = new Array(size);
          for (var i = 0; i < size; i++) {
            data[i] = REACT_MEMO_CACHE_SENTINEL;
          }
          return data;
        }
        function noop$1() {
        }
        var HooksDispatcher = {
          readContext,
          use: use2,
          useContext,
          useMemo,
          useReducer,
          useRef,
          useState: useState2,
          useInsertionEffect: noop$1,
          useLayoutEffect: noop$1,
          useCallback,
          // useImperativeHandle is not run in the server environment
          useImperativeHandle: noop$1,
          // Effects are not run in the server environment.
          useEffect: noop$1,
          // Debugging effect
          useDebugValue: noop$1,
          useDeferredValue,
          useTransition,
          useId,
          // Subscriptions are not setup in a server environment.
          useSyncExternalStore
        };
        {
          HooksDispatcher.useCacheRefresh = useCacheRefresh;
        }
        {
          HooksDispatcher.useEffectEvent = useEffectEvent;
        }
        {
          HooksDispatcher.useMemoCache = useMemoCache;
        }
        {
          HooksDispatcher.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          HooksDispatcher.useOptimistic = useOptimistic;
          HooksDispatcher.useFormState = useActionState;
          HooksDispatcher.useActionState = useActionState;
        }
        var currentResumableState = null;
        function setCurrentResumableState(resumableState) {
          currentResumableState = resumableState;
        }
        function getCacheForType(resourceType) {
          throw new Error("Not implemented.");
        }
        var DefaultAsyncDispatcher = {
          getCacheForType
        };
        {
          DefaultAsyncDispatcher.getOwner = function() {
            return null;
          };
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var prefix;
        function describeBuiltInComponentFrame(name) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher2 = null;
          {
            previousDispatcher2 = ReactSharedInternals.H;
            ReactSharedInternals.H = null;
            disableLogs();
          }
          var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
              var control;
              try {
                if (construct) {
                  var Fake = function() {
                    throw Error();
                  };
                  Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  });
                  if (typeof Reflect === "object" && Reflect.construct) {
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x) {
                      control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x) {
                      control = x;
                    }
                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x) {
                    control = x;
                  }
                  var maybePromise = fn();
                  if (maybePromise && typeof maybePromise.catch === "function") {
                    maybePromise.catch(function() {
                    });
                  }
                }
              } catch (sample) {
                if (sample && control && typeof sample.stack === "string") {
                  return [sample.stack, control.stack];
                }
              }
              return [null, null];
            }
          };
          RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
          if (namePropDescriptor && namePropDescriptor.configurable) {
            Object.defineProperty(
              RunInRootFrame.DetermineComponentFrameRoot,
              // Configurable properties can be updated even if its writable descriptor
              // is set to `false`.
              // $FlowFixMe[cannot-write]
              "name",
              {
                value: "DetermineComponentFrameRoot"
              }
            );
          }
          try {
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
              var sampleLines = sampleStack.split("\n");
              var controlLines = controlStack.split("\n");
              var s = 0;
              var c = 0;
              while (s < sampleLines.length && !sampleLines[s].includes("DetermineComponentFrameRoot")) {
                s++;
              }
              while (c < controlLines.length && !controlLines[c].includes("DetermineComponentFrameRoot")) {
                c++;
              }
              if (s === sampleLines.length || c === controlLines.length) {
                s = sampleLines.length - 1;
                c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        if (true) {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactSharedInternals.H = previousDispatcher2;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var CLIENT_RENDERED = 4;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var POSTPONED = 5;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop() {
        }
        function createRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError, onPostpone, formState) {
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            flushScheduled: false,
            resumableState,
            renderState,
            rootFormatContext,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            trackedPostpones: null,
            onError: onError2 === void 0 ? defaultErrorHandler : onError2,
            onPostpone: onPostpone === void 0 ? noop : onPostpone,
            onAllReady: onAllReady === void 0 ? noop : onAllReady,
            onShellReady: onShellReady === void 0 ? noop : onShellReady,
            onShellError: onShellError === void 0 ? noop : onShellError,
            onFatalError: onFatalError === void 0 ? noop : onFatalError,
            formState: formState === void 0 ? null : formState
          };
          var rootSegment = createPendingSegment(
            request,
            0,
            null,
            rootFormatContext,
            // Root segments are never embedded in Text on either edge
            false,
            false
          );
          rootSegment.parentFlushed = true;
          var rootTask = createRenderTask(request, null, children, -1, null, rootSegment, null, abortSet, null, rootFormatContext, emptyContextObject, rootContextSnapshot, emptyTreeContext, null, false);
          pingedTasks.push(rootTask);
          return request;
        }
        var currentRequest = null;
        function resolveRequest() {
          if (currentRequest)
            return currentRequest;
          return null;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (request.pingedTasks.length === 1) {
            request.flushScheduled = request.destination !== null;
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          var boundary = {
            status: PENDING,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null,
            contentState: createHoistableState(),
            fallbackState: createHoistableState(),
            trackedContentKeyPath: null,
            trackedFallbackNode: null
          };
          {
            boundary.errorMessage = null;
            boundary.errorStack = null;
            boundary.errorComponentStack = null;
          }
          return boundary;
        }
        function createRenderTask(request, thenableState2, node, childIndex, blockedBoundary, blockedSegment, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            replay: null,
            node,
            childIndex,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            hoistableState,
            abortSet,
            keyPath,
            formatContext,
            legacyContext,
            context,
            treeContext,
            componentStack,
            thenableState: thenableState2,
            isFallback
          };
          abortSet.add(task);
          return task;
        }
        function createReplayTask(request, thenableState2, replay, node, childIndex, blockedBoundary, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          replay.pendingTasks++;
          var task = {
            replay,
            node,
            childIndex,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment: null,
            hoistableState,
            abortSet,
            keyPath,
            formatContext,
            legacyContext,
            context,
            treeContext,
            componentStack,
            thenableState: thenableState2,
            isFallback
          };
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, parentFormatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            // lazily assigned later
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            parentFormatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function getStackFromNode(stackNode) {
          return getStackByComponentStackNode(stackNode);
        }
        function createBuiltInComponentStack(task, type) {
          return {
            tag: 0,
            parent: task.componentStack,
            type
          };
        }
        function createFunctionComponentStack(task, type) {
          return {
            tag: 1,
            parent: task.componentStack,
            type
          };
        }
        function createClassComponentStack(task, type) {
          return {
            tag: 2,
            parent: task.componentStack,
            type
          };
        }
        function getThrownInfo(request, node) {
          if (node && // Always produce a stack in dev
          true) {
            return {
              componentStack: getStackFromNode(node)
            };
          } else {
            return {};
          }
        }
        function encodeErrorForBoundary(boundary, digest, error2, thrownInfo, wasAborted) {
          boundary.errorDigest = digest;
          {
            var message, stack;
            if (error2 instanceof Error) {
              message = String(error2.message);
              stack = String(error2.stack);
            } else if (typeof error2 === "object" && error2 !== null) {
              message = describeObjectForErrorMessage(error2);
              stack = null;
            } else {
              message = String(error2);
              stack = null;
            }
            var prefix2 = wasAborted ? "Switched to client rendering because the server rendering aborted due to:\n\n" : "Switched to client rendering because the server rendering errored:\n\n";
            boundary.errorMessage = prefix2 + message;
            boundary.errorStack = stack !== null ? prefix2 + stack : null;
            boundary.errorComponentStack = thrownInfo.componentStack;
          }
        }
        function logPostpone(request, reason, postponeInfo) {
          request.onPostpone(reason, postponeInfo);
        }
        function logRecoverableError(request, error$1, errorInfo) {
          var errorDigest = request.onError(error$1, errorInfo);
          if (errorDigest != null && typeof errorDigest !== "string") {
            {
              error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "%s" instead', typeof errorDigest);
            }
            return;
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, someTask, keyPath, props) {
          if (someTask.replay !== null) {
            var _prevKeyPath = someTask.keyPath;
            someTask.keyPath = keyPath;
            var _content = props.children;
            try {
              renderNode(request, someTask, _content, -1);
            } finally {
              someTask.keyPath = _prevKeyPath;
            }
            return;
          }
          var task = someTask;
          var previousComponentStack = task.componentStack;
          var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, "Suspense");
          var prevKeyPath = task.keyPath;
          var parentBoundary = task.blockedBoundary;
          var parentHoistableState = task.hoistableState;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          if (request.trackedPostpones !== null) {
            newBoundary.trackedContentKeyPath = keyPath;
          }
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(
            request,
            insertionIndex,
            newBoundary,
            task.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(
            request,
            0,
            null,
            task.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.hoistableState = newBoundary.contentState;
          task.blockedSegment = contentRootSegment;
          task.keyPath = keyPath;
          try {
            renderNode(request, task, content, -1);
            pushSegmentFinale(contentRootSegment.chunks, request.renderState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0 && newBoundary.status === PENDING) {
              newBoundary.status = COMPLETED;
              task.componentStack = previousComponentStack;
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.status = CLIENT_RENDERED;
            var thrownInfo = getThrownInfo(request, task.componentStack);
            var errorDigest;
            if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
              var postponeInstance = error2;
              logPostpone(request, postponeInstance.message, thrownInfo);
              errorDigest = "POSTPONE";
            } else {
              errorDigest = logRecoverableError(request, error2, thrownInfo);
            }
            encodeErrorForBoundary(newBoundary, errorDigest, error2, thrownInfo, false);
            untrackBoundary(request, newBoundary);
          } finally {
            task.blockedBoundary = parentBoundary;
            task.hoistableState = parentHoistableState;
            task.blockedSegment = parentSegment;
            task.keyPath = prevKeyPath;
            task.componentStack = previousComponentStack;
          }
          var fallbackKeyPath = [keyPath[0], "Suspense Fallback", keyPath[2]];
          var trackedPostpones = request.trackedPostpones;
          if (trackedPostpones !== null) {
            var fallbackReplayNode = [fallbackKeyPath[1], fallbackKeyPath[2], [], null];
            trackedPostpones.workingMap.set(fallbackKeyPath, fallbackReplayNode);
            if (newBoundary.status === POSTPONED) {
              var boundaryReplayNode = trackedPostpones.workingMap.get(keyPath);
              boundaryReplayNode[4] = fallbackReplayNode;
            } else {
              newBoundary.trackedFallbackNode = fallbackReplayNode;
            }
          }
          var suspendedFallbackTask = createRenderTask(
            request,
            null,
            fallback,
            -1,
            parentBoundary,
            boundarySegment,
            newBoundary.fallbackState,
            fallbackAbortSet,
            fallbackKeyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // This stack should be the Suspense boundary stack because while the fallback is actually a child segment
            // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself
            suspenseComponentStack,
            true
          );
          request.pingedTasks.push(suspendedFallbackTask);
        }
        function replaySuspenseBoundary(request, task, keyPath, props, id, childNodes, childSlots, fallbackNodes, fallbackSlots) {
          var previousComponentStack = task.componentStack;
          var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, "Suspense");
          var prevKeyPath = task.keyPath;
          var previousReplaySet = task.replay;
          var parentBoundary = task.blockedBoundary;
          var parentHoistableState = task.hoistableState;
          var content = props.children;
          var fallback = props.fallback;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var resumedBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          resumedBoundary.parentFlushed = true;
          resumedBoundary.rootSegmentID = id;
          task.blockedBoundary = resumedBoundary;
          task.hoistableState = resumedBoundary.contentState;
          task.replay = {
            nodes: childNodes,
            slots: childSlots,
            pendingTasks: 1
          };
          try {
            renderNode(request, task, content, -1);
            if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
              throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
            }
            task.replay.pendingTasks--;
            if (resumedBoundary.pendingTasks === 0 && resumedBoundary.status === PENDING) {
              resumedBoundary.status = COMPLETED;
              request.completedBoundaries.push(resumedBoundary);
              return;
            }
          } catch (error2) {
            resumedBoundary.status = CLIENT_RENDERED;
            var thrownInfo = getThrownInfo(request, task.componentStack);
            var errorDigest;
            if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
              var postponeInstance = error2;
              logPostpone(request, postponeInstance.message, thrownInfo);
              errorDigest = "POSTPONE";
            } else {
              errorDigest = logRecoverableError(request, error2, thrownInfo);
            }
            encodeErrorForBoundary(resumedBoundary, errorDigest, error2, thrownInfo, false);
            task.replay.pendingTasks--;
            request.clientRenderedBoundaries.push(resumedBoundary);
          } finally {
            task.blockedBoundary = parentBoundary;
            task.hoistableState = parentHoistableState;
            task.replay = previousReplaySet;
            task.keyPath = prevKeyPath;
            task.componentStack = previousComponentStack;
          }
          var fallbackKeyPath = [keyPath[0], "Suspense Fallback", keyPath[2]];
          var fallbackReplay = {
            nodes: fallbackNodes,
            slots: fallbackSlots,
            pendingTasks: 0
          };
          var suspendedFallbackTask = createReplayTask(
            request,
            null,
            fallbackReplay,
            fallback,
            -1,
            parentBoundary,
            resumedBoundary.fallbackState,
            fallbackAbortSet,
            fallbackKeyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // This stack should be the Suspense boundary stack because while the fallback is actually a child segment
            // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself
            suspenseComponentStack,
            true
          );
          request.pingedTasks.push(suspendedFallbackTask);
        }
        function renderHostElement(request, task, keyPath, type, props) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createBuiltInComponentStack(task, type);
          var segment = task.blockedSegment;
          if (segment === null) {
            var children = props.children;
            var prevContext = task.formatContext;
            var prevKeyPath = task.keyPath;
            task.formatContext = getChildFormatContext(prevContext, type, props);
            task.keyPath = keyPath;
            renderNode(request, task, children, -1);
            task.formatContext = prevContext;
            task.keyPath = prevKeyPath;
          } else {
            var _children = pushStartInstance(segment.chunks, type, props, request.resumableState, request.renderState, task.hoistableState, task.formatContext, segment.lastPushedText, task.isFallback);
            segment.lastPushedText = false;
            var _prevContext = task.formatContext;
            var _prevKeyPath2 = task.keyPath;
            task.formatContext = getChildFormatContext(_prevContext, type, props);
            task.keyPath = keyPath;
            renderNode(request, task, _children, -1);
            task.formatContext = _prevContext;
            task.keyPath = _prevKeyPath2;
            pushEndInstance(segment.chunks, type, props, request.resumableState, _prevContext);
            segment.lastPushedText = false;
          }
          task.componentStack = previousComponentStack;
        }
        function shouldConstruct(Component) {
          return Component.prototype && Component.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, keyPath, Component, props, secondArg) {
          var prevThenableState = task.thenableState;
          task.thenableState = null;
          var componentIdentity = {};
          prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState);
          var result = Component(props, secondArg);
          return finishHooks(Component, props, result, secondArg);
        }
        function finishClassComponent(request, task, keyPath, instance, Component, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, nextChildren, -1);
          task.keyPath = prevKeyPath;
        }
        function resolveClassComponentProps(Component, baseProps) {
          var newProps = baseProps;
          {
            if ("ref" in baseProps) {
              newProps = {};
              for (var propName in baseProps) {
                if (propName !== "ref") {
                  newProps[propName] = baseProps[propName];
                }
              }
            }
          }
          var defaultProps = Component.defaultProps;
          if (defaultProps && // If disableDefaultPropsExceptForClasses is true, we always resolve
          // default props here, rather than in the JSX runtime.
          disableDefaultPropsExceptForClasses) {
            if (newProps === baseProps) {
              newProps = assign({}, newProps, baseProps);
            }
            for (var _propName in defaultProps) {
              if (newProps[_propName] === void 0) {
                newProps[_propName] = defaultProps[_propName];
              }
            }
          }
          return newProps;
        }
        function renderClassComponent(request, task, keyPath, Component, props) {
          var resolvedProps = resolveClassComponentProps(Component, props);
          var previousComponentStack = task.componentStack;
          task.componentStack = createClassComponentStack(task, Component);
          var maskedContext = void 0;
          var instance = constructClassInstance(Component, resolvedProps);
          mountClassInstance(instance, Component, resolvedProps, maskedContext);
          finishClassComponent(request, task, keyPath, instance, Component, resolvedProps);
          task.componentStack = previousComponentStack;
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        function renderFunctionComponent(request, task, keyPath, Component, props) {
          var legacyContext;
          var previousComponentStack = task.componentStack;
          task.componentStack = createFunctionComponentStack(task, Component);
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, keyPath, Component, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          var actionStateCount = getActionStateCount();
          var actionStateMatchingIndex2 = getActionStateMatchingIndex();
          {
            if (Component.contextTypes) {
              error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead.", getComponentNameFromType(Component) || "Unknown");
            }
          }
          {
            validateFunctionComponentInDev(Component);
          }
          finishFunctionComponent(request, task, keyPath, value, hasId, actionStateCount, actionStateMatchingIndex2);
          task.componentStack = previousComponentStack;
        }
        function finishFunctionComponent(request, task, keyPath, children, hasId, actionStateCount, actionStateMatchingIndex2) {
          var didEmitActionStateMarkers = false;
          if (actionStateCount !== 0 && request.formState !== null) {
            var segment = task.blockedSegment;
            if (segment === null)
              ;
            else {
              didEmitActionStateMarkers = true;
              var target = segment.chunks;
              for (var i = 0; i < actionStateCount; i++) {
                if (i === actionStateMatchingIndex2) {
                  pushFormStateMarkerIsMatching(target);
                } else {
                  pushFormStateMarkerIsNotMatching(target);
                }
              }
            }
          }
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            renderNode(request, task, children, -1);
            task.treeContext = prevTreeContext;
          } else if (didEmitActionStateMarkers) {
            renderNode(request, task, children, -1);
          } else {
            renderNodeDestructive(request, task, children, -1);
          }
          task.keyPath = prevKeyPath;
        }
        function validateFunctionComponentInDev(Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...", Component.displayName || Component.name || "Component");
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName2]) {
                error("%s: Function components do not support contextType.", _componentName2);
                didWarnAboutContextTypeOnFunctionComponent[_componentName2] = true;
              }
            }
          }
        }
        function resolveDefaultPropsOnNonClassComponent(Component, baseProps) {
          {
            return baseProps;
          }
        }
        function renderForwardRef(request, task, keyPath, type, props, ref) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createFunctionComponentStack(task, type.render);
          var propsWithoutRef;
          if ("ref" in props) {
            propsWithoutRef = {};
            for (var key in props) {
              if (key !== "ref") {
                propsWithoutRef[key] = props[key];
              }
            }
          } else {
            propsWithoutRef = props;
          }
          var children = renderWithHooks(request, task, keyPath, type.render, propsWithoutRef, ref);
          var hasId = checkDidRenderIdHook();
          var actionStateCount = getActionStateCount();
          var actionStateMatchingIndex2 = getActionStateMatchingIndex();
          finishFunctionComponent(request, task, keyPath, children, hasId, actionStateCount, actionStateMatchingIndex2);
          task.componentStack = previousComponentStack;
        }
        function renderMemo(request, task, keyPath, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultPropsOnNonClassComponent(innerType, props);
          renderElement(request, task, keyPath, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, keyPath, context, props) {
          var render = props.children;
          {
            if (typeof render !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext$1(context);
          var newChildren = render(newValue);
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, newChildren, -1);
          task.keyPath = prevKeyPath;
        }
        function renderContextProvider(request, task, keyPath, context, props) {
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          var prevKeyPath = task.keyPath;
          task.context = pushProvider(context, value);
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, children, -1);
          task.context = popProvider(context);
          task.keyPath = prevKeyPath;
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, keyPath, lazyComponent, props, ref) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createBuiltInComponentStack(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          var resolvedProps = resolveDefaultPropsOnNonClassComponent(Component, props);
          renderElement(request, task, keyPath, Component, resolvedProps, ref);
          task.componentStack = previousComponentStack;
        }
        function renderOffscreen(request, task, keyPath, props) {
          var mode = props.mode;
          if (mode === "hidden")
            ;
          else {
            var prevKeyPath = task.keyPath;
            task.keyPath = keyPath;
            renderNodeDestructive(request, task, props.children, -1);
            task.keyPath = prevKeyPath;
          }
        }
        function renderElement(request, task, keyPath, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              renderClassComponent(request, task, keyPath, type, props);
              return;
            } else {
              renderFunctionComponent(request, task, keyPath, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, keyPath, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              var prevKeyPath = task.keyPath;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, props.children, -1);
              task.keyPath = prevKeyPath;
              return;
            }
            case REACT_OFFSCREEN_TYPE: {
              renderOffscreen(request, task, keyPath, props);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              var preiousComponentStack = task.componentStack;
              task.componentStack = createBuiltInComponentStack(task, "SuspenseList");
              var _prevKeyPath3 = task.keyPath;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, props.children, -1);
              task.keyPath = _prevKeyPath3;
              task.componentStack = preiousComponentStack;
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, keyPath, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, keyPath, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, keyPath, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE:
              case REACT_CONTEXT_TYPE: {
                {
                  var _context = type;
                  renderContextProvider(request, task, keyPath, _context, props);
                  return;
                }
              }
              case REACT_CONSUMER_TYPE: {
                {
                  var _context3 = type._context;
                  renderContextConsumer(request, task, keyPath, _context3, props);
                  return;
                }
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, keyPath, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function resumeNode(request, task, segmentId, node, childIndex) {
          var prevReplay = task.replay;
          var blockedBoundary = task.blockedBoundary;
          var resumedSegment = createPendingSegment(request, 0, null, task.formatContext, false, false);
          resumedSegment.id = segmentId;
          resumedSegment.parentFlushed = true;
          try {
            var renderTask = task;
            renderTask.replay = null;
            renderTask.blockedSegment = resumedSegment;
            renderNode(request, task, node, childIndex);
            resumedSegment.status = COMPLETED;
            if (blockedBoundary === null) {
              request.completedRootSegment = resumedSegment;
            } else {
              queueCompletedSegment(blockedBoundary, resumedSegment);
              if (blockedBoundary.parentFlushed) {
                request.partialBoundaries.push(blockedBoundary);
              }
            }
          } finally {
            task.replay = prevReplay;
            task.blockedSegment = null;
          }
        }
        function replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, replay) {
          var replayNodes = replay.nodes;
          for (var i = 0; i < replayNodes.length; i++) {
            var node = replayNodes[i];
            if (keyOrIndex !== node[1]) {
              continue;
            }
            if (node.length === 4) {
              if (name !== null && name !== node[0]) {
                throw new Error("Expected the resume to render <" + node[0] + "> in this slot but instead it rendered <" + name + ">. The tree doesn't match so React will fallback to client rendering.");
              }
              var childNodes = node[2];
              var childSlots = node[3];
              var currentNode = task.node;
              task.replay = {
                nodes: childNodes,
                slots: childSlots,
                pendingTasks: 1
              };
              try {
                renderElement(request, task, keyPath, type, props, ref);
                if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
                  throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
                }
                task.replay.pendingTasks--;
              } catch (x) {
                if (typeof x === "object" && x !== null && (x === SuspenseException || typeof x.then === "function")) {
                  if (task.node === currentNode) {
                    task.replay = replay;
                  }
                  throw x;
                }
                task.replay.pendingTasks--;
                var thrownInfo = getThrownInfo(request, task.componentStack);
                erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);
              }
              task.replay = replay;
            } else {
              if (type !== REACT_SUSPENSE_TYPE) {
                var expectedType = "Suspense";
                throw new Error("Expected the resume to render <" + expectedType + "> in this slot but instead it rendered <" + (getComponentNameFromType(type) || "Unknown") + ">. The tree doesn't match so React will fallback to client rendering.");
              }
              replaySuspenseBoundary(request, task, keyPath, props, node[5], node[2], node[3], node[4] === null ? [] : node[4][2], node[4] === null ? null : node[4][3]);
            }
            replayNodes.splice(i, 1);
            return;
          }
        }
        function validateIterable(task, iterable, childIndex, iterator, iteratorFn) {
          {
            if (iterator === iterable) {
              var isGeneratorComponent = childIndex === -1 && // Only the root child is valid
              task.componentStack !== null && task.componentStack.tag === 1 && // FunctionComponent
              // $FlowFixMe[method-unbinding]
              Object.prototype.toString.call(task.componentStack.type) === "[object GeneratorFunction]" && // $FlowFixMe[method-unbinding]
              Object.prototype.toString.call(iterator) === "[object Generator]";
              if (!isGeneratorComponent) {
                if (!didWarnAboutGenerators) {
                  error("Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items.");
                }
                didWarnAboutGenerators = true;
              }
            } else if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
              }
            }
          }
        }
        function validateAsyncIterable(task, iterable, childIndex, iterator) {
          {
            if (iterator === iterable) {
              var isGeneratorComponent = childIndex === -1 && // Only the root child is valid
              task.componentStack !== null && task.componentStack.tag === 1 && // FunctionComponent
              // $FlowFixMe[method-unbinding]
              Object.prototype.toString.call(task.componentStack.type) === "[object AsyncGeneratorFunction]" && // $FlowFixMe[method-unbinding]
              Object.prototype.toString.call(iterator) === "[object AsyncGenerator]";
              if (!isGeneratorComponent) {
                if (!didWarnAboutGenerators) {
                  error("Using AsyncIterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You can use an AsyncIterable that can iterate multiple times over the same items.");
                }
                didWarnAboutGenerators = true;
              }
            }
          }
        }
        function warnOnFunctionType(invalidChild) {
          {
            var name = invalidChild.displayName || invalidChild.name || "Component";
            error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.", name, name);
          }
        }
        function warnOnSymbolType(invalidChild) {
          {
            var name = String(invalidChild);
            error("Symbols are not valid as a React child.\n  %s", name);
          }
        }
        function renderNodeDestructive(request, task, node, childIndex) {
          if (task.replay !== null && typeof task.replay.slots === "number") {
            var resumeSegmentID = task.replay.slots;
            resumeNode(request, task, resumeSegmentID, node, childIndex);
            return;
          }
          task.node = node;
          task.childIndex = childIndex;
          if (node === null) {
            return;
          }
          if (typeof node === "object") {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var key = element.key;
                var props = element.props;
                var ref;
                {
                  var refProp = props.ref;
                  ref = refProp !== void 0 ? refProp : null;
                }
                var name = getComponentNameFromType(type);
                var keyOrIndex = key == null ? childIndex === -1 ? 0 : childIndex : key;
                var keyPath = [task.keyPath, name, keyOrIndex];
                if (task.replay !== null) {
                  replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, task.replay);
                } else {
                  renderElement(request, task, keyPath, type, props, ref);
                }
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var previousComponentStack = task.componentStack;
                task.componentStack = createBuiltInComponentStack(task, "Lazy");
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode = init(payload);
                task.componentStack = previousComponentStack;
                renderNodeDestructive(request, task, resolvedNode, childIndex);
                return;
              }
            }
            if (isArray(node)) {
              renderChildrenArray(request, task, node, childIndex);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              var iterator = iteratorFn.call(node);
              if (iterator) {
                {
                  validateIterable(task, node, childIndex, iterator, iteratorFn);
                }
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children, childIndex);
                }
                return;
              }
            }
            if (typeof node[ASYNC_ITERATOR] === "function") {
              var _iterator = node[ASYNC_ITERATOR]();
              if (_iterator) {
                {
                  validateAsyncIterable(task, node, childIndex, _iterator);
                }
                var _previousComponentStack = task.componentStack;
                task.componentStack = createBuiltInComponentStack(task, "AsyncIterable");
                var prevThenableState = task.thenableState;
                task.thenableState = null;
                prepareToUseThenableState(prevThenableState);
                var _children2 = [];
                var done = false;
                if (_iterator === node) {
                  var _step = readPreviousThenableFromState();
                  while (_step !== void 0) {
                    if (_step.done) {
                      done = true;
                      break;
                    }
                    _children2.push(_step.value);
                    _step = readPreviousThenableFromState();
                  }
                }
                if (!done) {
                  var _step2 = unwrapThenable(_iterator.next());
                  while (!_step2.done) {
                    _children2.push(_step2.value);
                    _step2 = unwrapThenable(_iterator.next());
                  }
                }
                task.componentStack = _previousComponentStack;
                renderChildrenArray(request, task, _children2, childIndex);
                return;
              }
            }
            var maybeUsable = node;
            if (typeof maybeUsable.then === "function") {
              task.thenableState = null;
              var thenable = maybeUsable;
              return renderNodeDestructive(request, task, unwrapThenable(thenable), childIndex);
            }
            if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE) {
              var context = maybeUsable;
              return renderNodeDestructive(request, task, readContext$1(context), childIndex);
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            if (segment === null)
              ;
            else {
              segment.lastPushedText = pushTextInstance(segment.chunks, node, request.renderState, segment.lastPushedText);
            }
            return;
          }
          if (typeof node === "number" || typeof node === "bigint") {
            var _segment = task.blockedSegment;
            if (_segment === null)
              ;
            else {
              _segment.lastPushedText = pushTextInstance(_segment.chunks, "" + node, request.renderState, _segment.lastPushedText);
            }
            return;
          }
          {
            if (typeof node === "function") {
              warnOnFunctionType(node);
            }
            if (typeof node === "symbol") {
              warnOnSymbolType(node);
            }
          }
        }
        function replayFragment(request, task, children, childIndex) {
          var replay = task.replay;
          var replayNodes = replay.nodes;
          for (var j = 0; j < replayNodes.length; j++) {
            var node = replayNodes[j];
            if (node[1] !== childIndex) {
              continue;
            }
            var childNodes = node[2];
            var childSlots = node[3];
            task.replay = {
              nodes: childNodes,
              slots: childSlots,
              pendingTasks: 1
            };
            try {
              renderChildrenArray(request, task, children, -1);
              if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
                throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
              }
              task.replay.pendingTasks--;
            } catch (x) {
              if (typeof x === "object" && x !== null && (x === SuspenseException || typeof x.then === "function")) {
                throw x;
              }
              task.replay.pendingTasks--;
              var thrownInfo = getThrownInfo(request, task.componentStack);
              erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);
            }
            task.replay = replay;
            replayNodes.splice(j, 1);
            break;
          }
        }
        function renderChildrenArray(request, task, children, childIndex) {
          var prevKeyPath = task.keyPath;
          if (childIndex !== -1) {
            task.keyPath = [task.keyPath, "Fragment", childIndex];
            if (task.replay !== null) {
              replayFragment(
                request,
                // $FlowFixMe: Refined.
                task,
                children,
                childIndex
              );
              task.keyPath = prevKeyPath;
              return;
            }
          }
          var prevTreeContext = task.treeContext;
          var totalChildren = children.length;
          if (task.replay !== null) {
            var resumeSlots = task.replay.slots;
            if (resumeSlots !== null && typeof resumeSlots === "object") {
              for (var i = 0; i < totalChildren; i++) {
                var node = children[i];
                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
                var resumeSegmentID = resumeSlots[i];
                if (typeof resumeSegmentID === "number") {
                  resumeNode(request, task, resumeSegmentID, node, i);
                  delete resumeSlots[i];
                } else {
                  renderNode(request, task, node, i);
                }
              }
              task.treeContext = prevTreeContext;
              task.keyPath = prevKeyPath;
              return;
            }
          }
          for (var _i = 0; _i < totalChildren; _i++) {
            var _node = children[_i];
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, _i);
            renderNode(request, task, _node, _i);
          }
          task.treeContext = prevTreeContext;
          task.keyPath = prevKeyPath;
        }
        function trackPostpone(request, trackedPostpones, task, segment) {
          segment.status = POSTPONED;
          var keyPath = task.keyPath;
          var boundary = task.blockedBoundary;
          if (boundary === null) {
            segment.id = request.nextSegmentId++;
            trackedPostpones.rootSlots = segment.id;
            if (request.completedRootSegment !== null) {
              request.completedRootSegment.status = POSTPONED;
            }
            return;
          }
          if (boundary !== null && boundary.status === PENDING) {
            boundary.status = POSTPONED;
            boundary.rootSegmentID = request.nextSegmentId++;
            var boundaryKeyPath = boundary.trackedContentKeyPath;
            if (boundaryKeyPath === null) {
              throw new Error("It should not be possible to postpone at the root. This is a bug in React.");
            }
            var fallbackReplayNode = boundary.trackedFallbackNode;
            var children = [];
            if (boundaryKeyPath === keyPath && task.childIndex === -1) {
              if (segment.id === -1) {
                if (segment.parentFlushed) {
                  segment.id = boundary.rootSegmentID;
                } else {
                  segment.id = request.nextSegmentId++;
                }
              }
              var boundaryNode = [boundaryKeyPath[1], boundaryKeyPath[2], children, segment.id, fallbackReplayNode, boundary.rootSegmentID];
              trackedPostpones.workingMap.set(boundaryKeyPath, boundaryNode);
              addToReplayParent(boundaryNode, boundaryKeyPath[0], trackedPostpones);
              return;
            } else {
              var _boundaryNode = trackedPostpones.workingMap.get(boundaryKeyPath);
              if (_boundaryNode === void 0) {
                _boundaryNode = [boundaryKeyPath[1], boundaryKeyPath[2], children, null, fallbackReplayNode, boundary.rootSegmentID];
                trackedPostpones.workingMap.set(boundaryKeyPath, _boundaryNode);
                addToReplayParent(_boundaryNode, boundaryKeyPath[0], trackedPostpones);
              } else {
                var suspenseBoundary = _boundaryNode;
                suspenseBoundary[4] = fallbackReplayNode;
                suspenseBoundary[5] = boundary.rootSegmentID;
              }
            }
          }
          if (segment.id === -1) {
            if (segment.parentFlushed && boundary !== null) {
              segment.id = boundary.rootSegmentID;
            } else {
              segment.id = request.nextSegmentId++;
            }
          }
          if (task.childIndex === -1) {
            if (keyPath === null) {
              trackedPostpones.rootSlots = segment.id;
            } else {
              var workingMap = trackedPostpones.workingMap;
              var resumableNode = workingMap.get(keyPath);
              if (resumableNode === void 0) {
                resumableNode = [keyPath[1], keyPath[2], [], segment.id];
                addToReplayParent(resumableNode, keyPath[0], trackedPostpones);
              } else {
                resumableNode[3] = segment.id;
              }
            }
          } else {
            var slots;
            if (keyPath === null) {
              slots = trackedPostpones.rootSlots;
              if (slots === null) {
                slots = trackedPostpones.rootSlots = {};
              } else if (typeof slots === "number") {
                throw new Error("It should not be possible to postpone both at the root of an element as well as a slot below. This is a bug in React.");
              }
            } else {
              var _workingMap = trackedPostpones.workingMap;
              var _resumableNode = _workingMap.get(keyPath);
              if (_resumableNode === void 0) {
                slots = {};
                _resumableNode = [keyPath[1], keyPath[2], [], slots];
                _workingMap.set(keyPath, _resumableNode);
                addToReplayParent(_resumableNode, keyPath[0], trackedPostpones);
              } else {
                slots = _resumableNode[3];
                if (slots === null) {
                  slots = _resumableNode[3] = {};
                } else if (typeof slots === "number") {
                  throw new Error("It should not be possible to postpone both at the root of an element as well as a slot below. This is a bug in React.");
                }
              }
            }
            slots[task.childIndex] = segment.id;
          }
        }
        function untrackBoundary(request, boundary) {
          var trackedPostpones = request.trackedPostpones;
          if (trackedPostpones === null) {
            return;
          }
          var boundaryKeyPath = boundary.trackedContentKeyPath;
          if (boundaryKeyPath === null) {
            return;
          }
          var boundaryNode = trackedPostpones.workingMap.get(boundaryKeyPath);
          if (boundaryNode === void 0) {
            return;
          }
          boundaryNode.length = 4;
          boundaryNode[2] = [];
          boundaryNode[3] = null;
        }
        function injectPostponedHole(request, task, reason, thrownInfo) {
          logPostpone(request, reason, thrownInfo);
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            task.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          return newSegment;
        }
        function spawnNewSuspendedReplayTask(request, task, thenableState2, x) {
          var newTask = createReplayTask(
            request,
            thenableState2,
            task.replay,
            task.node,
            task.childIndex,
            task.blockedBoundary,
            task.hoistableState,
            task.abortSet,
            task.keyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // We pop one task off the stack because the node that suspended will be tried again,
            // which will add it back onto the stack.
            task.componentStack !== null ? task.componentStack.parent : null,
            task.isFallback
          );
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function spawnNewSuspendedRenderTask(request, task, thenableState2, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            task.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createRenderTask(
            request,
            thenableState2,
            task.node,
            task.childIndex,
            task.blockedBoundary,
            newSegment,
            task.hoistableState,
            task.abortSet,
            task.keyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // We pop one task off the stack because the node that suspended will be tried again,
            // which will add it back onto the stack.
            task.componentStack !== null ? task.componentStack.parent : null,
            task.isFallback
          );
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node, childIndex) {
          var previousFormatContext = task.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousKeyPath = task.keyPath;
          var previousTreeContext = task.treeContext;
          var previousComponentStack = task.componentStack;
          var x;
          var segment = task.blockedSegment;
          if (segment === null) {
            try {
              return renderNodeDestructive(request, task, node, childIndex);
            } catch (thrownValue) {
              resetHooksState();
              x = thrownValue === SuspenseException ? (
                // This is a special type of exception used for Suspense. For historical
                // reasons, the rest of the Suspense implementation expects the thrown
                // value to be a thenable, because before `use` existed that was the
                // (unstable) API for suspending. This implementation detail can change
                // later, once we deprecate the old API in favor of `use`.
                getSuspendedThenable()
              ) : thrownValue;
              if (typeof x === "object" && x !== null) {
                if (typeof x.then === "function") {
                  var wakeable = x;
                  var thenableState2 = getThenableStateAfterSuspending();
                  spawnNewSuspendedReplayTask(
                    request,
                    // $FlowFixMe: Refined.
                    task,
                    thenableState2,
                    wakeable
                  );
                  task.formatContext = previousFormatContext;
                  task.legacyContext = previousLegacyContext;
                  task.context = previousContext;
                  task.keyPath = previousKeyPath;
                  task.treeContext = previousTreeContext;
                  task.componentStack = previousComponentStack;
                  switchContext(previousContext);
                  return;
                }
              }
            }
          } else {
            var childrenLength = segment.children.length;
            var chunkLength = segment.chunks.length;
            try {
              return renderNodeDestructive(request, task, node, childIndex);
            } catch (thrownValue) {
              resetHooksState();
              segment.children.length = childrenLength;
              segment.chunks.length = chunkLength;
              x = thrownValue === SuspenseException ? (
                // This is a special type of exception used for Suspense. For historical
                // reasons, the rest of the Suspense implementation expects the thrown
                // value to be a thenable, because before `use` existed that was the
                // (unstable) API for suspending. This implementation detail can change
                // later, once we deprecate the old API in favor of `use`.
                getSuspendedThenable()
              ) : thrownValue;
              if (typeof x === "object" && x !== null) {
                if (typeof x.then === "function") {
                  var _wakeable = x;
                  var _thenableState = getThenableStateAfterSuspending();
                  spawnNewSuspendedRenderTask(
                    request,
                    // $FlowFixMe: Refined.
                    task,
                    _thenableState,
                    _wakeable
                  );
                  task.formatContext = previousFormatContext;
                  task.legacyContext = previousLegacyContext;
                  task.context = previousContext;
                  task.keyPath = previousKeyPath;
                  task.treeContext = previousTreeContext;
                  task.componentStack = previousComponentStack;
                  switchContext(previousContext);
                  return;
                }
                if (x.$$typeof === REACT_POSTPONE_TYPE && request.trackedPostpones !== null && task.blockedBoundary !== null) {
                  var trackedPostpones = request.trackedPostpones;
                  var postponeInstance = x;
                  var thrownInfo = getThrownInfo(request, task.componentStack);
                  var postponedSegment = injectPostponedHole(
                    request,
                    task,
                    // We don't use ReplayTasks in prerenders.
                    postponeInstance.message,
                    thrownInfo
                  );
                  trackPostpone(request, trackedPostpones, task, postponedSegment);
                  task.formatContext = previousFormatContext;
                  task.legacyContext = previousLegacyContext;
                  task.context = previousContext;
                  task.keyPath = previousKeyPath;
                  task.treeContext = previousTreeContext;
                  task.componentStack = previousComponentStack;
                  switchContext(previousContext);
                  return;
                }
              }
            }
          }
          task.formatContext = previousFormatContext;
          task.legacyContext = previousLegacyContext;
          task.context = previousContext;
          task.keyPath = previousKeyPath;
          task.treeContext = previousTreeContext;
          switchContext(previousContext);
          throw x;
        }
        function erroredReplay(request, boundary, error2, errorInfo, replayNodes, resumeSlots) {
          var errorDigest;
          if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
            var postponeInstance = error2;
            logPostpone(request, postponeInstance.message, errorInfo);
            errorDigest = "POSTPONE";
          } else {
            errorDigest = logRecoverableError(request, error2, errorInfo);
          }
          abortRemainingReplayNodes(request, boundary, replayNodes, resumeSlots, error2, errorDigest, errorInfo, false);
        }
        function erroredTask(request, boundary, error2, errorInfo) {
          var errorDigest;
          if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
            var postponeInstance = error2;
            logPostpone(request, postponeInstance.message, errorInfo);
            errorDigest = "POSTPONE";
          } else {
            errorDigest = logRecoverableError(request, error2, errorInfo);
          }
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              encodeErrorForBoundary(boundary, errorDigest, error2, errorInfo, false);
              untrackBoundary(request, boundary);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          if (segment !== null) {
            segment.status = ABORTED;
            finishedTask(request, boundary, segment);
          }
        }
        function abortRemainingSuspenseBoundary(request, rootSegmentID, error2, errorDigest, errorInfo, wasAborted) {
          var resumedBoundary = createSuspenseBoundary(request, /* @__PURE__ */ new Set());
          resumedBoundary.parentFlushed = true;
          resumedBoundary.rootSegmentID = rootSegmentID;
          resumedBoundary.status = CLIENT_RENDERED;
          encodeErrorForBoundary(resumedBoundary, errorDigest, error2, errorInfo, wasAborted);
          if (resumedBoundary.parentFlushed) {
            request.clientRenderedBoundaries.push(resumedBoundary);
          }
        }
        function abortRemainingReplayNodes(request, boundary, nodes, slots, error2, errorDigest, errorInfo, aborted) {
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.length === 4) {
              abortRemainingReplayNodes(request, boundary, node[2], node[3], error2, errorDigest, errorInfo, aborted);
            } else {
              var boundaryNode = node;
              var rootSegmentID = boundaryNode[5];
              abortRemainingSuspenseBoundary(request, rootSegmentID, error2, errorDigest, errorInfo, aborted);
            }
          }
          nodes.length = 0;
          if (slots !== null) {
            if (boundary === null) {
              throw new Error("We should not have any resumable nodes in the shell. This is a bug in React.");
            } else if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              encodeErrorForBoundary(boundary, errorDigest, error2, errorInfo, aborted);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            if (typeof slots === "object") {
              for (var index in slots) {
                delete slots[index];
              }
            }
          }
        }
        function abortTask(task, request, error2) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          if (segment !== null) {
            segment.status = ABORTED;
          }
          if (boundary === null) {
            var errorInfo = {};
            if (request.status !== CLOSING && request.status !== CLOSED) {
              var replay = task.replay;
              if (replay === null) {
                if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
                  var postponeInstance = error2;
                  var fatal = new Error("The render was aborted with postpone when the shell is incomplete. Reason: " + postponeInstance.message);
                  logRecoverableError(request, fatal, errorInfo);
                  fatalError(request, fatal);
                } else {
                  logRecoverableError(request, error2, errorInfo);
                  fatalError(request, error2);
                }
                return;
              } else {
                replay.pendingTasks--;
                if (replay.pendingTasks === 0 && replay.nodes.length > 0) {
                  var errorDigest;
                  if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
                    var _postponeInstance = error2;
                    logPostpone(request, _postponeInstance.message, errorInfo);
                    errorDigest = "POSTPONE";
                  } else {
                    errorDigest = logRecoverableError(request, error2, errorInfo);
                  }
                  abortRemainingReplayNodes(request, null, replay.nodes, replay.slots, error2, errorDigest, errorInfo, true);
                }
                request.pendingRootTasks--;
                if (request.pendingRootTasks === 0) {
                  completeShell(request);
                }
              }
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              var _errorInfo = getThrownInfo(request, task.componentStack);
              var _errorDigest;
              if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
                var _postponeInstance2 = error2;
                logPostpone(request, _postponeInstance2.message, _errorInfo);
                _errorDigest = "POSTPONE";
              } else {
                _errorDigest = logRecoverableError(request, error2, _errorInfo);
              }
              encodeErrorForBoundary(boundary, _errorDigest, error2, _errorInfo, true);
              untrackBoundary(request, boundary);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, error2);
            });
            boundary.fallbackAbortableTasks.clear();
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function safelyEmitEarlyPreloads(request, shellComplete) {
          try {
            emitEarlyPreloads(request.renderState, request.resumableState, shellComplete);
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
          }
        }
        function completeShell(request) {
          if (request.trackedPostpones === null) {
            var shellComplete = true;
            safelyEmitEarlyPreloads(request, shellComplete);
          }
          request.onShellError = noop;
          var onShellReady = request.onShellReady;
          onShellReady();
        }
        function completeAll(request) {
          var shellComplete = request.trackedPostpones === null ? (
            // Render, we assume it is completed
            true
          ) : (
            // Prerender Request, we use the state of the root segment
            request.completedRootSegment === null || request.completedRootSegment.status !== POSTPONED
          );
          safelyEmitEarlyPreloads(request, shellComplete);
          var onAllReady = request.onAllReady;
          onAllReady();
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null && segment.children[0].id === -1) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment !== null && segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              completeShell(request);
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.status === CLIENT_RENDERED)
              ;
            else if (boundary.pendingTasks === 0) {
              if (boundary.status === PENDING) {
                boundary.status = COMPLETED;
              }
              if (segment !== null && segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              if (boundary.status === COMPLETED) {
                boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
                boundary.fallbackAbortableTasks.clear();
              }
            } else {
              if (segment !== null && segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment === null) {
            retryReplayTask(
              request,
              // $FlowFixMe: Refined.
              task
            );
          } else {
            retryRenderTask(
              request,
              // $FlowFixMe: Refined.
              task,
              segment
            );
          }
        }
        function retryRenderTask(request, task, segment) {
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          var childrenLength = segment.children.length;
          var chunkLength = segment.chunks.length;
          try {
            renderNodeDestructive(request, task, task.node, task.childIndex);
            pushSegmentFinale(segment.chunks, request.renderState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (thrownValue) {
            resetHooksState();
            segment.children.length = childrenLength;
            segment.chunks.length = chunkLength;
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null) {
              if (typeof x.then === "function") {
                var ping = task.ping;
                x.then(ping, ping);
                task.thenableState = getThenableStateAfterSuspending();
                if (task.componentStack !== null) {
                  task.componentStack = task.componentStack.parent;
                }
                return;
              } else if (request.trackedPostpones !== null && x.$$typeof === REACT_POSTPONE_TYPE) {
                var trackedPostpones = request.trackedPostpones;
                task.abortSet.delete(task);
                var postponeInstance = x;
                var postponeInfo = getThrownInfo(request, task.componentStack);
                logPostpone(request, postponeInstance.message, postponeInfo);
                trackPostpone(request, trackedPostpones, task, segment);
                finishedTask(request, task.blockedBoundary, segment);
                return;
              }
            }
            var errorInfo = getThrownInfo(request, task.componentStack);
            task.abortSet.delete(task);
            segment.status = ERRORED;
            erroredTask(request, task.blockedBoundary, x, errorInfo);
            return;
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function retryReplayTask(request, task) {
          if (task.replay.pendingTasks === 0) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node, task.childIndex);
            if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
              throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
            }
            task.replay.pendingTasks--;
            task.abortSet.delete(task);
            finishedTask(request, task.blockedBoundary, null);
          } catch (thrownValue) {
            resetHooksState();
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null) {
              if (typeof x.then === "function") {
                var ping = task.ping;
                x.then(ping, ping);
                task.thenableState = getThenableStateAfterSuspending();
                if (task.componentStack !== null) {
                  task.componentStack = task.componentStack.parent;
                }
                return;
              }
            }
            task.replay.pendingTasks--;
            task.abortSet.delete(task);
            var errorInfo = getThrownInfo(request, task.componentStack);
            erroredReplay(request, task.blockedBoundary, x, errorInfo, task.replay.nodes, task.replay.slots);
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              completeShell(request);
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              completeAll(request);
            }
            return;
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = HooksDispatcher;
          var prevAsyncDispatcher = null;
          {
            prevAsyncDispatcher = ReactSharedInternals.A;
            ReactSharedInternals.A = DefaultAsyncDispatcher;
          }
          var prevRequest = currentRequest;
          currentRequest = request;
          var prevGetCurrentStackImpl = null;
          {
            prevGetCurrentStackImpl = ReactSharedInternals.getCurrentStack;
            ReactSharedInternals.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResumableState = currentResumableState;
          setCurrentResumableState(request.resumableState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
            fatalError(request, error2);
          } finally {
            setCurrentResumableState(prevResumableState);
            ReactSharedInternals.H = prevDispatcher;
            {
              ReactSharedInternals.A = prevAsyncDispatcher;
            }
            {
              ReactSharedInternals.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === HooksDispatcher) {
              switchContext(prevContext);
            }
            currentRequest = prevRequest;
          }
        }
        function flushPreamble(request, destination, rootSegment) {
          var willFlushAllSegments = request.allPendingTasks === 0 && request.trackedPostpones === null;
          writePreamble(destination, request.resumableState, request.renderState, willFlushAllSegments);
        }
        function flushSubtree(request, destination, segment, hoistableState) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              segment.id = request.nextSegmentId++;
            }
            case POSTPONED: {
              var segmentID = segment.id;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.renderState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild, hoistableState);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment, hoistableState) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment, hoistableState);
          }
          boundary.parentFlushed = true;
          if (boundary.status === CLIENT_RENDERED) {
            {
              writeStartClientRenderedSuspenseBoundary(destination, request.renderState, boundary.errorDigest, boundary.errorMessage, boundary.errorStack, boundary.errorComponentStack);
            }
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndClientRenderedSuspenseBoundary(destination, request.renderState);
          } else if (boundary.status !== COMPLETED) {
            if (boundary.status === PENDING) {
              boundary.rootSegmentID = request.nextSegmentId++;
            }
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.rootSegmentID;
            writeStartPendingSuspenseBoundary(destination, request.renderState, id);
            if (hoistableState) {
              hoistHoistables(hoistableState, boundary.fallbackState);
            }
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndPendingSuspenseBoundary(destination);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.renderState, boundary.rootSegmentID);
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndPendingSuspenseBoundary(destination);
          } else {
            if (hoistableState) {
              hoistHoistables(hoistableState, boundary.contentState);
            }
            writeStartCompletedSuspenseBoundary(destination, request.renderState);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment, hoistableState);
            return writeEndCompletedSuspenseBoundary(destination, request.renderState);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          {
            return writeClientRenderBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.errorDigest, boundary.errorMessage, boundary.errorStack, boundary.errorComponentStack);
          }
        }
        function flushSegmentContainer(request, destination, segment, hoistableState) {
          writeStartSegment(destination, request.renderState, segment.parentFormatContext, segment.id);
          flushSegment(request, destination, segment, hoistableState);
          return writeEndSegment(destination, segment.parentFormatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);
          return writeCompletedBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.contentState);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          return writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var hoistableState = boundary.contentState;
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment, hoistableState);
          } else if (segmentID === boundary.rootSegmentID) {
            return flushSegmentContainer(request, destination, segment, hoistableState);
          } else {
            flushSegmentContainer(request, destination, segment, hoistableState);
            return writeCompletedSegmentInstruction(destination, request.resumableState, request.renderState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          try {
            if (request.pendingRootTasks > 0) {
              return;
            }
            var i;
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null) {
              if (completedRootSegment.status === POSTPONED) {
                return;
              }
              flushPreamble(request, destination, completedRootSegment);
              flushSegment(request, destination, completedRootSegment, null);
              request.completedRootSegment = null;
              writeCompletedRoot(destination, request.renderState);
            }
            writeHoistables(destination, request.resumableState, request.renderState);
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              request.flushScheduled = false;
              if (request.trackedPostpones === null) {
                writePostamble(destination, request.resumableState);
              }
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
              stopFlowing(request);
            }
          }
        }
        function startWork(request) {
          request.flushScheduled = request.destination !== null;
          {
            scheduleWork(function() {
              return performWork(request);
            });
          }
          if (request.trackedPostpones === null) {
            {
              scheduleWork(function() {
                return enqueueEarlyPreloadsAfterInitialWork(request);
              });
            }
          }
        }
        function enqueueEarlyPreloadsAfterInitialWork(request) {
          var shellComplete = request.pendingRootTasks === 0;
          safelyEmitEarlyPreloads(request, shellComplete);
        }
        function enqueueFlush(request) {
          if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes
          request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will
          // happen when we start flowing again
          request.destination !== null) {
            request.flushScheduled = true;
            scheduleWork(function() {
              var destination = request.destination;
              if (destination) {
                flushCompletedQueues(request, destination);
              } else {
                request.flushScheduled = false;
              }
            });
          }
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
            fatalError(request, error2);
          }
        }
        function stopFlowing(request) {
          request.destination = null;
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            if (abortableTasks.size > 0) {
              var error2 = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              abortableTasks.forEach(function(task) {
                return abortTask(task, request, error2);
              });
              abortableTasks.clear();
            }
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error3) {
            var errorInfo = {};
            logRecoverableError(request, error3, errorInfo);
            fatalError(request, error3);
          }
        }
        function flushResources(request) {
          enqueueFlush(request);
        }
        function getFormState(request) {
          return request.formState;
        }
        function getResumableState(request) {
          return request.resumableState;
        }
        function getRenderState(request) {
          return request.renderState;
        }
        function addToReplayParent(node, parentKeyPath, trackedPostpones) {
          if (parentKeyPath === null) {
            trackedPostpones.rootNodes.push(node);
          } else {
            var workingMap = trackedPostpones.workingMap;
            var parentNode = workingMap.get(parentKeyPath);
            if (parentNode === void 0) {
              parentNode = [parentKeyPath[1], parentKeyPath[2], [], null];
              workingMap.set(parentKeyPath, parentNode);
              addToReplayParent(parentNode, parentKeyPath[0], trackedPostpones);
            }
            parentNode[2].push(node);
          }
        }
        function onError() {
        }
        function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
          var didFatal = false;
          var fatalError2 = null;
          var result = "";
          var destination = {
            // $FlowFixMe[missing-local-annot]
            push: function(chunk) {
              if (chunk !== null) {
                result += chunk;
              }
              return true;
            },
            // $FlowFixMe[missing-local-annot]
            destroy: function(error2) {
              didFatal = true;
              fatalError2 = error2;
            }
          };
          var readyToStream = false;
          function onShellReady() {
            readyToStream = true;
          }
          var resumableState = createResumableState(options ? options.identifierPrefix : void 0, void 0);
          var request = createRequest(children, resumableState, createRenderState(resumableState, generateStaticMarkup), createRootFormatContext(), Infinity, onError, void 0, onShellReady, void 0, void 0, void 0);
          startWork(request);
          abort(request, abortReason);
          startFlowing(request, destination);
          if (didFatal && fatalError2 !== abortReason) {
            throw fatalError2;
          }
          if (!readyToStream) {
            throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          }
          return result;
        }
        function renderToString(children, options) {
          return renderToStringImpl(children, options, false, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server');
        }
        function renderToStaticMarkup(children, options) {
          return renderToStringImpl(children, options, true, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToPipeableStream" which supports Suspense on the server');
        }
        exports2.renderToStaticMarkup = renderToStaticMarkup;
        exports2.renderToString = renderToString;
        exports2.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-server.node.development.js
var require_react_dom_server_node_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.node.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React = require_react();
        var util = require("util");
        var crypto = require("crypto");
        var async_hooks = require("async_hooks");
        var ReactDOM = require_react_dom();
        var stream = require("stream");
        var ReactVersion = "19.0.0-experimental-4508873393-20240430";
        var ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
        function warn(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var stack = ReactSharedInternals.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var disableDefaultPropsExceptForClasses = true;
        var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
        var REACT_POSTPONE_TYPE = Symbol.for("react.postpone");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ASYNC_ITERATOR = Symbol.asyncIterator;
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var jsxPropsParents = /* @__PURE__ */ new WeakMap();
        var jsxChildrenParents = /* @__PURE__ */ new WeakMap();
        function objectName(object) {
          var name = Object.prototype.toString.call(object);
          return name.replace(/^\[object (.*)\]$/, function(m, p0) {
            return p0;
          });
        }
        function describeKeyForErrorMessage(key) {
          var encodedKey = JSON.stringify(key);
          return '"' + key + '"' === encodedKey ? key : encodedKey;
        }
        function describeValueForErrorMessage(value) {
          switch (typeof value) {
            case "string": {
              return JSON.stringify(value.length <= 10 ? value : value.slice(0, 10) + "...");
            }
            case "object": {
              if (isArray(value)) {
                return "[...]";
              }
              if (value !== null && value.$$typeof === CLIENT_REFERENCE_TAG) {
                return describeClientReference();
              }
              var name = objectName(value);
              if (name === "Object") {
                return "{...}";
              }
              return name;
            }
            case "function": {
              if (value.$$typeof === CLIENT_REFERENCE_TAG) {
                return describeClientReference();
              }
              var _name = value.displayName || value.name;
              return _name ? "function " + _name : "function";
            }
            default:
              return String(value);
          }
        }
        function describeElementType(type) {
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeElementType(type.render);
              case REACT_MEMO_TYPE:
                return describeElementType(type.type);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeElementType(init(payload));
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var CLIENT_REFERENCE_TAG = Symbol.for("react.client.reference");
        function describeClientReference(ref) {
          return "client";
        }
        function describeObjectForErrorMessage(objectOrArray, expandedName) {
          var objKind = objectName(objectOrArray);
          if (objKind !== "Object" && objKind !== "Array") {
            return objKind;
          }
          var str = "";
          var start = -1;
          var length = 0;
          if (isArray(objectOrArray)) {
            if (jsxChildrenParents.has(objectOrArray)) {
              var type = jsxChildrenParents.get(objectOrArray);
              str = "<" + describeElementType(type) + ">";
              var array = objectOrArray;
              for (var i = 0; i < array.length; i++) {
                var value = array[i];
                var substr = void 0;
                if (typeof value === "string") {
                  substr = value;
                } else if (typeof value === "object" && value !== null) {
                  substr = "{" + describeObjectForErrorMessage(value) + "}";
                } else {
                  substr = "{" + describeValueForErrorMessage(value) + "}";
                }
                if ("" + i === expandedName) {
                  start = str.length;
                  length = substr.length;
                  str += substr;
                } else if (substr.length < 15 && str.length + substr.length < 40) {
                  str += substr;
                } else {
                  str += "{...}";
                }
              }
              str += "</" + describeElementType(type) + ">";
            } else {
              str = "[";
              var _array = objectOrArray;
              for (var _i = 0; _i < _array.length; _i++) {
                if (_i > 0) {
                  str += ", ";
                }
                var _value = _array[_i];
                var _substr = void 0;
                if (typeof _value === "object" && _value !== null) {
                  _substr = describeObjectForErrorMessage(_value);
                } else {
                  _substr = describeValueForErrorMessage(_value);
                }
                if ("" + _i === expandedName) {
                  start = str.length;
                  length = _substr.length;
                  str += _substr;
                } else if (_substr.length < 10 && str.length + _substr.length < 40) {
                  str += _substr;
                } else {
                  str += "...";
                }
              }
              str += "]";
            }
          } else {
            if (objectOrArray.$$typeof === REACT_ELEMENT_TYPE) {
              str = "<" + describeElementType(objectOrArray.type) + "/>";
            } else if (objectOrArray.$$typeof === CLIENT_REFERENCE_TAG) {
              return describeClientReference();
            } else if (jsxPropsParents.has(objectOrArray)) {
              var _type = jsxPropsParents.get(objectOrArray);
              str = "<" + (describeElementType(_type) || "...");
              var object = objectOrArray;
              var names = Object.keys(object);
              for (var _i2 = 0; _i2 < names.length; _i2++) {
                str += " ";
                var name = names[_i2];
                str += describeKeyForErrorMessage(name) + "=";
                var _value2 = object[name];
                var _substr2 = void 0;
                if (name === expandedName && typeof _value2 === "object" && _value2 !== null) {
                  _substr2 = describeObjectForErrorMessage(_value2);
                } else {
                  _substr2 = describeValueForErrorMessage(_value2);
                }
                if (typeof _value2 !== "string") {
                  _substr2 = "{" + _substr2 + "}";
                }
                if (name === expandedName) {
                  start = str.length;
                  length = _substr2.length;
                  str += _substr2;
                } else if (_substr2.length < 10 && str.length + _substr2.length < 40) {
                  str += _substr2;
                } else {
                  str += "...";
                }
              }
              str += ">";
            } else {
              str = "{";
              var _object = objectOrArray;
              var _names = Object.keys(_object);
              for (var _i3 = 0; _i3 < _names.length; _i3++) {
                if (_i3 > 0) {
                  str += ", ";
                }
                var _name2 = _names[_i3];
                str += describeKeyForErrorMessage(_name2) + ": ";
                var _value3 = _object[_name2];
                var _substr3 = void 0;
                if (typeof _value3 === "object" && _value3 !== null) {
                  _substr3 = describeObjectForErrorMessage(_value3);
                } else {
                  _substr3 = describeValueForErrorMessage(_value3);
                }
                if (_name2 === expandedName) {
                  start = str.length;
                  length = _substr3.length;
                  str += _substr3;
                } else if (_substr3.length < 10 && str.length + _substr3.length < 40) {
                  str += _substr3;
                } else {
                  str += "...";
                }
              }
              str += "}";
            }
          }
          if (expandedName === void 0) {
            return str;
          }
          if (start > -1 && length > 0) {
            var highlight = " ".repeat(start) + "^".repeat(length);
            return "\n  " + str + "\n  " + highlight;
          }
          return "\n  " + str;
        }
        function scheduleWork(callback) {
          setImmediate(callback);
        }
        function flushBuffered(destination) {
          if (typeof destination.flush === "function") {
            destination.flush();
          }
        }
        var VIEW_SIZE = 2048;
        var currentView = null;
        var writtenBytes = 0;
        var destinationHasCapacity$1 = true;
        function beginWriting(destination) {
          currentView = new Uint8Array(VIEW_SIZE);
          writtenBytes = 0;
          destinationHasCapacity$1 = true;
        }
        function writeStringChunk(destination, stringChunk) {
          if (stringChunk.length === 0) {
            return;
          }
          if (stringChunk.length * 3 > VIEW_SIZE) {
            if (writtenBytes > 0) {
              writeToDestination(destination, currentView.subarray(0, writtenBytes));
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            writeToDestination(destination, textEncoder.encode(stringChunk));
            return;
          }
          var target = currentView;
          if (writtenBytes > 0) {
            target = currentView.subarray(writtenBytes);
          }
          var _textEncoder$encodeIn = textEncoder.encodeInto(stringChunk, target), read = _textEncoder$encodeIn.read, written = _textEncoder$encodeIn.written;
          writtenBytes += written;
          if (read < stringChunk.length) {
            writeToDestination(destination, currentView.subarray(0, writtenBytes));
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = textEncoder.encodeInto(stringChunk.slice(read), currentView).written;
          }
          if (writtenBytes === VIEW_SIZE) {
            writeToDestination(destination, currentView);
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
        }
        function writeViewChunk(destination, chunk) {
          if (chunk.byteLength === 0) {
            return;
          }
          if (chunk.byteLength > VIEW_SIZE) {
            if (writtenBytes > 0) {
              writeToDestination(destination, currentView.subarray(0, writtenBytes));
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            writeToDestination(destination, chunk);
            return;
          }
          var bytesToWrite = chunk;
          var allowableBytes = currentView.length - writtenBytes;
          if (allowableBytes < bytesToWrite.byteLength) {
            if (allowableBytes === 0) {
              writeToDestination(destination, currentView);
            } else {
              currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);
              writtenBytes += allowableBytes;
              writeToDestination(destination, currentView);
              bytesToWrite = bytesToWrite.subarray(allowableBytes);
            }
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
          currentView.set(bytesToWrite, writtenBytes);
          writtenBytes += bytesToWrite.byteLength;
          if (writtenBytes === VIEW_SIZE) {
            writeToDestination(destination, currentView);
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
        }
        function writeChunk(destination, chunk) {
          if (typeof chunk === "string") {
            writeStringChunk(destination, chunk);
          } else {
            writeViewChunk(destination, chunk);
          }
        }
        function writeToDestination(destination, view) {
          var currentHasCapacity = destination.write(view);
          destinationHasCapacity$1 = destinationHasCapacity$1 && currentHasCapacity;
        }
        function writeChunkAndReturn(destination, chunk) {
          writeChunk(destination, chunk);
          return destinationHasCapacity$1;
        }
        function completeWriting(destination) {
          if (currentView && writtenBytes > 0) {
            destination.write(currentView.subarray(0, writtenBytes));
          }
          currentView = null;
          writtenBytes = 0;
          destinationHasCapacity$1 = true;
        }
        function close(destination) {
          destination.end();
        }
        var textEncoder = new util.TextEncoder();
        function stringToChunk(content) {
          return content;
        }
        function stringToPrecomputedChunk(content) {
          var precomputedChunk = textEncoder.encode(content);
          {
            if (precomputedChunk.byteLength > VIEW_SIZE) {
              error("precomputed chunks must be smaller than the view size configured for this host. This is a bug in React.");
            }
          }
          return precomputedChunk;
        }
        function closeWithError(destination, error2) {
          destination.destroy(error2);
        }
        function createFastHash(input) {
          var hash = crypto.createHash("md5");
          hash.update(input);
          return hash.digest("hex");
        }
        var assign = Object.assign;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkOptionStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` option is an unsupported type %s. This value must be coerced to a string before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        var unitlessNumbers = /* @__PURE__ */ new Set([
          "animationIterationCount",
          "aspectRatio",
          "borderImageOutset",
          "borderImageSlice",
          "borderImageWidth",
          "boxFlex",
          "boxFlexGroup",
          "boxOrdinalGroup",
          "columnCount",
          "columns",
          "flex",
          "flexGrow",
          "flexPositive",
          "flexShrink",
          "flexNegative",
          "flexOrder",
          "gridArea",
          "gridRow",
          "gridRowEnd",
          "gridRowSpan",
          "gridRowStart",
          "gridColumn",
          "gridColumnEnd",
          "gridColumnSpan",
          "gridColumnStart",
          "fontWeight",
          "lineClamp",
          "lineHeight",
          "opacity",
          "order",
          "orphans",
          "scale",
          "tabSize",
          "widows",
          "zIndex",
          "zoom",
          "fillOpacity",
          // SVG-related properties
          "floodOpacity",
          "stopOpacity",
          "strokeDasharray",
          "strokeDashoffset",
          "strokeMiterlimit",
          "strokeOpacity",
          "strokeWidth",
          "MozAnimationIterationCount",
          // Known Prefixed Properties
          "MozBoxFlex",
          // TODO: Remove these since they shouldn't be used in modern code
          "MozBoxFlexGroup",
          "MozLineClamp",
          "msAnimationIterationCount",
          "msFlex",
          "msZoom",
          "msFlexGrow",
          "msFlexNegative",
          "msFlexOrder",
          "msFlexPositive",
          "msFlexShrink",
          "msGridColumn",
          "msGridColumnSpan",
          "msGridRow",
          "msGridRowSpan",
          "WebkitAnimationIterationCount",
          "WebkitBoxFlex",
          "WebKitBoxFlexGroup",
          "WebkitBoxOrdinalGroup",
          "WebkitColumnCount",
          "WebkitColumns",
          "WebkitFlex",
          "WebkitFlexGrow",
          "WebkitFlexPositive",
          "WebkitFlexShrink",
          "WebkitLineClamp"
        ]);
        function isUnitlessNumber(name) {
          return unitlessNumbers.has(name);
        }
        var aliases = /* @__PURE__ */ new Map([
          ["acceptCharset", "accept-charset"],
          ["htmlFor", "for"],
          ["httpEquiv", "http-equiv"],
          // HTML and SVG attributes, but the SVG attribute is case sensitive.],
          ["crossOrigin", "crossorigin"],
          // This is a list of all SVG attributes that need special casing.
          // Regular attributes that just accept strings.],
          ["accentHeight", "accent-height"],
          ["alignmentBaseline", "alignment-baseline"],
          ["arabicForm", "arabic-form"],
          ["baselineShift", "baseline-shift"],
          ["capHeight", "cap-height"],
          ["clipPath", "clip-path"],
          ["clipRule", "clip-rule"],
          ["colorInterpolation", "color-interpolation"],
          ["colorInterpolationFilters", "color-interpolation-filters"],
          ["colorProfile", "color-profile"],
          ["colorRendering", "color-rendering"],
          ["dominantBaseline", "dominant-baseline"],
          ["enableBackground", "enable-background"],
          ["fillOpacity", "fill-opacity"],
          ["fillRule", "fill-rule"],
          ["floodColor", "flood-color"],
          ["floodOpacity", "flood-opacity"],
          ["fontFamily", "font-family"],
          ["fontSize", "font-size"],
          ["fontSizeAdjust", "font-size-adjust"],
          ["fontStretch", "font-stretch"],
          ["fontStyle", "font-style"],
          ["fontVariant", "font-variant"],
          ["fontWeight", "font-weight"],
          ["glyphName", "glyph-name"],
          ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
          ["glyphOrientationVertical", "glyph-orientation-vertical"],
          ["horizAdvX", "horiz-adv-x"],
          ["horizOriginX", "horiz-origin-x"],
          ["imageRendering", "image-rendering"],
          ["letterSpacing", "letter-spacing"],
          ["lightingColor", "lighting-color"],
          ["markerEnd", "marker-end"],
          ["markerMid", "marker-mid"],
          ["markerStart", "marker-start"],
          ["overlinePosition", "overline-position"],
          ["overlineThickness", "overline-thickness"],
          ["paintOrder", "paint-order"],
          ["panose-1", "panose-1"],
          ["pointerEvents", "pointer-events"],
          ["renderingIntent", "rendering-intent"],
          ["shapeRendering", "shape-rendering"],
          ["stopColor", "stop-color"],
          ["stopOpacity", "stop-opacity"],
          ["strikethroughPosition", "strikethrough-position"],
          ["strikethroughThickness", "strikethrough-thickness"],
          ["strokeDasharray", "stroke-dasharray"],
          ["strokeDashoffset", "stroke-dashoffset"],
          ["strokeLinecap", "stroke-linecap"],
          ["strokeLinejoin", "stroke-linejoin"],
          ["strokeMiterlimit", "stroke-miterlimit"],
          ["strokeOpacity", "stroke-opacity"],
          ["strokeWidth", "stroke-width"],
          ["textAnchor", "text-anchor"],
          ["textDecoration", "text-decoration"],
          ["textRendering", "text-rendering"],
          ["transformOrigin", "transform-origin"],
          ["underlinePosition", "underline-position"],
          ["underlineThickness", "underline-thickness"],
          ["unicodeBidi", "unicode-bidi"],
          ["unicodeRange", "unicode-range"],
          ["unitsPerEm", "units-per-em"],
          ["vAlphabetic", "v-alphabetic"],
          ["vHanging", "v-hanging"],
          ["vIdeographic", "v-ideographic"],
          ["vMathematical", "v-mathematical"],
          ["vectorEffect", "vector-effect"],
          ["vertAdvY", "vert-adv-y"],
          ["vertOriginX", "vert-origin-x"],
          ["vertOriginY", "vert-origin-y"],
          ["wordSpacing", "word-spacing"],
          ["writingMode", "writing-mode"],
          ["xmlnsXlink", "xmlns:xlink"],
          ["xHeight", "x-height"]
        ]);
        function getAttributeAlias(name) {
          return aliases.get(name) || name;
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              if (tagName === "select") {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set `onChange`.");
              } else {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties$1 = {};
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty$1(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            if (rARIACamel$1.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
            if (rARIA$1.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties$1[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function validateProperties$2(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://react.dev/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        function isCustomElement(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return false;
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          fetchpriority: "fetchPriority",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          inert: "inert",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          transformorigin: "transformOrigin",
          "transform-origin": "transformOrigin",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var warnedProperties = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name, value, eventRegistry) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties[name] = true;
              return true;
            }
            if (typeof value === "function") {
              if (tagName === "form" && name === "action") {
                return true;
              }
              if (tagName === "input" && name === "formAction") {
                return true;
              }
              if (tagName === "button" && name === "formAction") {
                return true;
              }
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties[name] = true;
              return true;
            }
            if (rARIA.test(name) || rARIACamel.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            } else if (name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties[name] = true;
              return true;
            }
            switch (name) {
              case "dangerouslySetInnerHTML":
              case "children":
              case "style":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
              case "ref": {
                return true;
              }
              case "innerText":
              case "textContent":
                return true;
            }
            switch (typeof value) {
              case "boolean": {
                switch (name) {
                  case "autoFocus":
                  case "checked":
                  case "multiple":
                  case "muted":
                  case "selected":
                  case "contentEditable":
                  case "spellCheck":
                  case "draggable":
                  case "value":
                  case "autoReverse":
                  case "externalResourcesRequired":
                  case "focusable":
                  case "preserveAlpha":
                  case "allowFullScreen":
                  case "async":
                  case "autoPlay":
                  case "controls":
                  case "default":
                  case "defer":
                  case "disabled":
                  case "disablePictureInPicture":
                  case "disableRemotePlayback":
                  case "formNoValidate":
                  case "hidden":
                  case "loop":
                  case "noModule":
                  case "noValidate":
                  case "open":
                  case "playsInline":
                  case "readOnly":
                  case "required":
                  case "reversed":
                  case "scoped":
                  case "seamless":
                  case "itemScope":
                  case "capture":
                  case "download":
                  case "inert": {
                    return true;
                  }
                  default: {
                    var prefix2 = name.toLowerCase().slice(0, 5);
                    if (prefix2 === "data-" || prefix2 === "aria-") {
                      return true;
                    }
                    if (value) {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                    } else {
                      error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                    }
                    warnedProperties[name] = true;
                    return true;
                  }
                }
              }
              case "function":
              case "symbol":
                warnedProperties[name] = true;
                return false;
              case "string": {
                if (value === "false" || value === "true") {
                  switch (name) {
                    case "checked":
                    case "selected":
                    case "multiple":
                    case "muted":
                    case "allowFullScreen":
                    case "async":
                    case "autoPlay":
                    case "controls":
                    case "default":
                    case "defer":
                    case "disabled":
                    case "disablePictureInPicture":
                    case "disableRemotePlayback":
                    case "formNoValidate":
                    case "hidden":
                    case "loop":
                    case "noModule":
                    case "noValidate":
                    case "open":
                    case "playsInline":
                    case "readOnly":
                    case "required":
                    case "reversed":
                    case "scoped":
                    case "seamless":
                    case "itemScope":
                    case "inert": {
                      break;
                    }
                    default: {
                      return true;
                    }
                  }
                  error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
        }
        function warnUnknownProperties(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://react.dev/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://react.dev/link/attribute-behavior ", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props, eventRegistry) {
          if (isCustomElement(type) || typeof props.is === "string") {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        function camelize(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        }
        function warnHyphenatedStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          }
        }
        function warnBadVendoredStyleName(name) {
          {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          }
        }
        function warnStyleValueWithSemicolon(name, value) {
          {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          }
        }
        function warnStyleValueIsNaN(name, value) {
          {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnStyleValueIsInfinity(name, value) {
          {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          }
        }
        function warnValidStyle(name, value) {
          {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name);
              }
            }
          }
        }
        function getCrossOriginString(input) {
          if (typeof input === "string") {
            return input === "use-credentials" ? input : "";
          }
          return void 0;
        }
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str = "" + string;
          var match = matchHtmlRegExp.exec(str);
          if (!match) {
            return str;
          }
          var escape;
          var html = "";
          var index;
          var lastIndex = 0;
          for (index = match.index; index < str.length; index++) {
            switch (str.charCodeAt(index)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index) {
              html += str.slice(lastIndex, index);
            }
            lastIndex = index + 1;
            html += escape;
          }
          return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
        }
        function escapeTextForBrowser(text) {
          if (typeof text === "boolean" || typeof text === "number" || typeof text === "bigint") {
            return "" + text;
          }
          return escapeHtml(text);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        function sanitizeURL(url) {
          if (isJavaScriptProtocol.test("" + url)) {
            return "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')";
          }
          return url;
        }
        var clientRenderBoundary = '$RX=function(b,c,d,e,f){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),f&&(a.cstck=f),b._reactRetry&&b._reactRetry())};';
        var completeBoundary = '$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data="$!",a.setAttribute("data-dgst",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if("/$"===d)if(0===f)break;else f--;else"$"!==d&&"$?"!==d&&"$!"!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data="$"}b._reactRetry&&b._reactRetry()}};';
        var completeBoundaryWithStyles = '$RM=new Map;\n$RR=function(r,t,w){for(var u=$RC,n=$RM,p=new Map,q=document,g,b,h=q.querySelectorAll("link[data-precedence],style[data-precedence]"),v=[],k=0;b=h[k++];)"not all"===b.getAttribute("media")?v.push(b):("LINK"===b.tagName&&n.set(b.getAttribute("href"),b),p.set(b.dataset.precedence,g=b));b=0;h=[];var l,a;for(k=!0;;){if(k){var f=w[b++];if(!f){k=!1;b=0;continue}var c=!1,m=0;var d=f[m++];if(a=n.get(d)){var e=a._p;c=!0}else{a=q.createElement("link");a.href=d;a.rel="stylesheet";for(a.dataset.precedence=\nl=f[m++];e=f[m++];)a.setAttribute(e,f[m++]);e=a._p=new Promise(function(x,y){a.onload=x;a.onerror=y});n.set(d,a)}d=a.getAttribute("media");!e||"l"===e.s||d&&!matchMedia(d).matches||h.push(e);if(c)continue}else{a=v[b++];if(!a)break;l=a.getAttribute("data-precedence");a.removeAttribute("media")}c=p.get(l)||g;c===g&&(g=a);p.set(l,a);c?c.parentNode.insertBefore(a,c.nextSibling):(c=q.head,c.insertBefore(a,c.firstChild))}Promise.all(h).then(u.bind(null,r,t,""),u.bind(null,r,t,"Resource failed to load"))};';
        var completeSegment = "$RS=function(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};";
        var formReplaying = `addEventListener("submit",function(a){if(!a.defaultPrevented){var c=a.target,d=a.submitter,e=c.action,b=d;if(d){var f=d.getAttribute("formAction");null!=f&&(e=f,b=null)}"javascript:throw new Error('React form unexpectedly submitted.')"===e&&(a.preventDefault(),b?(a=document.createElement("input"),a.name=b.name,a.value=b.value,b.parentNode.insertBefore(a,b),b=new FormData(c),a.parentNode.removeChild(a)):b=new FormData(c),a=c.ownerDocument||c,(a.$$reactFormReplay=a.$$reactFormReplay||[]).push(c,d,b))}});`;
        function getValueDescriptorExpectingObjectForWarning(thing) {
          return thing === null ? "`null`" : thing === void 0 ? "`undefined`" : thing === "" ? "an empty string" : 'something with type "' + typeof thing + '"';
        }
        var ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
        var sharedNotPendingObject = {
          pending: false,
          data: null,
          method: null,
          action: null
        };
        var NotPending = Object.freeze(sharedNotPendingObject);
        var previousDispatcher = ReactDOMSharedInternals.d;
        ReactDOMSharedInternals.d = {
          f: previousDispatcher.f,
          r: previousDispatcher.r,
          D: prefetchDNS,
          C: preconnect,
          L: preload,
          m: preloadModule,
          X: preinitScript,
          S: preinitStyle,
          M: preinitModuleScript
        };
        var ScriptStreamingFormat = 0;
        var DataStreamingFormat = 1;
        var NothingSent = 0;
        var SentCompleteSegmentFunction = 1;
        var SentCompleteBoundaryFunction = 2;
        var SentClientRenderFunction = 4;
        var SentStyleInsertionFunction = 8;
        var SentFormReplayingRuntime = 16;
        var EXISTS = null;
        var PRELOAD_NO_CREDS = [];
        {
          Object.freeze(PRELOAD_NO_CREDS);
        }
        var dataElementQuotedEnd = stringToPrecomputedChunk('"></template>');
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("</script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var scriptNonce = stringToPrecomputedChunk('" nonce="');
        var scriptIntegirty = stringToPrecomputedChunk('" integrity="');
        var scriptCrossOrigin = stringToPrecomputedChunk('" crossorigin="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""></script>');
        function escapeEntireInlineScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        var importMapScriptStart = stringToPrecomputedChunk('<script type="importmap">');
        var importMapScriptEnd = stringToPrecomputedChunk("</script>");
        var DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS = 2e3;
        var didWarnForNewBooleanPropsWithEmptyValue;
        {
          didWarnForNewBooleanPropsWithEmptyValue = {};
        }
        function createRenderState(resumableState, nonce, externalRuntimeConfig, importMap, onHeaders, maxHeadersLength) {
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var idPrefix = resumableState.idPrefix;
          var bootstrapChunks = [];
          var externalRuntimeScript = null;
          var bootstrapScriptContent = resumableState.bootstrapScriptContent, bootstrapScripts = resumableState.bootstrapScripts, bootstrapModules = resumableState.bootstrapModules;
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeEntireInlineScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          {
            if (externalRuntimeConfig !== void 0) {
              if (typeof externalRuntimeConfig === "string") {
                externalRuntimeScript = {
                  src: externalRuntimeConfig,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig,
                  async: true,
                  integrity: void 0,
                  nonce
                });
              } else {
                externalRuntimeScript = {
                  src: externalRuntimeConfig.src,
                  chunks: []
                };
                pushScriptImpl(externalRuntimeScript.chunks, {
                  src: externalRuntimeConfig.src,
                  async: true,
                  integrity: externalRuntimeConfig.integrity,
                  nonce
                });
              }
            }
          }
          var importMapChunks = [];
          if (importMap !== void 0) {
            var map = importMap;
            importMapChunks.push(importMapScriptStart);
            importMapChunks.push(stringToChunk(escapeEntireInlineScriptContent(JSON.stringify(map))));
            importMapChunks.push(importMapScriptEnd);
          }
          {
            if (onHeaders && typeof maxHeadersLength === "number") {
              if (maxHeadersLength <= 0) {
                error("React expected a positive non-zero `maxHeadersLength` option but found %s instead. When using the `onHeaders` option you may supply an optional `maxHeadersLength` option as well however, when setting this value to zero or less no headers will be captured.", maxHeadersLength === 0 ? "zero" : maxHeadersLength);
              }
            }
          }
          var headers = onHeaders ? {
            preconnects: "",
            fontPreloads: "",
            highImagePreloads: "",
            remainingCapacity: typeof maxHeadersLength === "number" ? maxHeadersLength : DEFAULT_HEADERS_CAPACITY_IN_UTF16_CODE_UNITS
          } : null;
          var renderState = {
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: stringToPrecomputedChunk(idPrefix + "B:"),
            startInlineScript: inlineScriptWithNonce,
            htmlChunks: null,
            headChunks: null,
            externalRuntimeScript,
            bootstrapChunks,
            importMapChunks,
            onHeaders,
            headers,
            resets: {
              font: {},
              dns: {},
              connect: {
                default: {},
                anonymous: {},
                credentials: {}
              },
              image: {},
              style: {}
            },
            charsetChunks: [],
            viewportChunks: [],
            hoistableChunks: [],
            // cleared on flush
            preconnects: /* @__PURE__ */ new Set(),
            fontPreloads: /* @__PURE__ */ new Set(),
            highImagePreloads: /* @__PURE__ */ new Set(),
            // usedImagePreloads: new Set(),
            styles: /* @__PURE__ */ new Map(),
            bootstrapScripts: /* @__PURE__ */ new Set(),
            scripts: /* @__PURE__ */ new Set(),
            bulkPreloads: /* @__PURE__ */ new Set(),
            preloads: {
              images: /* @__PURE__ */ new Map(),
              stylesheets: /* @__PURE__ */ new Map(),
              scripts: /* @__PURE__ */ new Map(),
              moduleScripts: /* @__PURE__ */ new Map()
            },
            nonce,
            // like a module global for currently rendering boundary
            hoistableState: null,
            stylesToHoist: false
          };
          if (bootstrapScripts !== void 0) {
            for (var i = 0; i < bootstrapScripts.length; i++) {
              var scriptConfig = bootstrapScripts[i];
              var src = void 0, crossOrigin = void 0, integrity = void 0;
              var props = {
                rel: "preload",
                as: "script",
                fetchPriority: "low",
                nonce
              };
              if (typeof scriptConfig === "string") {
                props.href = src = scriptConfig;
              } else {
                props.href = src = scriptConfig.src;
                props.integrity = integrity = typeof scriptConfig.integrity === "string" ? scriptConfig.integrity : void 0;
                props.crossOrigin = crossOrigin = typeof scriptConfig === "string" || scriptConfig.crossOrigin == null ? void 0 : scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              }
              preloadBootstrapScriptOrModule(resumableState, renderState, src, props);
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (typeof integrity === "string") {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(integrity)));
              }
              if (typeof crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              var _scriptConfig = bootstrapModules[_i];
              var _src = void 0, _crossOrigin = void 0, _integrity = void 0;
              var _props = {
                rel: "modulepreload",
                fetchPriority: "low",
                nonce
              };
              if (typeof _scriptConfig === "string") {
                _props.href = _src = _scriptConfig;
              } else {
                _props.href = _src = _scriptConfig.src;
                _props.integrity = _integrity = typeof _scriptConfig.integrity === "string" ? _scriptConfig.integrity : void 0;
                _props.crossOrigin = _crossOrigin = typeof _scriptConfig === "string" || _scriptConfig.crossOrigin == null ? void 0 : _scriptConfig.crossOrigin === "use-credentials" ? "use-credentials" : "";
              }
              preloadBootstrapScriptOrModule(resumableState, renderState, _src, _props);
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(_src)));
              if (nonce) {
                bootstrapChunks.push(scriptNonce, stringToChunk(escapeTextForBrowser(nonce)));
              }
              if (typeof _integrity === "string") {
                bootstrapChunks.push(scriptIntegirty, stringToChunk(escapeTextForBrowser(_integrity)));
              }
              if (typeof _crossOrigin === "string") {
                bootstrapChunks.push(scriptCrossOrigin, stringToChunk(escapeTextForBrowser(_crossOrigin)));
              }
              bootstrapChunks.push(endAsyncScript);
            }
          }
          return renderState;
        }
        function resumeRenderState(resumableState, nonce) {
          return createRenderState(resumableState, nonce, void 0, void 0, void 0, void 0);
        }
        function createResumableState(identifierPrefix, externalRuntimeConfig, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var streamingFormat = ScriptStreamingFormat;
          {
            if (externalRuntimeConfig !== void 0) {
              streamingFormat = DataStreamingFormat;
            }
          }
          return {
            idPrefix,
            nextFormID: 0,
            streamingFormat,
            bootstrapScriptContent,
            bootstrapScripts,
            bootstrapModules,
            instructions: NothingSent,
            hasBody: false,
            hasHtml: false,
            // @TODO add bootstrap script to implicit preloads
            // persistent
            unknownResources: {},
            dnsResources: {},
            connectResources: {
              default: {},
              anonymous: {},
              credentials: {}
            },
            imageResources: {},
            styleResources: {},
            scriptResources: {},
            moduleUnknownResources: {},
            moduleScriptResources: {}
          };
        }
        function resetResumableState(resumableState, renderState) {
          resumableState.nextFormID = 0;
          resumableState.hasBody = false;
          resumableState.hasHtml = false;
          resumableState.unknownResources = {
            font: renderState.resets.font
          };
          resumableState.dnsResources = renderState.resets.dns;
          resumableState.connectResources = renderState.resets.connect;
          resumableState.imageResources = renderState.resets.image;
          resumableState.styleResources = renderState.resets.style;
          resumableState.scriptResources = {};
          resumableState.moduleUnknownResources = {};
          resumableState.moduleScriptResources = {};
        }
        function completeResumableState(resumableState) {
          resumableState.bootstrapScriptContent = void 0;
          resumableState.bootstrapScripts = void 0;
          resumableState.bootstrapModules = void 0;
        }
        var ROOT_HTML_MODE = 0;
        var HTML_HTML_MODE = 1;
        var HTML_MODE = 2;
        var SVG_MODE = 3;
        var MATHML_MODE = 4;
        var HTML_TABLE_MODE = 5;
        var HTML_TABLE_BODY_MODE = 6;
        var HTML_TABLE_ROW_MODE = 7;
        var HTML_COLGROUP_MODE = 8;
        var NO_SCOPE = (
          /*         */
          0
        );
        var NOSCRIPT_SCOPE = (
          /*   */
          1
        );
        var PICTURE_SCOPE = (
          /*    */
          2
        );
        function createFormatContext(insertionMode, selectedValue, tagScope) {
          return {
            insertionMode,
            selectedValue,
            tagScope
          };
        }
        function createRootFormatContext(namespaceURI) {
          var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
          return createFormatContext(insertionMode, null, NO_SCOPE);
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "noscript":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope | NOSCRIPT_SCOPE);
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue, parentContext.tagScope);
            case "svg":
              return createFormatContext(SVG_MODE, null, parentContext.tagScope);
            case "picture":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope | PICTURE_SCOPE);
            case "math":
              return createFormatContext(MATHML_MODE, null, parentContext.tagScope);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null, parentContext.tagScope);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null, parentContext.tagScope);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null, parentContext.tagScope);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null, parentContext.tagScope);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null, parentContext.tagScope);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null, parentContext.tagScope);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            if (type === "html") {
              return createFormatContext(HTML_HTML_MODE, null, parentContext.tagScope);
            } else {
              return createFormatContext(HTML_MODE, null, parentContext.tagScope);
            }
          } else if (parentContext.insertionMode === HTML_HTML_MODE) {
            return createFormatContext(HTML_MODE, null, parentContext.tagScope);
          }
          return parentContext;
        }
        function makeId(resumableState, treeId, localId) {
          var idPrefix = resumableState.idPrefix;
          var id = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          return id + ":";
        }
        function encodeHTMLTextNode(text) {
          return escapeTextForBrowser(text);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance(target, text, renderState, textEmbedded) {
          if (text === "") {
            return textEmbedded;
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          target.push(stringToChunk(encodeHTMLTextNode(text)));
          return true;
        }
        function pushSegmentFinale(target, renderState, lastPushedText, textEmbedded) {
          if (lastPushedText && textEmbedded) {
            target.push(textSeparator);
          }
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyleAttribute(target, style) {
          if (typeof style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style) {
            if (!hasOwnProperty.call(style, styleName)) {
              continue;
            }
            var styleValue = style[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !isUnitlessNumber(styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushBooleanAttribute(target, name, value) {
          if (value && typeof value !== "function" && typeof value !== "symbol") {
            target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
          }
        }
        function pushStringAttribute(target, name, value) {
          if (typeof value !== "function" && typeof value !== "symbol" && typeof value !== "boolean") {
            target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
          }
        }
        function makeFormFieldPrefix(resumableState) {
          var id = resumableState.nextFormID++;
          return resumableState.idPrefix + id;
        }
        var actionJavaScriptURL = stringToPrecomputedChunk(escapeTextForBrowser(
          // eslint-disable-next-line no-script-url
          "javascript:throw new Error('React form unexpectedly submitted.')"
        ));
        var startHiddenInputChunk = stringToPrecomputedChunk('<input type="hidden"');
        function pushAdditionalFormField(value, key) {
          var target = this;
          target.push(startHiddenInputChunk);
          if (typeof value !== "string") {
            throw new Error("File/Blob fields are not yet supported in progressive forms. It probably means you are closing over binary data or FormData in a Server Action.");
          }
          pushStringAttribute(target, "name", key);
          pushStringAttribute(target, "value", value);
          target.push(endOfStartTagSelfClosing);
        }
        function pushAdditionalFormFields(target, formData) {
          if (formData != null) {
            formData.forEach(pushAdditionalFormField, target);
          }
        }
        function getCustomFormFields(resumableState, formAction) {
          var customAction = formAction.$$FORM_ACTION;
          if (typeof customAction === "function") {
            var prefix2 = makeFormFieldPrefix(resumableState);
            try {
              return formAction.$$FORM_ACTION(prefix2);
            } catch (x) {
              if (typeof x === "object" && x !== null && typeof x.then === "function") {
                throw x;
              }
              {
                error("Failed to serialize an action for progressive enhancement:\n%s", x);
              }
            }
          }
          return null;
        }
        function pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name) {
          var formData = null;
          if (typeof formAction === "function") {
            {
              if (name !== null && !didWarnFormActionName) {
                didWarnFormActionName = true;
                error('Cannot specify a "name" prop for a button that specifies a function as a formAction. React needs it to encode which action should be invoked. It will get overridden.');
              }
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a formEncType or formMethod for a button that specifies a function as a formAction. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a formTarget for a button that specifies a function as a formAction. The function will always be executed in the same window.");
              }
            }
            var customFields = getCustomFormFields(resumableState, formAction);
            if (customFields !== null) {
              name = customFields.name;
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
            } else {
              target.push(attributeSeparator, stringToChunk("formAction"), attributeAssign, actionJavaScriptURL, attributeEnd);
              name = null;
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(resumableState, renderState);
            }
          }
          if (name != null) {
            pushAttribute(target, "name", name);
          }
          if (formAction != null) {
            pushAttribute(target, "formAction", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "formEncType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "formMethod", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "formTarget", formTarget);
          }
          return formData;
        }
        function pushAttribute(target, name, value) {
          switch (name) {
            case "className": {
              pushStringAttribute(target, "class", value);
              break;
            }
            case "tabIndex": {
              pushStringAttribute(target, "tabindex", value);
              break;
            }
            case "dir":
            case "role":
            case "viewBox":
            case "width":
            case "height": {
              pushStringAttribute(target, name, value);
              break;
            }
            case "style": {
              pushStyleAttribute(target, value);
              return;
            }
            case "src":
            case "href": {
              {
                if (value === "") {
                  {
                    if (name === "src") {
                      error('An empty string ("") was passed to the %s attribute. This may cause the browser to download the whole page again over the network. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', name, name);
                    } else {
                      error('An empty string ("") was passed to the %s attribute. To fix this, either do not render the element at all or pass null to %s instead of an empty string.', name, name);
                    }
                  }
                  return;
                }
              }
            }
            case "action":
            case "formAction": {
              if (value == null || typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(sanitizedValue)), attributeEnd);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "ref":
              return;
            case "autoFocus":
            case "multiple":
            case "muted": {
              pushBooleanAttribute(target, name.toLowerCase(), value);
              return;
            }
            case "xlinkHref": {
              if (typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
                return;
              }
              {
                checkAttributeStringCoercion(value, name);
              }
              var _sanitizedValue = sanitizeURL("" + value);
              target.push(attributeSeparator, stringToChunk("xlink:href"), attributeAssign, stringToChunk(escapeTextForBrowser(_sanitizedValue)), attributeEnd);
              return;
            }
            case "contentEditable":
            case "spellCheck":
            case "draggable":
            case "value":
            case "autoReverse":
            case "externalResourcesRequired":
            case "focusable":
            case "preserveAlpha": {
              if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "inert": {
              {
                if (value === "" && !didWarnForNewBooleanPropsWithEmptyValue[name]) {
                  didWarnForNewBooleanPropsWithEmptyValue[name] = true;
                  error("Received an empty string for a boolean attribute `%s`. This will treat the attribute as if it were false. Either pass `false` to silence this warning, or pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.", name);
                }
              }
            }
            case "allowFullScreen":
            case "async":
            case "autoPlay":
            case "controls":
            case "default":
            case "defer":
            case "disabled":
            case "disablePictureInPicture":
            case "disableRemotePlayback":
            case "formNoValidate":
            case "hidden":
            case "loop":
            case "noModule":
            case "noValidate":
            case "open":
            case "playsInline":
            case "readOnly":
            case "required":
            case "reversed":
            case "scoped":
            case "seamless":
            case "itemScope": {
              if (value && typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              }
              return;
            }
            case "capture":
            case "download": {
              if (value === true) {
                target.push(attributeSeparator, stringToChunk(name), attributeEmptyString);
              } else if (value === false)
                ;
              else if (typeof value !== "function" && typeof value !== "symbol") {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "cols":
            case "rows":
            case "size":
            case "span": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value) && value >= 1) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "rowSpan":
            case "start": {
              if (typeof value !== "function" && typeof value !== "symbol" && !isNaN(value)) {
                target.push(attributeSeparator, stringToChunk(name), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
              return;
            }
            case "xlinkActuate":
              pushStringAttribute(target, "xlink:actuate", value);
              return;
            case "xlinkArcrole":
              pushStringAttribute(target, "xlink:arcrole", value);
              return;
            case "xlinkRole":
              pushStringAttribute(target, "xlink:role", value);
              return;
            case "xlinkShow":
              pushStringAttribute(target, "xlink:show", value);
              return;
            case "xlinkTitle":
              pushStringAttribute(target, "xlink:title", value);
              return;
            case "xlinkType":
              pushStringAttribute(target, "xlink:type", value);
              return;
            case "xmlBase":
              pushStringAttribute(target, "xml:base", value);
              return;
            case "xmlLang":
              pushStringAttribute(target, "xml:lang", value);
              return;
            case "xmlSpace":
              pushStringAttribute(target, "xml:space", value);
              return;
            default:
              if (
                // shouldIgnoreAttribute
                // We have already filtered out null/undefined and reserved words.
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              var attributeName = getAttributeAlias(name);
              if (isAttributeNameSafe(attributeName)) {
                switch (typeof value) {
                  case "function":
                  case "symbol":
                    return;
                  case "boolean": {
                    var prefix2 = attributeName.toLowerCase().slice(0, 5);
                    if (prefix2 !== "data-" && prefix2 !== "aria-") {
                      return;
                    }
                  }
                }
                target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              }
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target, innerHTML, children) {
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              {
                checkHtmlStringCoercion(html);
              }
              target.push(stringToChunk("" + html));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        var didWarnFormActionType = false;
        var didWarnFormActionName = false;
        var didWarnFormActionTarget = false;
        var didWarnFormActionMethod = false;
        function checkSelectProp(props, propName) {
          {
            var value = props[propName];
            if (value != null) {
              var array = isArray(value);
              if (props.multiple && !array) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartAnchor(target, props) {
          target.push(startChunkForTag("a"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "href":
                  if (propValue === "") {
                    pushStringAttribute(target, "href", "");
                  } else {
                    pushAttribute(target, propKey, propValue);
                  }
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartSelect(target, props) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://react.dev/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target.push(startChunkForTag("select"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        function flattenOptionChildren(children) {
          var content = "";
          React.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number" && typeof child !== "bigint") {
                didWarnInvalidOptionChildren = true;
                error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target, props, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var children = null;
          var value = null;
          var selected = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "selected":
                  selected = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value = propValue;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value !== null) {
              {
                checkAttributeStringCoercion(value, "value");
              }
              stringValue = "" + value;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children);
            }
            if (isArray(selectedValue)) {
              for (var i = 0; i < selectedValue.length; i++) {
                {
                  checkAttributeStringCoercion(selectedValue[i], "value");
                }
                var v = "" + selectedValue[i];
                if (v === stringValue) {
                  target.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target.push(selectedMarkerAttribute);
              }
            }
          } else if (selected) {
            target.push(selectedMarkerAttribute);
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var formReplayingRuntimeScript = stringToPrecomputedChunk(formReplaying);
        function injectFormReplayingRuntime(resumableState, renderState) {
          if ((resumableState.instructions & SentFormReplayingRuntime) === NothingSent && !renderState.externalRuntimeScript) {
            resumableState.instructions |= SentFormReplayingRuntime;
            renderState.bootstrapChunks.unshift(renderState.startInlineScript, formReplayingRuntimeScript, endInlineScript);
          }
        }
        var formStateMarkerIsMatching = stringToPrecomputedChunk("<!--F!-->");
        var formStateMarkerIsNotMatching = stringToPrecomputedChunk("<!--F-->");
        function pushFormStateMarkerIsMatching(target) {
          target.push(formStateMarkerIsMatching);
        }
        function pushFormStateMarkerIsNotMatching(target) {
          target.push(formStateMarkerIsNotMatching);
        }
        function pushStartForm(target, props, resumableState, renderState) {
          target.push(startChunkForTag("form"));
          var children = null;
          var innerHTML = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "action":
                  formAction = propValue;
                  break;
                case "encType":
                  formEncType = propValue;
                  break;
                case "method":
                  formMethod = propValue;
                  break;
                case "target":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          var formData = null;
          var formActionName = null;
          if (typeof formAction === "function") {
            {
              if ((formEncType !== null || formMethod !== null) && !didWarnFormActionMethod) {
                didWarnFormActionMethod = true;
                error("Cannot specify a encType or method for a form that specifies a function as the action. React provides those automatically. They will get overridden.");
              }
              if (formTarget !== null && !didWarnFormActionTarget) {
                didWarnFormActionTarget = true;
                error("Cannot specify a target for a form that specifies a function as the action. The function will always be executed in the same window.");
              }
            }
            var customFields = getCustomFormFields(resumableState, formAction);
            if (customFields !== null) {
              formAction = customFields.action || "";
              formEncType = customFields.encType;
              formMethod = customFields.method;
              formTarget = customFields.target;
              formData = customFields.data;
              formActionName = customFields.name;
            } else {
              target.push(attributeSeparator, stringToChunk("action"), attributeAssign, actionJavaScriptURL, attributeEnd);
              formAction = null;
              formEncType = null;
              formMethod = null;
              formTarget = null;
              injectFormReplayingRuntime(resumableState, renderState);
            }
          }
          if (formAction != null) {
            pushAttribute(target, "action", formAction);
          }
          if (formEncType != null) {
            pushAttribute(target, "encType", formEncType);
          }
          if (formMethod != null) {
            pushAttribute(target, "method", formMethod);
          }
          if (formTarget != null) {
            pushAttribute(target, "target", formTarget);
          }
          target.push(endOfStartTag);
          if (formActionName !== null) {
            target.push(startHiddenInputChunk);
            pushStringAttribute(target, "name", formActionName);
            target.push(endOfStartTagSelfClosing);
            pushAdditionalFormFields(target, formData);
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushInput(target, props, resumableState, renderState) {
          {
            checkControlledValueProps("input", props);
          }
          target.push(startChunkForTag("input"));
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          var value = null;
          var defaultValue = null;
          var checked = null;
          var defaultChecked = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                case "defaultChecked":
                  defaultChecked = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "checked":
                  checked = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type !== "image" && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('An input can only specify a formAction along with type="submit" or type="image".');
            }
          }
          var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);
          {
            if (checked !== null && defaultChecked !== null && !didWarnDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (value !== null && defaultValue !== null && !didWarnDefaultInputValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://react.dev/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          if (checked !== null) {
            pushBooleanAttribute(target, "checked", checked);
          } else if (defaultChecked !== null) {
            pushBooleanAttribute(target, "checked", defaultChecked);
          }
          if (value !== null) {
            pushAttribute(target, "value", value);
          } else if (defaultValue !== null) {
            pushAttribute(target, "value", defaultValue);
          }
          target.push(endOfStartTagSelfClosing);
          pushAdditionalFormFields(target, formData);
          return null;
        }
        function pushStartButton(target, props, resumableState, renderState) {
          target.push(startChunkForTag("button"));
          var children = null;
          var innerHTML = null;
          var name = null;
          var formAction = null;
          var formEncType = null;
          var formMethod = null;
          var formTarget = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "name":
                  name = propValue;
                  break;
                case "formAction":
                  formAction = propValue;
                  break;
                case "formEncType":
                  formEncType = propValue;
                  break;
                case "formMethod":
                  formMethod = propValue;
                  break;
                case "formTarget":
                  formTarget = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          {
            if (formAction !== null && props.type != null && props.type !== "submit" && !didWarnFormActionType) {
              didWarnFormActionType = true;
              error('A button can only specify a formAction along with type="submit" or no type.');
            }
          }
          var formData = pushFormActionAttribute(target, resumableState, renderState, formAction, formEncType, formMethod, formTarget, name);
          target.push(endOfStartTag);
          pushAdditionalFormFields(target, formData);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartTextArea(target, props) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://react.dev/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target.push(startChunkForTag("textarea"));
          var value = null;
          var defaultValue = null;
          var children = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "value":
                  value = propValue;
                  break;
                case "defaultValue":
                  defaultValue = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          if (value === null && defaultValue !== null) {
            value = defaultValue;
          }
          target.push(endOfStartTag);
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray(children)) {
              if (children.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children[0]);
              }
              value = "" + children[0];
            }
            {
              checkHtmlStringCoercion(children);
            }
            value = "" + children;
          }
          if (typeof value === "string" && value[0] === "\n") {
            target.push(leadingNewline);
          }
          if (value !== null) {
            {
              checkAttributeStringCoercion(value, "value");
            }
            target.push(stringToChunk(encodeHTMLTextNode("" + value)));
          }
          return null;
        }
        function pushMeta(target, props, renderState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {
          if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
            return pushSelfClosing(target, props, "meta");
          } else {
            if (textEmbedded) {
              target.push(textSeparator);
            }
            if (isFallback) {
              return null;
            } else if (typeof props.charSet === "string") {
              return pushSelfClosing(renderState.charsetChunks, props, "meta");
            } else if (props.name === "viewport") {
              return pushSelfClosing(renderState.viewportChunks, props, "meta");
            } else {
              return pushSelfClosing(renderState.hoistableChunks, props, "meta");
            }
          }
        }
        function pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope, isFallback) {
          var rel = props.rel;
          var href = props.href;
          var precedence = props.precedence;
          if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof rel !== "string" || typeof href !== "string" || href === "") {
            {
              if (rel === "stylesheet" && typeof props.precedence === "string") {
                if (typeof href !== "string" || !href) {
                  error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and expected the `href` prop to be a non-empty string but ecountered %s instead. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop ensure there is a non-empty string `href` prop as well, otherwise remove the `precedence` prop.', getValueDescriptorExpectingObjectForWarning(href));
                }
              }
            }
            pushLinkImpl(target, props);
            return null;
          }
          if (props.rel === "stylesheet") {
            var key = getResourceKey(href);
            if (typeof precedence !== "string" || props.disabled != null || props.onLoad || props.onError) {
              {
                if (typeof precedence === "string") {
                  if (props.disabled != null) {
                    error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and a `disabled` prop. The presence of the `disabled` prop indicates an intent to manage the stylesheet active state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the `disabled` prop, otherwise remove the `precedence` prop.');
                  } else if (props.onLoad || props.onError) {
                    var propDescription = props.onLoad && props.onError ? "`onLoad` and `onError` props" : props.onLoad ? "`onLoad` prop" : "`onError` prop";
                    error('React encountered a `<link rel="stylesheet" .../>` with a `precedence` prop and %s. The presence of loading and error handlers indicates an intent to manage the stylesheet loading state from your from your Component code and React will not hoist or deduplicate this stylesheet. If your intent was to have React hoist and deduplciate this stylesheet using the `precedence` prop remove the %s, otherwise remove the `precedence` prop.', propDescription, propDescription);
                  }
                }
              }
              return pushLinkImpl(target, props);
            } else {
              var styleQueue = renderState.styles.get(precedence);
              var hasKey = resumableState.styleResources.hasOwnProperty(key);
              var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
              if (resourceState !== EXISTS) {
                resumableState.styleResources[key] = EXISTS;
                if (!styleQueue) {
                  styleQueue = {
                    precedence: stringToChunk(escapeTextForBrowser(precedence)),
                    rules: [],
                    hrefs: [],
                    sheets: /* @__PURE__ */ new Map()
                  };
                  renderState.styles.set(precedence, styleQueue);
                }
                var resource = {
                  state: PENDING$1,
                  props: stylesheetPropsFromRawProps(props)
                };
                if (resourceState) {
                  var preloadState = resourceState;
                  if (preloadState.length === 2) {
                    adoptPreloadCredentials(resource.props, preloadState);
                  }
                  var preloadResource = renderState.preloads.stylesheets.get(key);
                  if (preloadResource && preloadResource.length > 0) {
                    preloadResource.length = 0;
                  } else {
                    resource.state = PRELOADED;
                  }
                }
                styleQueue.sheets.set(key, resource);
                if (hoistableState) {
                  hoistableState.stylesheets.add(resource);
                }
              } else {
                if (styleQueue) {
                  var _resource = styleQueue.sheets.get(key);
                  if (_resource) {
                    if (hoistableState) {
                      hoistableState.stylesheets.add(_resource);
                    }
                  }
                }
              }
              if (textEmbedded) {
                target.push(textSeparator);
              }
              return null;
            }
          } else if (props.onLoad || props.onError) {
            return pushLinkImpl(target, props);
          } else {
            if (textEmbedded) {
              target.push(textSeparator);
            }
            if (isFallback) {
              return null;
            } else {
              return pushLinkImpl(renderState.hoistableChunks, props);
            }
          }
        }
        function pushLinkImpl(target, props) {
          target.push(startChunkForTag("link"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, insertionMode, noscriptTagInScope) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (typeof child === "function" || typeof child === "symbol" || Array.isArray(child)) {
                var childType = typeof child === "function" ? "a Function" : typeof child === "symbol" ? "a Sybmol" : "an Array";
                error("React expect children of <style> tags to be a string, number, or object with a `toString` method but found %s instead. In browsers style Elements can only have `Text` Nodes as children.", childType);
              }
            }
          }
          var precedence = props.precedence;
          var href = props.href;
          if (insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null || typeof precedence !== "string" || typeof href !== "string" || href === "") {
            return pushStyleImpl(target, props);
          }
          {
            if (href.includes(" ")) {
              error('React expected the `href` prop for a <style> tag opting into hoisting semantics using the `precedence` prop to not have any spaces but ecountered spaces instead. using spaces in this prop will cause hydration of this style to fail on the client. The href for the <style> where this ocurred is "%s".', href);
            }
          }
          var key = getResourceKey(href);
          var styleQueue = renderState.styles.get(precedence);
          var hasKey = resumableState.styleResources.hasOwnProperty(key);
          var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
          if (resourceState !== EXISTS) {
            resumableState.styleResources[key] = EXISTS;
            {
              if (resourceState) {
                error('React encountered a hoistable style tag for the same href as a preload: "%s". When using a style tag to inline styles you should not also preload it as a stylsheet.', href);
              }
            }
            if (!styleQueue) {
              styleQueue = {
                precedence: stringToChunk(escapeTextForBrowser(precedence)),
                rules: [],
                hrefs: [stringToChunk(escapeTextForBrowser(href))],
                sheets: /* @__PURE__ */ new Map()
              };
              renderState.styles.set(precedence, styleQueue);
            } else {
              styleQueue.hrefs.push(stringToChunk(escapeTextForBrowser(href)));
            }
            pushStyleContents(styleQueue.rules, props);
          }
          if (styleQueue) {
            if (hoistableState) {
              hoistableState.styles.add(styleQueue);
            }
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
        }
        function escapeStyleTextContent(styleText) {
          {
            checkHtmlStringCoercion(styleText);
          }
          return ("" + styleText).replace(styleRegex, styleReplacer);
        }
        var styleRegex = /(<\/|<)(s)(tyle)/gi;
        var styleReplacer = function(match, prefix2, s, suffix) {
          return "" + prefix2 + (s === "s" ? "\\73 " : "\\53 ") + suffix;
        };
        function pushStyleImpl(target, props) {
          target.push(startChunkForTag("style"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeStyleTextContent(child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endChunkForTag("style"));
          return null;
        }
        function pushStyleContents(target, props) {
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
              }
            }
          }
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeStyleTextContent(child)));
          }
          pushInnerHTML(target, innerHTML, children);
          return;
        }
        function pushImg(target, props, resumableState, renderState, pictureOrNoScriptTagInScope) {
          var src = props.src, srcSet = props.srcSet;
          if (props.loading !== "lazy" && (src || srcSet) && (typeof src === "string" || src == null) && (typeof srcSet === "string" || srcSet == null) && props.fetchPriority !== "low" && pictureOrNoScriptTagInScope === false && // We exclude data URIs in src and srcSet since these should not be preloaded
          !(typeof src === "string" && src[4] === ":" && (src[0] === "d" || src[0] === "D") && (src[1] === "a" || src[1] === "A") && (src[2] === "t" || src[2] === "T") && (src[3] === "a" || src[3] === "A")) && !(typeof srcSet === "string" && srcSet[4] === ":" && (srcSet[0] === "d" || srcSet[0] === "D") && (srcSet[1] === "a" || srcSet[1] === "A") && (srcSet[2] === "t" || srcSet[2] === "T") && (srcSet[3] === "a" || srcSet[3] === "A"))) {
            var sizes = typeof props.sizes === "string" ? props.sizes : void 0;
            var key = getImageResourceKey(src, srcSet, sizes);
            var promotablePreloads = renderState.preloads.images;
            var resource = promotablePreloads.get(key);
            if (resource) {
              if (props.fetchPriority === "high" || renderState.highImagePreloads.size < 10) {
                promotablePreloads.delete(key);
                renderState.highImagePreloads.add(resource);
              }
            } else if (!resumableState.imageResources.hasOwnProperty(key)) {
              resumableState.imageResources[key] = PRELOAD_NO_CREDS;
              var crossOrigin = getCrossOriginString(props.crossOrigin);
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // this is a hueristic similar to capping element preloads to 10 unless explicitly
              // fetchPriority="high". We use length here which means it will fit fewer images when
              // the urls are long and more when short. arguably byte size is a better hueristic because
              // it directly translates to how much we send down before content is actually seen.
              // We could unify the counts and also make it so the total is tracked regardless of
              // flushing output but since the headers are likely to be go earlier than content
              // they don't really conflict so for now I've kept them separate
              (props.fetchPriority === "high" || headers.highImagePreloads.length < 500) && // We manually construct the options for the preload only from strings. We don't want to pollute
              // the params list with arbitrary props and if we copied everything over as it we might get
              // coercion errors. We have checks for this in Dev but it seems safer to just only accept values
              // that are strings
              (header = getPreloadAsHeader(src, "image", {
                imageSrcSet: props.srcSet,
                imageSizes: props.sizes,
                crossOrigin,
                integrity: props.integrity,
                nonce: props.nonce,
                type: props.type,
                fetchPriority: props.fetchPriority,
                referrerPolicy: props.refererPolicy
              }), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.image[key] = PRELOAD_NO_CREDS;
                if (headers.highImagePreloads) {
                  headers.highImagePreloads += ", ";
                }
                headers.highImagePreloads += header;
              } else {
                resource = [];
                pushLinkImpl(resource, {
                  rel: "preload",
                  as: "image",
                  // There is a bug in Safari where imageSrcSet is not respected on preload links
                  // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.
                  // This harms older browers that do not support imageSrcSet by making their preloads not work
                  // but this population is shrinking fast and is already small so we accept this tradeoff.
                  href: srcSet ? void 0 : src,
                  imageSrcSet: srcSet,
                  imageSizes: sizes,
                  crossOrigin,
                  integrity: props.integrity,
                  type: props.type,
                  fetchPriority: props.fetchPriority,
                  referrerPolicy: props.referrerPolicy
                });
                if (props.fetchPriority === "high" || renderState.highImagePreloads.size < 10) {
                  renderState.highImagePreloads.add(resource);
                } else {
                  renderState.bulkPreloads.add(resource);
                  promotablePreloads.set(key, resource);
                }
              }
            }
          }
          return pushSelfClosing(target, props, "img");
        }
        function pushSelfClosing(target, props, tag) {
          target.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target, props) {
          target.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          return null;
        }
        function pushTitle(target, props, renderState, insertionMode, noscriptTagInScope, isFallback) {
          {
            if (hasOwnProperty.call(props, "children")) {
              var children = props.children;
              var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
              if (Array.isArray(children) && children.length > 1) {
                error("React expects the `children` prop of <title> tags to be a string, number, bigint, or object with a novel `toString` method but found an Array with length %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert `children` of <title> tags to a single string value which is why Arrays of length greater than 1 are not supported. When using JSX it can be commong to combine text nodes and value nodes. For example: <title>hello {nameOfUser}</title>. While not immediately apparent, `children` in this case is an Array with length 2. If your `children` prop is using this form try rewriting it using a template string: <title>{`hello ${nameOfUser}`}</title>.", children.length);
              } else if (typeof child === "function" || typeof child === "symbol") {
                var childType = typeof child === "function" ? "a Function" : "a Sybmol";
                error("React expect children of <title> tags to be a string, number, bigint, or object with a novel `toString` method but found %s instead. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value.", childType);
              } else if (child && child.toString === {}.toString) {
                if (child.$$typeof != null) {
                  error("React expects the `children` prop of <title> tags to be a string, number, bigint, or object with a novel `toString` method but found an object that appears to be a React element which never implements a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value which is why rendering React elements is not supported. If the `children` of <title> is a React Component try moving the <title> tag into that component. If the `children` of <title> is some HTML markup change it to be Text only to be valid HTML.");
                } else {
                  error("React expects the `children` prop of <title> tags to be a string, number, bigint, or object with a novel `toString` method but found an object that does not implement a suitable `toString` method. Browsers treat all child Nodes of <title> tags as Text content and React expects to be able to convert children of <title> tags to a single string value. Using the default `toString` method available on every object is almost certainly an error. Consider whether the `children` of this <title> is an object in error and change it to a string or number value if so. Otherwise implement a `toString` method that React can use to produce a valid <title>.");
                }
              }
            }
          }
          if (insertionMode !== SVG_MODE && !noscriptTagInScope && props.itemProp == null) {
            if (isFallback) {
              return null;
            } else {
              pushTitleImpl(renderState.hoistableChunks, props);
            }
          } else {
            return pushTitleImpl(target, props);
          }
        }
        function pushTitleImpl(target, props) {
          target.push(startChunkForTag("title"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          var child = Array.isArray(children) ? children.length < 2 ? children[0] : null : children;
          if (typeof child !== "function" && typeof child !== "symbol" && child !== null && child !== void 0) {
            target.push(stringToChunk(escapeTextForBrowser("" + child)));
          }
          pushInnerHTML(target, innerHTML, children);
          target.push(endChunkForTag("title"));
          return null;
        }
        function pushStartHead(target, props, renderState, insertionMode) {
          if (insertionMode < HTML_MODE && renderState.headChunks === null) {
            renderState.headChunks = [];
            return pushStartGenericElement(renderState.headChunks, props, "head");
          } else {
            return pushStartGenericElement(target, props, "head");
          }
        }
        function pushStartHtml(target, props, renderState, insertionMode) {
          if (insertionMode === ROOT_HTML_MODE && renderState.htmlChunks === null) {
            renderState.htmlChunks = [doctypeChunk];
            return pushStartGenericElement(renderState.htmlChunks, props, "html");
          } else {
            return pushStartGenericElement(target, props, "html");
          }
        }
        function pushScript(target, props, resumableState, renderState, textEmbedded, insertionMode, noscriptTagInScope) {
          var asyncProp = props.async;
          if (typeof props.src !== "string" || !props.src || !(asyncProp && typeof asyncProp !== "function" && typeof asyncProp !== "symbol") || props.onLoad || props.onError || insertionMode === SVG_MODE || noscriptTagInScope || props.itemProp != null) {
            return pushScriptImpl(target, props);
          }
          var src = props.src;
          var key = getResourceKey(src);
          var resources, preloads;
          if (props.type === "module") {
            resources = resumableState.moduleScriptResources;
            preloads = renderState.preloads.moduleScripts;
          } else {
            resources = resumableState.scriptResources;
            preloads = renderState.preloads.scripts;
          }
          var hasKey = resources.hasOwnProperty(key);
          var resourceState = hasKey ? resources[key] : void 0;
          if (resourceState !== EXISTS) {
            resources[key] = EXISTS;
            var scriptProps = props;
            if (resourceState) {
              var preloadState = resourceState;
              if (preloadState.length === 2) {
                scriptProps = assign({}, props);
                adoptPreloadCredentials(scriptProps, preloadState);
              }
              var preloadResource = preloads.get(key);
              if (preloadResource) {
                preloadResource.length = 0;
              }
            }
            var resource = [];
            renderState.scripts.add(resource);
            pushScriptImpl(resource, scriptProps);
          }
          if (textEmbedded) {
            target.push(textSeparator);
          }
          return null;
        }
        function pushScriptImpl(target, props) {
          target.push(startChunkForTag("script"));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          {
            if (children != null && typeof children !== "string") {
              var descriptiveStatement = typeof children === "number" ? "a number for children" : Array.isArray(children) ? "an array for children" : "something unexpected for children";
              error("A script element was rendered with %s. If script element has children it must be a single string. Consider using dangerouslySetInnerHTML or passing a plain string as children.", descriptiveStatement);
            }
          }
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(escapeEntireInlineScriptContent(children)));
          }
          target.push(endChunkForTag("script"));
          return null;
        }
        function pushStartGenericElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          if (typeof children === "string") {
            target.push(stringToChunk(encodeHTMLTextNode(children)));
            return null;
          }
          return children;
        }
        function pushStartCustomElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              var attributeName = propKey;
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyleAttribute(target, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                case "ref":
                  break;
                case "className":
                  attributeName = "class";
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    if (propValue === false) {
                      continue;
                    } else if (propValue === true) {
                      propValue = "";
                    } else if (typeof propValue === "object") {
                      continue;
                    }
                    target.push(attributeSeparator, stringToChunk(attributeName), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          pushInnerHTML(target, innerHTML, children);
          return children;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target, props, tag) {
          target.push(startChunkForTag(tag));
          var children = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, propKey, propValue);
                  break;
              }
            }
          }
          target.push(endOfStartTag);
          if (innerHTML != null) {
            if (children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://react.dev/link/dangerously-set-inner-html for more information.");
            }
            var html = innerHTML.__html;
            if (html !== null && html !== void 0) {
              if (typeof html === "string" && html.length > 0 && html[0] === "\n") {
                target.push(leadingNewline, stringToChunk(html));
              } else {
                {
                  checkHtmlStringCoercion(html);
                }
                target.push(stringToChunk("" + html));
              }
            }
          }
          if (typeof children === "string" && children[0] === "\n") {
            target.push(leadingNewline);
          }
          return children;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var doctypeChunk = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target, type, props, resumableState, renderState, hoistableState, formatContext, textEmbedded, isFallback) {
          {
            validateProperties$2(type, props);
            validateProperties$1(type, props);
            validateProperties(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && type.toLowerCase() !== type) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "div":
            case "span":
            case "svg":
            case "path":
              break;
            case "a": {
              return pushStartAnchor(target, props);
            }
            case "g":
            case "p":
            case "li":
              break;
            case "select":
              return pushStartSelect(target, props);
            case "option":
              return pushStartOption(target, props, formatContext);
            case "textarea":
              return pushStartTextArea(target, props);
            case "input":
              return pushInput(target, props, resumableState, renderState);
            case "button":
              return pushStartButton(target, props, resumableState, renderState);
            case "form":
              return pushStartForm(target, props, resumableState, renderState);
            case "menuitem":
              return pushStartMenuItem(target, props);
            case "title":
              return pushTitle(target, props, renderState, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "link":
              return pushLink(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "script":
              return pushScript(target, props, resumableState, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));
            case "style":
              return pushStyle(target, props, resumableState, renderState, hoistableState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE));
            case "meta":
              return pushMeta(target, props, renderState, textEmbedded, formatContext.insertionMode, !!(formatContext.tagScope & NOSCRIPT_SCOPE), isFallback);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target, props, type);
            }
            case "img": {
              return pushImg(target, props, resumableState, renderState, !!(formatContext.tagScope & (PICTURE_SCOPE | NOSCRIPT_SCOPE)));
            }
            case "base":
            case "area":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "keygen":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target, props, type);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              break;
            }
            case "head":
              return pushStartHead(target, props, renderState, formatContext.insertionMode);
            case "html": {
              return pushStartHtml(target, props, renderState, formatContext.insertionMode);
            }
            default: {
              if (type.indexOf("-") !== -1) {
                return pushStartCustomElement(target, props, type);
              }
            }
          }
          return pushStartGenericElement(target, props, type);
        }
        var endTagCache = /* @__PURE__ */ new Map();
        function endChunkForTag(tag) {
          var chunk = endTagCache.get(tag);
          if (chunk === void 0) {
            chunk = stringToPrecomputedChunk("</" + tag + ">");
            endTagCache.set(tag, chunk);
          }
          return chunk;
        }
        function pushEndInstance(target, type, props, resumableState, formatContext) {
          switch (type) {
            case "title":
            case "style":
            case "script":
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return;
            }
            case "body": {
              if (formatContext.insertionMode <= HTML_HTML_MODE) {
                resumableState.hasBody = true;
                return;
              }
              break;
            }
            case "html":
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                resumableState.hasHtml = true;
                return;
              }
              break;
          }
          target.push(endChunkForTag(type));
        }
        function writeBootstrap(destination, renderState) {
          var bootstrapChunks = renderState.bootstrapChunks;
          var i = 0;
          for (; i < bootstrapChunks.length - 1; i++) {
            writeChunk(destination, bootstrapChunks[i]);
          }
          if (i < bootstrapChunks.length) {
            var lastChunk = bootstrapChunks[i];
            bootstrapChunks.length = 0;
            return writeChunkAndReturn(destination, lastChunk);
          }
          return true;
        }
        function writeCompletedRoot(destination, renderState) {
          return writeBootstrap(destination, renderState);
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder2 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, renderState, id) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, renderState.placeholderPrefix);
          var formattedID = stringToChunk(id.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder2);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
        var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
        var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
        var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
        var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
        var clientRenderedSuspenseBoundaryError1D = stringToPrecomputedChunk(' data-cstck="');
        var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
        function writeStartCompletedSuspenseBoundary(destination, renderState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, renderState, id) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, stringToChunk(id.toString(16)));
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, renderState, errorDigest, errorMessage, errorStack, errorComponentStack) {
          var result;
          result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
          writeChunk(destination, clientRenderedSuspenseBoundaryError1);
          if (errorDigest) {
            writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
            writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
            writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
          }
          {
            if (errorMessage) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1D);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
          }
          result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
          return result;
        }
        function writeEndCompletedSuspenseBoundary(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, renderState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, renderState, formatContext, id) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, renderState.segmentPrefix);
              writeChunk(destination, stringToChunk(id.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegment + '$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScriptEnd = stringToPrecomputedChunk('")</script>');
        var completeSegmentData1 = stringToPrecomputedChunk('<template data-rsi="" data-sid="');
        var completeSegmentData2 = stringToPrecomputedChunk('" data-pid="');
        var completeSegmentDataEnd = dataElementQuotedEnd;
        function writeCompletedSegmentInstruction(destination, resumableState, renderState, contentSegmentID) {
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if ((resumableState.instructions & SentCompleteSegmentFunction) === NothingSent) {
              resumableState.instructions |= SentCompleteSegmentFunction;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
          } else {
            writeChunk(destination, completeSegmentData1);
          }
          writeChunk(destination, renderState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            writeChunk(destination, completeSegmentScript2);
          } else {
            writeChunk(destination, completeSegmentData2);
          }
          writeChunk(destination, renderState.placeholderPrefix);
          writeChunk(destination, formattedID);
          if (scriptFormat) {
            return writeChunkAndReturn(destination, completeSegmentScriptEnd);
          } else {
            return writeChunkAndReturn(destination, completeSegmentDataEnd);
          }
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundary + '$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryWithStylesScript1FullBoth = stringToPrecomputedChunk(completeBoundary + completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1FullPartial = stringToPrecomputedChunk(completeBoundaryWithStyles + '$RR("');
        var completeBoundaryWithStylesScript1Partial = stringToPrecomputedChunk('$RR("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3a = stringToPrecomputedChunk('",');
        var completeBoundaryScript3b = stringToPrecomputedChunk('"');
        var completeBoundaryScriptEnd = stringToPrecomputedChunk(")</script>");
        var completeBoundaryData1 = stringToPrecomputedChunk('<template data-rci="" data-bid="');
        var completeBoundaryWithStylesData1 = stringToPrecomputedChunk('<template data-rri="" data-bid="');
        var completeBoundaryData2 = stringToPrecomputedChunk('" data-sid="');
        var completeBoundaryData3a = stringToPrecomputedChunk('" data-sty="');
        var completeBoundaryDataEnd = dataElementQuotedEnd;
        function writeCompletedBoundaryInstruction(destination, resumableState, renderState, id, hoistableState) {
          var requiresStyleInsertion = renderState.stylesToHoist;
          renderState.stylesToHoist = false;
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if (requiresStyleInsertion) {
              if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                resumableState.instructions |= SentStyleInsertionFunction | SentCompleteBoundaryFunction;
                writeChunk(destination, completeBoundaryWithStylesScript1FullBoth);
              } else if ((resumableState.instructions & SentStyleInsertionFunction) === NothingSent) {
                resumableState.instructions |= SentStyleInsertionFunction;
                writeChunk(destination, completeBoundaryWithStylesScript1FullPartial);
              } else {
                writeChunk(destination, completeBoundaryWithStylesScript1Partial);
              }
            } else {
              if ((resumableState.instructions & SentCompleteBoundaryFunction) === NothingSent) {
                resumableState.instructions |= SentCompleteBoundaryFunction;
                writeChunk(destination, completeBoundaryScript1Full);
              } else {
                writeChunk(destination, completeBoundaryScript1Partial);
              }
            }
          } else {
            if (requiresStyleInsertion) {
              writeChunk(destination, completeBoundaryWithStylesData1);
            } else {
              writeChunk(destination, completeBoundaryData1);
            }
          }
          var idChunk = stringToChunk(id.toString(16));
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, idChunk);
          if (scriptFormat) {
            writeChunk(destination, completeBoundaryScript2);
          } else {
            writeChunk(destination, completeBoundaryData2);
          }
          writeChunk(destination, renderState.segmentPrefix);
          writeChunk(destination, idChunk);
          if (requiresStyleInsertion) {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3a);
              writeStyleResourceDependenciesInJS(destination, hoistableState);
            } else {
              writeChunk(destination, completeBoundaryData3a);
              writeStyleResourceDependenciesInAttr(destination, hoistableState);
            }
          } else {
            if (scriptFormat) {
              writeChunk(destination, completeBoundaryScript3b);
            }
          }
          var writeMore;
          if (scriptFormat) {
            writeMore = writeChunkAndReturn(destination, completeBoundaryScriptEnd);
          } else {
            writeMore = writeChunkAndReturn(destination, completeBoundaryDataEnd);
          }
          return writeBootstrap(destination, renderState) && writeMore;
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderBoundary + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript1A = stringToPrecomputedChunk('"');
        var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
        var clientRenderScriptEnd = stringToPrecomputedChunk(")</script>");
        var clientRenderData1 = stringToPrecomputedChunk('<template data-rxi="" data-bid="');
        var clientRenderData2 = stringToPrecomputedChunk('" data-dgst="');
        var clientRenderData3 = stringToPrecomputedChunk('" data-msg="');
        var clientRenderData4 = stringToPrecomputedChunk('" data-stck="');
        var clientRenderData5 = stringToPrecomputedChunk('" data-cstck="');
        var clientRenderDataEnd = dataElementQuotedEnd;
        function writeClientRenderBoundaryInstruction(destination, resumableState, renderState, id, errorDigest, errorMessage, errorStack, errorComponentStack) {
          var scriptFormat = resumableState.streamingFormat === ScriptStreamingFormat;
          if (scriptFormat) {
            writeChunk(destination, renderState.startInlineScript);
            if ((resumableState.instructions & SentClientRenderFunction) === NothingSent) {
              resumableState.instructions |= SentClientRenderFunction;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
          } else {
            writeChunk(destination, clientRenderData1);
          }
          writeChunk(destination, renderState.boundaryPrefix);
          writeChunk(destination, stringToChunk(id.toString(16)));
          if (scriptFormat) {
            writeChunk(destination, clientRenderScript1A);
          }
          if (errorDigest || errorMessage || errorStack || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
            } else {
              writeChunk(destination, clientRenderData2);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest || "")));
            }
          }
          if (errorMessage || errorStack || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
            } else {
              writeChunk(destination, clientRenderData3);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMessage || "")));
            }
          }
          if (errorStack || errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorStack || "")));
            } else {
              writeChunk(destination, clientRenderData4);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorStack || "")));
            }
          }
          if (errorComponentStack) {
            if (scriptFormat) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
            } else {
              writeChunk(destination, clientRenderData5);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
            }
          }
          if (scriptFormat) {
            return writeChunkAndReturn(destination, clientRenderScriptEnd);
          } else {
            return writeChunkAndReturn(destination, clientRenderDataEnd);
          }
        }
        var regexForJSStringsInInstructionScripts = /[<\u2028\u2029]/g;
        function escapeJSStringsForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInInstructionScripts, function(match) {
            switch (match) {
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var regexForJSStringsInScripts = /[&><\u2028\u2029]/g;
        function escapeJSObjectForInstructionScripts(input) {
          var escaped = JSON.stringify(input);
          return escaped.replace(regexForJSStringsInScripts, function(match) {
            switch (match) {
              case "&":
                return "\\u0026";
              case ">":
                return "\\u003e";
              case "<":
                return "\\u003c";
              case "\u2028":
                return "\\u2028";
              case "\u2029":
                return "\\u2029";
              default: {
                throw new Error("escapeJSObjectForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
              }
            }
          });
        }
        var lateStyleTagResourceOpen1 = stringToPrecomputedChunk('<style media="not all" data-precedence="');
        var lateStyleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var lateStyleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var lateStyleTagTemplateClose = stringToPrecomputedChunk("</style>");
        var currentlyRenderingBoundaryHasStylesToHoist = false;
        var destinationHasCapacity = true;
        function flushStyleTagsLateForBoundary(styleQueue) {
          var rules = styleQueue.rules;
          var hrefs = styleQueue.hrefs;
          {
            if (rules.length > 0 && hrefs.length === 0) {
              error("React expected to have at least one href for an a hoistable style but found none. This is a bug in React.");
            }
          }
          var i = 0;
          if (hrefs.length) {
            writeChunk(this, lateStyleTagResourceOpen1);
            writeChunk(this, styleQueue.precedence);
            writeChunk(this, lateStyleTagResourceOpen2);
            for (; i < hrefs.length - 1; i++) {
              writeChunk(this, hrefs[i]);
              writeChunk(this, spaceSeparator);
            }
            writeChunk(this, hrefs[i]);
            writeChunk(this, lateStyleTagResourceOpen3);
            for (i = 0; i < rules.length; i++) {
              writeChunk(this, rules[i]);
            }
            destinationHasCapacity = writeChunkAndReturn(this, lateStyleTagTemplateClose);
            currentlyRenderingBoundaryHasStylesToHoist = true;
            rules.length = 0;
            hrefs.length = 0;
          }
        }
        function hasStylesToHoist(stylesheet) {
          if (stylesheet.state !== PREAMBLE) {
            currentlyRenderingBoundaryHasStylesToHoist = true;
            return true;
          }
          return false;
        }
        function writeHoistablesForBoundary(destination, hoistableState, renderState) {
          currentlyRenderingBoundaryHasStylesToHoist = false;
          destinationHasCapacity = true;
          hoistableState.styles.forEach(flushStyleTagsLateForBoundary, destination);
          hoistableState.stylesheets.forEach(hasStylesToHoist);
          if (currentlyRenderingBoundaryHasStylesToHoist) {
            renderState.stylesToHoist = true;
          }
          return destinationHasCapacity;
        }
        function flushResource(resource) {
          for (var i = 0; i < resource.length; i++) {
            writeChunk(this, resource[i]);
          }
          resource.length = 0;
        }
        var stylesheetFlushingQueue = [];
        function flushStyleInPreamble(stylesheet, key, map) {
          pushLinkImpl(stylesheetFlushingQueue, stylesheet.props);
          for (var i = 0; i < stylesheetFlushingQueue.length; i++) {
            writeChunk(this, stylesheetFlushingQueue[i]);
          }
          stylesheetFlushingQueue.length = 0;
          stylesheet.state = PREAMBLE;
        }
        var styleTagResourceOpen1 = stringToPrecomputedChunk('<style data-precedence="');
        var styleTagResourceOpen2 = stringToPrecomputedChunk('" data-href="');
        var spaceSeparator = stringToPrecomputedChunk(" ");
        var styleTagResourceOpen3 = stringToPrecomputedChunk('">');
        var styleTagResourceClose = stringToPrecomputedChunk("</style>");
        function flushStylesInPreamble(styleQueue, precedence) {
          var hasStylesheets = styleQueue.sheets.size > 0;
          styleQueue.sheets.forEach(flushStyleInPreamble, this);
          styleQueue.sheets.clear();
          var rules = styleQueue.rules;
          var hrefs = styleQueue.hrefs;
          if (!hasStylesheets || hrefs.length) {
            writeChunk(this, styleTagResourceOpen1);
            writeChunk(this, styleQueue.precedence);
            var i = 0;
            if (hrefs.length) {
              writeChunk(this, styleTagResourceOpen2);
              for (; i < hrefs.length - 1; i++) {
                writeChunk(this, hrefs[i]);
                writeChunk(this, spaceSeparator);
              }
              writeChunk(this, hrefs[i]);
            }
            writeChunk(this, styleTagResourceOpen3);
            for (i = 0; i < rules.length; i++) {
              writeChunk(this, rules[i]);
            }
            writeChunk(this, styleTagResourceClose);
            rules.length = 0;
            hrefs.length = 0;
          }
        }
        function preloadLateStyle(stylesheet) {
          if (stylesheet.state === PENDING$1) {
            stylesheet.state = PRELOADED;
            var preloadProps = preloadAsStylePropsFromProps(stylesheet.props.href, stylesheet.props);
            pushLinkImpl(stylesheetFlushingQueue, preloadProps);
            for (var i = 0; i < stylesheetFlushingQueue.length; i++) {
              writeChunk(this, stylesheetFlushingQueue[i]);
            }
            stylesheetFlushingQueue.length = 0;
          }
        }
        function preloadLateStyles(styleQueue) {
          styleQueue.sheets.forEach(preloadLateStyle, this);
          styleQueue.sheets.clear();
        }
        function writePreamble(destination, resumableState, renderState, willFlushAllSegments) {
          if (!willFlushAllSegments && renderState.externalRuntimeScript) {
            var _renderState$external = renderState.externalRuntimeScript, src = _renderState$external.src, chunks = _renderState$external.chunks;
            internalPreinitScript(resumableState, renderState, src, chunks);
          }
          var htmlChunks = renderState.htmlChunks;
          var headChunks = renderState.headChunks;
          var i = 0;
          if (htmlChunks) {
            for (i = 0; i < htmlChunks.length; i++) {
              writeChunk(destination, htmlChunks[i]);
            }
            if (headChunks) {
              for (i = 0; i < headChunks.length; i++) {
                writeChunk(destination, headChunks[i]);
              }
            } else {
              writeChunk(destination, startChunkForTag("head"));
              writeChunk(destination, endOfStartTag);
            }
          } else if (headChunks) {
            for (i = 0; i < headChunks.length; i++) {
              writeChunk(destination, headChunks[i]);
            }
          }
          var charsetChunks = renderState.charsetChunks;
          for (i = 0; i < charsetChunks.length; i++) {
            writeChunk(destination, charsetChunks[i]);
          }
          charsetChunks.length = 0;
          renderState.preconnects.forEach(flushResource, destination);
          renderState.preconnects.clear();
          var viewportChunks = renderState.viewportChunks;
          for (i = 0; i < viewportChunks.length; i++) {
            writeChunk(destination, viewportChunks[i]);
          }
          viewportChunks.length = 0;
          renderState.fontPreloads.forEach(flushResource, destination);
          renderState.fontPreloads.clear();
          renderState.highImagePreloads.forEach(flushResource, destination);
          renderState.highImagePreloads.clear();
          renderState.styles.forEach(flushStylesInPreamble, destination);
          var importMapChunks = renderState.importMapChunks;
          for (i = 0; i < importMapChunks.length; i++) {
            writeChunk(destination, importMapChunks[i]);
          }
          importMapChunks.length = 0;
          renderState.bootstrapScripts.forEach(flushResource, destination);
          renderState.scripts.forEach(flushResource, destination);
          renderState.scripts.clear();
          renderState.bulkPreloads.forEach(flushResource, destination);
          renderState.bulkPreloads.clear();
          var hoistableChunks = renderState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
          if (htmlChunks && headChunks === null) {
            writeChunk(destination, endChunkForTag("head"));
          }
        }
        function writeHoistables(destination, resumableState, renderState) {
          var i = 0;
          var viewportChunks = renderState.viewportChunks;
          for (i = 0; i < viewportChunks.length; i++) {
            writeChunk(destination, viewportChunks[i]);
          }
          viewportChunks.length = 0;
          renderState.preconnects.forEach(flushResource, destination);
          renderState.preconnects.clear();
          renderState.fontPreloads.forEach(flushResource, destination);
          renderState.fontPreloads.clear();
          renderState.highImagePreloads.forEach(flushResource, destination);
          renderState.highImagePreloads.clear();
          renderState.styles.forEach(preloadLateStyles, destination);
          renderState.scripts.forEach(flushResource, destination);
          renderState.scripts.clear();
          renderState.bulkPreloads.forEach(flushResource, destination);
          renderState.bulkPreloads.clear();
          var hoistableChunks = renderState.hoistableChunks;
          for (i = 0; i < hoistableChunks.length; i++) {
            writeChunk(destination, hoistableChunks[i]);
          }
          hoistableChunks.length = 0;
        }
        function writePostamble(destination, resumableState) {
          if (resumableState.hasBody) {
            writeChunk(destination, endChunkForTag("body"));
          }
          if (resumableState.hasHtml) {
            writeChunk(destination, endChunkForTag("html"));
          }
        }
        var arrayFirstOpenBracket = stringToPrecomputedChunk("[");
        var arraySubsequentOpenBracket = stringToPrecomputedChunk(",[");
        var arrayInterstitial = stringToPrecomputedChunk(",");
        var arrayCloseBracket = stringToPrecomputedChunk("]");
        function writeStyleResourceDependenciesInJS(destination, hoistableState) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          hoistableState.stylesheets.forEach(function(resource) {
            if (resource.state === PREAMBLE)
              ;
            else if (resource.state === LATE) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInJS(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInJS(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state = LATE;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInJS(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
        }
        function writeStyleResourceDependencyInJS(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedHref)));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(coercedPrecedence)));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInJS(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInJS(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
            case "ref":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeName)));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeJSObjectForInstructionScripts(attributeValue)));
        }
        function writeStyleResourceDependenciesInAttr(destination, hoistableState) {
          writeChunk(destination, arrayFirstOpenBracket);
          var nextArrayOpenBrackChunk = arrayFirstOpenBracket;
          hoistableState.stylesheets.forEach(function(resource) {
            if (resource.state === PREAMBLE)
              ;
            else if (resource.state === LATE) {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyHrefOnlyInAttr(destination, resource.props.href);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
            } else {
              writeChunk(destination, nextArrayOpenBrackChunk);
              writeStyleResourceDependencyInAttr(destination, resource.props.href, resource.props["data-precedence"], resource.props);
              writeChunk(destination, arrayCloseBracket);
              nextArrayOpenBrackChunk = arraySubsequentOpenBracket;
              resource.state = LATE;
            }
          });
          writeChunk(destination, arrayCloseBracket);
        }
        function writeStyleResourceDependencyHrefOnlyInAttr(destination, href) {
          {
            checkAttributeStringCoercion(href, "href");
          }
          var coercedHref = "" + href;
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
        }
        function writeStyleResourceDependencyInAttr(destination, href, precedence, props) {
          var coercedHref = sanitizeURL("" + href);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedHref))));
          {
            checkAttributeStringCoercion(precedence, "precedence");
          }
          var coercedPrecedence = "" + precedence;
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(coercedPrecedence))));
          for (var propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "href":
                case "rel":
                case "precedence":
                case "data-precedence": {
                  break;
                }
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("link is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  writeStyleResourceAttributeInAttr(destination, propKey, propValue);
                  break;
              }
            }
          }
          return null;
        }
        function writeStyleResourceAttributeInAttr(destination, name, value) {
          var attributeName = name.toLowerCase();
          var attributeValue;
          switch (typeof value) {
            case "function":
            case "symbol":
              return;
          }
          switch (name) {
            case "innerHTML":
            case "dangerouslySetInnerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
            case "style":
            case "ref":
              return;
            case "className": {
              attributeName = "class";
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            case "hidden": {
              if (value === false) {
                return;
              }
              attributeValue = "";
              break;
            }
            case "src":
            case "href": {
              value = sanitizeURL(value);
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
              break;
            }
            default: {
              if (
                // unrecognized event handlers are not SSR'd and we (apparently)
                // use on* as hueristic for these handler props
                name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")
              ) {
                return;
              }
              if (!isAttributeNameSafe(name)) {
                return;
              }
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
          }
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeName))));
          writeChunk(destination, arrayInterstitial);
          writeChunk(destination, stringToChunk(escapeTextForBrowser(JSON.stringify(attributeValue))));
        }
        var PENDING$1 = 0;
        var PRELOADED = 1;
        var PREAMBLE = 2;
        var LATE = 3;
        function createHoistableState() {
          return {
            styles: /* @__PURE__ */ new Set(),
            stylesheets: /* @__PURE__ */ new Set()
          };
        }
        function getResourceKey(href) {
          return href;
        }
        function getImageResourceKey(href, imageSrcSet, imageSizes) {
          if (imageSrcSet) {
            return imageSrcSet + "\n" + (imageSizes || "");
          }
          return href;
        }
        function prefetchDNS(href) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.D(
              /* prefetchDNS */
              href
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (typeof href === "string" && href) {
            var key = getResourceKey(href);
            if (!resumableState.dnsResources.hasOwnProperty(key)) {
              resumableState.dnsResources[key] = EXISTS;
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // Compute the header since we might be able to fit it in the max length
              (header = getPrefetchDNSAsHeader(href), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.dns[key] = EXISTS;
                if (headers.preconnects) {
                  headers.preconnects += ", ";
                }
                headers.preconnects += header;
              } else {
                var resource = [];
                pushLinkImpl(resource, {
                  href,
                  rel: "dns-prefetch"
                });
                renderState.preconnects.add(resource);
              }
            }
            flushResources(request);
          }
        }
        function preconnect(href, crossOrigin) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.C(
              /* preconnect */
              href,
              crossOrigin
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (typeof href === "string" && href) {
            var bucket = crossOrigin === "use-credentials" ? "credentials" : typeof crossOrigin === "string" ? "anonymous" : "default";
            var key = getResourceKey(href);
            if (!resumableState.connectResources[bucket].hasOwnProperty(key)) {
              resumableState.connectResources[bucket][key] = EXISTS;
              var headers = renderState.headers;
              var header;
              if (headers && headers.remainingCapacity > 0 && // Compute the header since we might be able to fit it in the max length
              (header = getPreconnectAsHeader(href, crossOrigin), // We always consume the header length since once we find one header that doesn't fit
              // we assume all the rest won't as well. This is to avoid getting into a situation
              // where we have a very small remaining capacity but no headers will ever fit and we end
              // up constantly trying to see if the next resource might make it. In the future we can
              // make this behavior different between render and prerender since in the latter case
              // we are less sensitive to the current requests runtime per and more sensitive to maximizing
              // headers.
              (headers.remainingCapacity -= header.length) >= 2)) {
                renderState.resets.connect[bucket][key] = EXISTS;
                if (headers.preconnects) {
                  headers.preconnects += ", ";
                }
                headers.preconnects += header;
              } else {
                var resource = [];
                pushLinkImpl(resource, {
                  rel: "preconnect",
                  href,
                  crossOrigin
                });
                renderState.preconnects.add(resource);
              }
            }
            flushResources(request);
          }
        }
        function preload(href, as, options) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.L(
              /* preload */
              href,
              as,
              options
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (as && href) {
            switch (as) {
              case "image": {
                var imageSrcSet, imageSizes, fetchPriority;
                if (options) {
                  imageSrcSet = options.imageSrcSet;
                  imageSizes = options.imageSizes;
                  fetchPriority = options.fetchPriority;
                }
                var key = getImageResourceKey(href, imageSrcSet, imageSizes);
                if (resumableState.imageResources.hasOwnProperty(key)) {
                  return;
                }
                resumableState.imageResources[key] = PRELOAD_NO_CREDS;
                var headers = renderState.headers;
                var header;
                if (headers && headers.remainingCapacity > 0 && fetchPriority === "high" && // Compute the header since we might be able to fit it in the max length
                (header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit
                // we assume all the rest won't as well. This is to avoid getting into a situation
                // where we have a very small remaining capacity but no headers will ever fit and we end
                // up constantly trying to see if the next resource might make it. In the future we can
                // make this behavior different between render and prerender since in the latter case
                // we are less sensitive to the current requests runtime per and more sensitive to maximizing
                // headers.
                (headers.remainingCapacity -= header.length) >= 2)) {
                  renderState.resets.image[key] = PRELOAD_NO_CREDS;
                  if (headers.highImagePreloads) {
                    headers.highImagePreloads += ", ";
                  }
                  headers.highImagePreloads += header;
                } else {
                  var resource = [];
                  pushLinkImpl(resource, assign({
                    rel: "preload",
                    // There is a bug in Safari where imageSrcSet is not respected on preload links
                    // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.
                    // This harms older browers that do not support imageSrcSet by making their preloads not work
                    // but this population is shrinking fast and is already small so we accept this tradeoff.
                    href: imageSrcSet ? void 0 : href,
                    as
                  }, options));
                  if (fetchPriority === "high") {
                    renderState.highImagePreloads.add(resource);
                  } else {
                    renderState.bulkPreloads.add(resource);
                    renderState.preloads.images.set(key, resource);
                  }
                }
                break;
              }
              case "style": {
                var _key = getResourceKey(href);
                if (resumableState.styleResources.hasOwnProperty(_key)) {
                  return;
                }
                var _resource2 = [];
                pushLinkImpl(_resource2, assign({
                  rel: "preload",
                  href,
                  as
                }, options));
                resumableState.styleResources[_key] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                renderState.preloads.stylesheets.set(_key, _resource2);
                renderState.bulkPreloads.add(_resource2);
                break;
              }
              case "script": {
                var _key2 = getResourceKey(href);
                if (resumableState.scriptResources.hasOwnProperty(_key2)) {
                  return;
                }
                var _resource3 = [];
                renderState.preloads.scripts.set(_key2, _resource3);
                renderState.bulkPreloads.add(_resource3);
                pushLinkImpl(_resource3, assign({
                  rel: "preload",
                  href,
                  as
                }, options));
                resumableState.scriptResources[_key2] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                break;
              }
              default: {
                var _key3 = getResourceKey(href);
                var hasAsType = resumableState.unknownResources.hasOwnProperty(as);
                var resources;
                if (hasAsType) {
                  resources = resumableState.unknownResources[as];
                  if (resources.hasOwnProperty(_key3)) {
                    return;
                  }
                } else {
                  resources = {};
                  resumableState.unknownResources[as] = resources;
                }
                resources[_key3] = PRELOAD_NO_CREDS;
                var _headers = renderState.headers;
                var _header;
                if (_headers && _headers.remainingCapacity > 0 && as === "font" && // We compute the header here because we might be able to fit it in the max length
                (_header = getPreloadAsHeader(href, as, options), // We always consume the header length since once we find one header that doesn't fit
                // we assume all the rest won't as well. This is to avoid getting into a situation
                // where we have a very small remaining capacity but no headers will ever fit and we end
                // up constantly trying to see if the next resource might make it. In the future we can
                // make this behavior different between render and prerender since in the latter case
                // we are less sensitive to the current requests runtime per and more sensitive to maximizing
                // headers.
                (_headers.remainingCapacity -= _header.length) >= 2)) {
                  renderState.resets.font[_key3] = PRELOAD_NO_CREDS;
                  if (_headers.fontPreloads) {
                    _headers.fontPreloads += ", ";
                  }
                  _headers.fontPreloads += _header;
                } else {
                  var _resource4 = [];
                  var props = assign({
                    rel: "preload",
                    href,
                    as
                  }, options);
                  pushLinkImpl(_resource4, props);
                  switch (as) {
                    case "font":
                      renderState.fontPreloads.add(_resource4);
                      break;
                    default:
                      renderState.bulkPreloads.add(_resource4);
                  }
                }
              }
            }
            flushResources(request);
          }
        }
        function preloadModule(href, options) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.m(
              /* preloadModule */
              href,
              options
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (href) {
            var key = getResourceKey(href);
            var as = options && typeof options.as === "string" ? options.as : "script";
            var resource;
            switch (as) {
              case "script": {
                if (resumableState.moduleScriptResources.hasOwnProperty(key)) {
                  return;
                }
                resource = [];
                resumableState.moduleScriptResources[key] = options && (typeof options.crossOrigin === "string" || typeof options.integrity === "string") ? [options.crossOrigin, options.integrity] : PRELOAD_NO_CREDS;
                renderState.preloads.moduleScripts.set(key, resource);
                break;
              }
              default: {
                var hasAsType = resumableState.moduleUnknownResources.hasOwnProperty(as);
                var resources;
                if (hasAsType) {
                  resources = resumableState.unknownResources[as];
                  if (resources.hasOwnProperty(key)) {
                    return;
                  }
                } else {
                  resources = {};
                  resumableState.moduleUnknownResources[as] = resources;
                }
                resource = [];
                resources[key] = PRELOAD_NO_CREDS;
              }
            }
            pushLinkImpl(resource, assign({
              rel: "modulepreload",
              href
            }, options));
            renderState.bulkPreloads.add(resource);
            flushResources(request);
          }
        }
        function preinitStyle(href, precedence, options) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.S(
              /* preinitStyle */
              href,
              precedence,
              options
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (href) {
            precedence = precedence || "default";
            var key = getResourceKey(href);
            var styleQueue = renderState.styles.get(precedence);
            var hasKey = resumableState.styleResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.styleResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.styleResources[key] = EXISTS;
              if (!styleQueue) {
                styleQueue = {
                  precedence: stringToChunk(escapeTextForBrowser(precedence)),
                  rules: [],
                  hrefs: [],
                  sheets: /* @__PURE__ */ new Map()
                };
                renderState.styles.set(precedence, styleQueue);
              }
              var resource = {
                state: PENDING$1,
                props: assign({
                  rel: "stylesheet",
                  href,
                  "data-precedence": precedence
                }, options)
              };
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(resource.props, preloadState);
                }
                var preloadResource = renderState.preloads.stylesheets.get(key);
                if (preloadResource && preloadResource.length > 0) {
                  preloadResource.length = 0;
                } else {
                  resource.state = PRELOADED;
                }
              }
              styleQueue.sheets.set(key, resource);
              flushResources(request);
            }
          }
        }
        function preinitScript(src, options) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.X(
              /* preinitScript */
              src,
              options
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (src) {
            var key = getResourceKey(src);
            var hasKey = resumableState.scriptResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.scriptResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.scriptResources[key] = EXISTS;
              var props = assign({
                src,
                async: true
              }, options);
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(props, preloadState);
                }
                var preloadResource = renderState.preloads.scripts.get(key);
                if (preloadResource) {
                  preloadResource.length = 0;
                }
              }
              var resource = [];
              renderState.scripts.add(resource);
              pushScriptImpl(resource, props);
              flushResources(request);
            }
            return;
          }
        }
        function preinitModuleScript(src, options) {
          var request = resolveRequest();
          if (!request) {
            previousDispatcher.M(
              /* preinitModuleScript */
              src,
              options
            );
            return;
          }
          var resumableState = getResumableState(request);
          var renderState = getRenderState(request);
          if (src) {
            var key = getResourceKey(src);
            var hasKey = resumableState.moduleScriptResources.hasOwnProperty(key);
            var resourceState = hasKey ? resumableState.moduleScriptResources[key] : void 0;
            if (resourceState !== EXISTS) {
              resumableState.moduleScriptResources[key] = EXISTS;
              var props = assign({
                src,
                type: "module",
                async: true
              }, options);
              if (resourceState) {
                var preloadState = resourceState;
                if (preloadState.length === 2) {
                  adoptPreloadCredentials(props, preloadState);
                }
                var preloadResource = renderState.preloads.moduleScripts.get(key);
                if (preloadResource) {
                  preloadResource.length = 0;
                }
              }
              var resource = [];
              renderState.scripts.add(resource);
              pushScriptImpl(resource, props);
              flushResources(request);
            }
            return;
          }
        }
        function preloadBootstrapScriptOrModule(resumableState, renderState, href, props) {
          var key = getResourceKey(href);
          {
            if (resumableState.scriptResources.hasOwnProperty(key) || resumableState.moduleScriptResources.hasOwnProperty(key)) {
              error('Internal React Error: React expected bootstrap script or module with src "%s" to not have been preloaded already. please file an issue', href);
            }
          }
          resumableState.scriptResources[key] = EXISTS;
          resumableState.moduleScriptResources[key] = EXISTS;
          var resource = [];
          pushLinkImpl(resource, props);
          renderState.bootstrapScripts.add(resource);
        }
        function internalPreinitScript(resumableState, renderState, src, chunks) {
          var key = getResourceKey(src);
          if (!resumableState.scriptResources.hasOwnProperty(key)) {
            var resource = chunks;
            resumableState.scriptResources[key] = EXISTS;
            renderState.scripts.add(resource);
          }
          return;
        }
        function preloadAsStylePropsFromProps(href, props) {
          return {
            rel: "preload",
            as: "style",
            href,
            crossOrigin: props.crossOrigin,
            fetchPriority: props.fetchPriority,
            integrity: props.integrity,
            media: props.media,
            hrefLang: props.hrefLang,
            referrerPolicy: props.referrerPolicy
          };
        }
        function stylesheetPropsFromRawProps(rawProps) {
          return assign({}, rawProps, {
            "data-precedence": rawProps.precedence,
            precedence: null
          });
        }
        function adoptPreloadCredentials(target, preloadState) {
          if (target.crossOrigin == null)
            target.crossOrigin = preloadState[0];
          if (target.integrity == null)
            target.integrity = preloadState[1];
        }
        function getPrefetchDNSAsHeader(href) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          return "<" + escapedHref + ">; rel=dns-prefetch";
        }
        function getPreconnectAsHeader(href, crossOrigin) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          var value = "<" + escapedHref + ">; rel=preconnect";
          if (typeof crossOrigin === "string") {
            var escapedCrossOrigin = escapeStringForLinkHeaderQuotedParamValueContext(crossOrigin, "crossOrigin");
            value += '; crossorigin="' + escapedCrossOrigin + '"';
          }
          return value;
        }
        function getPreloadAsHeader(href, as, params) {
          var escapedHref = escapeHrefForLinkHeaderURLContext(href);
          var escapedAs = escapeStringForLinkHeaderQuotedParamValueContext(as, "as");
          var value = "<" + escapedHref + '>; rel=preload; as="' + escapedAs + '"';
          for (var paramName in params) {
            if (hasOwnProperty.call(params, paramName)) {
              var paramValue = params[paramName];
              if (typeof paramValue === "string") {
                value += "; " + paramName.toLowerCase() + '="' + escapeStringForLinkHeaderQuotedParamValueContext(paramValue, paramName) + '"';
              }
            }
          }
          return value;
        }
        function getStylesheetPreloadAsHeader(stylesheet) {
          var props = stylesheet.props;
          var preloadOptions = {
            crossOrigin: props.crossOrigin,
            integrity: props.integrity,
            nonce: props.nonce,
            type: props.type,
            fetchPriority: props.fetchPriority,
            referrerPolicy: props.referrerPolicy,
            media: props.media
          };
          return getPreloadAsHeader(props.href, "style", preloadOptions);
        }
        var regexForHrefInLinkHeaderURLContext = /[<>\r\n]/g;
        function escapeHrefForLinkHeaderURLContext(hrefInput) {
          {
            checkAttributeStringCoercion(hrefInput, "href");
          }
          var coercedHref = "" + hrefInput;
          return coercedHref.replace(regexForHrefInLinkHeaderURLContext, escapeHrefForLinkHeaderURLContextReplacer);
        }
        function escapeHrefForLinkHeaderURLContextReplacer(match) {
          switch (match) {
            case "<":
              return "%3C";
            case ">":
              return "%3E";
            case "\n":
              return "%0A";
            case "\r":
              return "%0D";
            default: {
              throw new Error("escapeLinkHrefForHeaderContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
            }
          }
        }
        var regexForLinkHeaderQuotedParamValueContext = /["';,\r\n]/g;
        function escapeStringForLinkHeaderQuotedParamValueContext(value, name) {
          {
            checkOptionStringCoercion(value, name);
          }
          var coerced = "" + value;
          return coerced.replace(regexForLinkHeaderQuotedParamValueContext, escapeStringForLinkHeaderQuotedParamValueContextReplacer);
        }
        function escapeStringForLinkHeaderQuotedParamValueContextReplacer(match) {
          switch (match) {
            case '"':
              return "%22";
            case "'":
              return "%27";
            case ";":
              return "%3B";
            case ",":
              return "%2C";
            case "\n":
              return "%0A";
            case "\r":
              return "%0D";
            default: {
              throw new Error("escapeStringForLinkHeaderQuotedParamValueContextReplacer encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
            }
          }
        }
        function hoistStyleQueueDependency(styleQueue) {
          this.styles.add(styleQueue);
        }
        function hoistStylesheetDependency(stylesheet) {
          this.stylesheets.add(stylesheet);
        }
        function hoistHoistables(parentState, childState) {
          childState.styles.forEach(hoistStyleQueueDependency, parentState);
          childState.stylesheets.forEach(hoistStylesheetDependency, parentState);
        }
        function emitEarlyPreloads(renderState, resumableState, shellComplete) {
          var onHeaders = renderState.onHeaders;
          if (onHeaders) {
            var headers = renderState.headers;
            if (headers) {
              renderState.headers = null;
              var linkHeader = headers.preconnects;
              if (headers.fontPreloads) {
                if (linkHeader) {
                  linkHeader += ", ";
                }
                linkHeader += headers.fontPreloads;
              }
              if (headers.highImagePreloads) {
                if (linkHeader) {
                  linkHeader += ", ";
                }
                linkHeader += headers.highImagePreloads;
              }
              if (!shellComplete) {
                var queueIter = renderState.styles.values();
                outer:
                  for (var queueStep = queueIter.next(); headers.remainingCapacity > 0 && !queueStep.done; queueStep = queueIter.next()) {
                    var sheets = queueStep.value.sheets;
                    var sheetIter = sheets.values();
                    for (var sheetStep = sheetIter.next(); headers.remainingCapacity > 0 && !sheetStep.done; sheetStep = sheetIter.next()) {
                      var sheet = sheetStep.value;
                      var props = sheet.props;
                      var key = getResourceKey(props.href);
                      var header = getStylesheetPreloadAsHeader(sheet);
                      if ((headers.remainingCapacity -= header.length) >= 2) {
                        renderState.resets.style[key] = PRELOAD_NO_CREDS;
                        if (linkHeader) {
                          linkHeader += ", ";
                        }
                        linkHeader += header;
                        renderState.resets.style[key] = typeof props.crossOrigin === "string" || typeof props.integrity === "string" ? [props.crossOrigin, props.integrity] : PRELOAD_NO_CREDS;
                      } else {
                        break outer;
                      }
                    }
                  }
              }
              if (linkHeader) {
                onHeaders({
                  Link: linkHeader
                });
              } else {
                onHeaders({});
              }
              return;
            }
          }
        }
        var NotPendingTransition = NotPending;
        var requestStorage = new async_hooks.AsyncLocalStorage();
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          if (typeof type === "function") {
            if (type.$$typeof === REACT_CLIENT_REFERENCE) {
              return null;
            }
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE: {
                return null;
              }
              case REACT_CONTEXT_TYPE:
                var context = type;
                {
                  return getContextName(context) + ".Provider";
                }
              case REACT_CONSUMER_TYPE: {
                var consumer = type;
                return getContextName(consumer._context) + ".Consumer";
              }
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next)
            ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue;
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var value = prevSnapshot.parentValue;
            prevSnapshot.context._currentValue = value;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext$1(context) {
          var value = context._currentValue;
          return value;
        }
        function get(key) {
          return key._reactInternals;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutInvalidateContextType;
        var didWarnOnInvalidCallback;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
        }
        function warnOnInvalidCallback(callback) {
          {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = String(callback);
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
        }
        function warnOnUndefinedDerivedState(type, partialState) {
          {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          }
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error("Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          // $FlowFixMe[missing-local-annot]
          enqueueSetState: function(inst, payload, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback);
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var internals = get(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback !== void 0 && callback !== null) {
                warnOnInvalidCallback(callback);
              }
            }
          },
          // $FlowFixMe[missing-local-annot]
          enqueueForceUpdate: function(inst, callback) {
            var internals = get(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback !== void 0 && callback !== null) {
                  warnOnInvalidCallback(callback);
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_CONSUMER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext$1(contextType);
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("No `render` method found on the %s instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("No `render` method found on the %s instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (ctor.childContextTypes) {
                error("%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead.", name);
              }
              if (ctor.contextTypes) {
                error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var state = instance.state;
            if (state && (typeof state !== "object" || isArray(state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn(
                    // keep this warning in sync with ReactStrictModeWarning.js
                    "componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s",
                    componentName
                  );
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {
                var partial = oldQueue[i];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign({}, nextState, partialState);
                  } else {
                    assign(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext$1(contextType);
          } else {
            instance.context = emptyContextObject;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id,
              overflow
            };
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var SuspenseException = new Error("Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`");
        function createThenableState() {
          return [];
        }
        function noop$2() {
        }
        function trackUsedThenable(thenableState2, thenable, index) {
          var previous = thenableState2[index];
          if (previous === void 0) {
            thenableState2.push(thenable);
          } else {
            if (previous !== thenable) {
              thenable.then(noop$2, noop$2);
              thenable = previous;
            }
          }
          switch (thenable.status) {
            case "fulfilled": {
              var fulfilledValue = thenable.value;
              return fulfilledValue;
            }
            case "rejected": {
              var rejectedError = thenable.reason;
              throw rejectedError;
            }
            default: {
              if (typeof thenable.status === "string") {
                thenable.then(noop$2, noop$2);
              } else {
                var pendingThenable = thenable;
                pendingThenable.status = "pending";
                pendingThenable.then(function(fulfilledValue2) {
                  if (thenable.status === "pending") {
                    var fulfilledThenable2 = thenable;
                    fulfilledThenable2.status = "fulfilled";
                    fulfilledThenable2.value = fulfilledValue2;
                  }
                }, function(error2) {
                  if (thenable.status === "pending") {
                    var rejectedThenable2 = thenable;
                    rejectedThenable2.status = "rejected";
                    rejectedThenable2.reason = error2;
                  }
                });
              }
              switch (thenable.status) {
                case "fulfilled": {
                  var fulfilledThenable = thenable;
                  return fulfilledThenable.value;
                }
                case "rejected": {
                  var rejectedThenable = thenable;
                  throw rejectedThenable.reason;
                }
              }
              suspendedThenable = thenable;
              throw SuspenseException;
            }
          }
        }
        function readPreviousThenable(thenableState2, index) {
          var previous = thenableState2[index];
          if (previous === void 0) {
            return void 0;
          } else {
            return previous.value;
          }
        }
        var suspendedThenable = null;
        function getSuspendedThenable() {
          if (suspendedThenable === null) {
            throw new Error("Expected a suspended thenable. This is a bug in React. Please file an issue.");
          }
          var thenable = suspendedThenable;
          suspendedThenable = null;
          return thenable;
        }
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = (
          // $FlowFixMe[method-unbinding]
          typeof Object.is === "function" ? Object.is : is
        );
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var currentlyRenderingRequest = null;
        var currentlyRenderingKeyPath = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var actionStateCounter = 0;
        var actionStateMatchingIndex = -1;
        var thenableIndexCounter = 0;
        var thenableState = null;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          currentlyRenderingRequest = request;
          currentlyRenderingKeyPath = keyPath;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
          actionStateCounter = 0;
          actionStateMatchingIndex = -1;
          thenableIndexCounter = 0;
          thenableState = prevThenableState;
        }
        function prepareToUseThenableState(prevThenableState) {
          thenableIndexCounter = 0;
          thenableState = prevThenableState;
        }
        function finishHooks(Component, props, children, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            actionStateCounter = 0;
            actionStateMatchingIndex = -1;
            thenableIndexCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children = Component(props, refOrContext);
          }
          resetHooksState();
          return children;
        }
        function getThenableStateAfterSuspending() {
          var state = thenableState;
          thenableState = null;
          return state;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function getActionStateCount() {
          return actionStateCounter;
        }
        function getActionStateMatchingIndex() {
          return actionStateMatchingIndex;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          currentlyRenderingRequest = null;
          currentlyRenderingKeyPath = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext(context) {
          {
            if (isInHookUserCodeInDev) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext$1(context);
        }
        function useContext(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext$1(context);
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function useState2(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer(
            basicStateReducer,
            // useReducer has a special case to support lazy useState initializers
            initialState
          );
        }
        function useReducer(reducer, initialArg, init) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init !== void 0 ? init(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function dispatchAction(componentIdentity, queue, action) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback(callback, deps) {
          return useMemo(function() {
            return callback;
          }, deps);
        }
        function throwOnUseEffectEventCall() {
          throw new Error("A function wrapped in useEffectEvent can't be called during rendering.");
        }
        function useEffectEvent(callback) {
          return throwOnUseEffectEventCall;
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value, initialValue) {
          resolveCurrentlyRenderingComponent();
          {
            return initialValue !== void 0 ? initialValue : value;
          }
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useHostTransitionStatus() {
          resolveCurrentlyRenderingComponent();
          return NotPendingTransition;
        }
        function unsupportedSetOptimisticState() {
          throw new Error("Cannot update optimistic state while rendering.");
        }
        function useOptimistic(passthrough, reducer) {
          resolveCurrentlyRenderingComponent();
          return [passthrough, unsupportedSetOptimisticState];
        }
        function createPostbackActionStateKey(permalink, componentKeyPath, hookIndex) {
          if (permalink !== void 0) {
            return "p" + permalink;
          } else {
            var keyPath = [componentKeyPath, null, hookIndex];
            var keyPathHash = createFastHash(JSON.stringify(keyPath));
            return "k" + keyPathHash;
          }
        }
        function useActionState(action, initialState, permalink) {
          resolveCurrentlyRenderingComponent();
          var actionStateHookIndex = actionStateCounter++;
          var request = currentlyRenderingRequest;
          var formAction = action.$$FORM_ACTION;
          if (typeof formAction === "function") {
            var nextPostbackStateKey = null;
            var state = initialState;
            var componentKeyPath = currentlyRenderingKeyPath;
            var postbackActionState = getFormState(request);
            var isSignatureEqual = action.$$IS_SIGNATURE_EQUAL;
            if (postbackActionState !== null && typeof isSignatureEqual === "function") {
              var postbackKey = postbackActionState[1];
              var postbackReferenceId = postbackActionState[2];
              var postbackBoundArity = postbackActionState[3];
              if (isSignatureEqual.call(action, postbackReferenceId, postbackBoundArity)) {
                nextPostbackStateKey = createPostbackActionStateKey(permalink, componentKeyPath, actionStateHookIndex);
                if (postbackKey === nextPostbackStateKey) {
                  actionStateMatchingIndex = actionStateHookIndex;
                  state = postbackActionState[0];
                }
              }
            }
            var boundAction = action.bind(null, state);
            var dispatch = function(payload) {
              boundAction(payload);
            };
            if (typeof boundAction.$$FORM_ACTION === "function") {
              dispatch.$$FORM_ACTION = function(prefix2) {
                var metadata = boundAction.$$FORM_ACTION(prefix2);
                if (permalink !== void 0) {
                  {
                    checkAttributeStringCoercion(permalink, "target");
                  }
                  permalink += "";
                  metadata.action = permalink;
                }
                var formData = metadata.data;
                if (formData) {
                  if (nextPostbackStateKey === null) {
                    nextPostbackStateKey = createPostbackActionStateKey(permalink, componentKeyPath, actionStateHookIndex);
                  }
                  formData.append("$ACTION_KEY", nextPostbackStateKey);
                }
                return metadata;
              };
            }
            return [state, dispatch, false];
          } else {
            var _boundAction = action.bind(null, initialState);
            var _dispatch2 = function(payload) {
              _boundAction(payload);
            };
            return [initialState, _dispatch2, false];
          }
        }
        function useId() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var resumableState = currentResumableState;
          if (resumableState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(resumableState, treeId, localId);
        }
        function use2(usable) {
          if (usable !== null && typeof usable === "object") {
            if (typeof usable.then === "function") {
              var thenable = usable;
              return unwrapThenable(thenable);
            } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {
              var context = usable;
              return readContext(context);
            }
          }
          throw new Error("An unsupported type was passed to use(): " + String(usable));
        }
        function unwrapThenable(thenable) {
          var index = thenableIndexCounter;
          thenableIndexCounter += 1;
          if (thenableState === null) {
            thenableState = createThenableState();
          }
          return trackUsedThenable(thenableState, thenable, index);
        }
        function readPreviousThenableFromState() {
          var index = thenableIndexCounter;
          thenableIndexCounter += 1;
          if (thenableState === null) {
            return void 0;
          }
          return readPreviousThenable(thenableState, index);
        }
        function unsupportedRefresh() {
          throw new Error("Cache cannot be refreshed during server rendering.");
        }
        function useCacheRefresh() {
          return unsupportedRefresh;
        }
        function useMemoCache(size) {
          var data = new Array(size);
          for (var i = 0; i < size; i++) {
            data[i] = REACT_MEMO_CACHE_SENTINEL;
          }
          return data;
        }
        function noop$1() {
        }
        var HooksDispatcher = {
          readContext,
          use: use2,
          useContext,
          useMemo,
          useReducer,
          useRef,
          useState: useState2,
          useInsertionEffect: noop$1,
          useLayoutEffect: noop$1,
          useCallback,
          // useImperativeHandle is not run in the server environment
          useImperativeHandle: noop$1,
          // Effects are not run in the server environment.
          useEffect: noop$1,
          // Debugging effect
          useDebugValue: noop$1,
          useDeferredValue,
          useTransition,
          useId,
          // Subscriptions are not setup in a server environment.
          useSyncExternalStore
        };
        {
          HooksDispatcher.useCacheRefresh = useCacheRefresh;
        }
        {
          HooksDispatcher.useEffectEvent = useEffectEvent;
        }
        {
          HooksDispatcher.useMemoCache = useMemoCache;
        }
        {
          HooksDispatcher.useHostTransitionStatus = useHostTransitionStatus;
        }
        {
          HooksDispatcher.useOptimistic = useOptimistic;
          HooksDispatcher.useFormState = useActionState;
          HooksDispatcher.useActionState = useActionState;
        }
        var currentResumableState = null;
        function setCurrentResumableState(resumableState) {
          currentResumableState = resumableState;
        }
        function getCacheForType(resourceType) {
          throw new Error("Not implemented.");
        }
        var DefaultAsyncDispatcher = {
          getCacheForType
        };
        {
          DefaultAsyncDispatcher.getOwner = function() {
            return null;
          };
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var prefix;
        function describeBuiltInComponentFrame(name) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher2 = null;
          {
            previousDispatcher2 = ReactSharedInternals.H;
            ReactSharedInternals.H = null;
            disableLogs();
          }
          var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
              var control;
              try {
                if (construct) {
                  var Fake = function() {
                    throw Error();
                  };
                  Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  });
                  if (typeof Reflect === "object" && Reflect.construct) {
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x) {
                      control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x) {
                      control = x;
                    }
                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x) {
                    control = x;
                  }
                  var maybePromise = fn();
                  if (maybePromise && typeof maybePromise.catch === "function") {
                    maybePromise.catch(function() {
                    });
                  }
                }
              } catch (sample) {
                if (sample && control && typeof sample.stack === "string") {
                  return [sample.stack, control.stack];
                }
              }
              return [null, null];
            }
          };
          RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
          if (namePropDescriptor && namePropDescriptor.configurable) {
            Object.defineProperty(
              RunInRootFrame.DetermineComponentFrameRoot,
              // Configurable properties can be updated even if its writable descriptor
              // is set to `false`.
              // $FlowFixMe[cannot-write]
              "name",
              {
                value: "DetermineComponentFrameRoot"
              }
            );
          }
          try {
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
              var sampleLines = sampleStack.split("\n");
              var controlLines = controlStack.split("\n");
              var s = 0;
              var c = 0;
              while (s < sampleLines.length && !sampleLines[s].includes("DetermineComponentFrameRoot")) {
                s++;
              }
              while (c < controlLines.length && !controlLines[c].includes("DetermineComponentFrameRoot")) {
                c++;
              }
              if (s === sampleLines.length || c === controlLines.length) {
                s = sampleLines.length - 1;
                c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        if (true) {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactSharedInternals.H = previousDispatcher2;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info += describeBuiltInComponentFrame(node.type);
                  break;
                case 1:
                  info += describeFunctionComponentFrame(node.type);
                  break;
                case 2:
                  info += describeClassComponentFrame(node.type);
                  break;
              }
              node = node.parent;
            } while (node);
            return info;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var CLIENT_RENDERED = 4;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var POSTPONED = 5;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error2) {
          console["error"](error2);
          return null;
        }
        function noop() {
        }
        function createRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError, onPostpone, formState) {
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            flushScheduled: false,
            resumableState,
            renderState,
            rootFormatContext,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            trackedPostpones: null,
            onError: onError === void 0 ? defaultErrorHandler : onError,
            onPostpone: onPostpone === void 0 ? noop : onPostpone,
            onAllReady: onAllReady === void 0 ? noop : onAllReady,
            onShellReady: onShellReady === void 0 ? noop : onShellReady,
            onShellError: onShellError === void 0 ? noop : onShellError,
            onFatalError: onFatalError === void 0 ? noop : onFatalError,
            formState: formState === void 0 ? null : formState
          };
          var rootSegment = createPendingSegment(
            request,
            0,
            null,
            rootFormatContext,
            // Root segments are never embedded in Text on either edge
            false,
            false
          );
          rootSegment.parentFlushed = true;
          var rootTask = createRenderTask(request, null, children, -1, null, rootSegment, null, abortSet, null, rootFormatContext, emptyContextObject, rootContextSnapshot, emptyTreeContext, null, false);
          pingedTasks.push(rootTask);
          return request;
        }
        function createPrerenderRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError, onPostpone) {
          var request = createRequest(children, resumableState, renderState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError, onPostpone, void 0);
          request.trackedPostpones = {
            workingMap: /* @__PURE__ */ new Map(),
            rootNodes: [],
            rootSlots: null
          };
          return request;
        }
        function resumeRequest(children, postponedState, renderState, onError, onAllReady, onShellReady, onShellError, onFatalError, onPostpone) {
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            flushScheduled: false,
            resumableState: postponedState.resumableState,
            renderState,
            rootFormatContext: postponedState.rootFormatContext,
            progressiveChunkSize: postponedState.progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: postponedState.nextSegmentId,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            trackedPostpones: null,
            onError: onError === void 0 ? defaultErrorHandler : onError,
            onPostpone: onPostpone === void 0 ? noop : onPostpone,
            onAllReady: onAllReady === void 0 ? noop : onAllReady,
            onShellReady: onShellReady === void 0 ? noop : onShellReady,
            onShellError: onShellError === void 0 ? noop : onShellError,
            onFatalError: onFatalError === void 0 ? noop : onFatalError,
            formState: null
          };
          if (typeof postponedState.replaySlots === "number") {
            var resumedId = postponedState.replaySlots;
            var rootSegment = createPendingSegment(
              request,
              0,
              null,
              postponedState.rootFormatContext,
              // Root segments are never embedded in Text on either edge
              false,
              false
            );
            rootSegment.id = resumedId;
            rootSegment.parentFlushed = true;
            var _rootTask = createRenderTask(request, null, children, -1, null, rootSegment, null, abortSet, null, postponedState.rootFormatContext, emptyContextObject, rootContextSnapshot, emptyTreeContext, null, false);
            pingedTasks.push(_rootTask);
            return request;
          }
          var replay = {
            nodes: postponedState.replayNodes,
            slots: postponedState.replaySlots,
            pendingTasks: 0
          };
          var rootTask = createReplayTask(request, null, replay, children, -1, null, null, abortSet, null, postponedState.rootFormatContext, emptyContextObject, rootContextSnapshot, emptyTreeContext, null, false);
          pingedTasks.push(rootTask);
          return request;
        }
        var currentRequest = null;
        function resolveRequest() {
          if (currentRequest)
            return currentRequest;
          {
            var store = requestStorage.getStore();
            if (store)
              return store;
          }
          return null;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (request.pingedTasks.length === 1) {
            request.flushScheduled = request.destination !== null;
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          var boundary = {
            status: PENDING,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks,
            errorDigest: null,
            contentState: createHoistableState(),
            fallbackState: createHoistableState(),
            trackedContentKeyPath: null,
            trackedFallbackNode: null
          };
          {
            boundary.errorMessage = null;
            boundary.errorStack = null;
            boundary.errorComponentStack = null;
          }
          return boundary;
        }
        function createRenderTask(request, thenableState2, node, childIndex, blockedBoundary, blockedSegment, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            replay: null,
            node,
            childIndex,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            hoistableState,
            abortSet,
            keyPath,
            formatContext,
            legacyContext,
            context,
            treeContext,
            componentStack,
            thenableState: thenableState2,
            isFallback
          };
          abortSet.add(task);
          return task;
        }
        function createReplayTask(request, thenableState2, replay, node, childIndex, blockedBoundary, hoistableState, abortSet, keyPath, formatContext, legacyContext, context, treeContext, componentStack, isFallback) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          replay.pendingTasks++;
          var task = {
            replay,
            node,
            childIndex,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment: null,
            hoistableState,
            abortSet,
            keyPath,
            formatContext,
            legacyContext,
            context,
            treeContext,
            componentStack,
            thenableState: thenableState2,
            isFallback
          };
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index, boundary, parentFormatContext, lastPushedText, textEmbedded) {
          return {
            status: PENDING,
            id: -1,
            // lazily assigned later
            index,
            parentFlushed: false,
            chunks: [],
            children: [],
            parentFormatContext,
            boundary,
            lastPushedText,
            textEmbedded
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function getStackFromNode(stackNode) {
          return getStackByComponentStackNode(stackNode);
        }
        function createBuiltInComponentStack(task, type) {
          return {
            tag: 0,
            parent: task.componentStack,
            type
          };
        }
        function createFunctionComponentStack(task, type) {
          return {
            tag: 1,
            parent: task.componentStack,
            type
          };
        }
        function createClassComponentStack(task, type) {
          return {
            tag: 2,
            parent: task.componentStack,
            type
          };
        }
        function getThrownInfo(request, node) {
          if (node && // Always produce a stack in dev
          true) {
            return {
              componentStack: getStackFromNode(node)
            };
          } else {
            return {};
          }
        }
        function encodeErrorForBoundary(boundary, digest, error2, thrownInfo, wasAborted) {
          boundary.errorDigest = digest;
          {
            var message, stack;
            if (error2 instanceof Error) {
              message = String(error2.message);
              stack = String(error2.stack);
            } else if (typeof error2 === "object" && error2 !== null) {
              message = describeObjectForErrorMessage(error2);
              stack = null;
            } else {
              message = String(error2);
              stack = null;
            }
            var prefix2 = wasAborted ? "Switched to client rendering because the server rendering aborted due to:\n\n" : "Switched to client rendering because the server rendering errored:\n\n";
            boundary.errorMessage = prefix2 + message;
            boundary.errorStack = stack !== null ? prefix2 + stack : null;
            boundary.errorComponentStack = thrownInfo.componentStack;
          }
        }
        function logPostpone(request, reason, postponeInfo) {
          request.onPostpone(reason, postponeInfo);
        }
        function logRecoverableError(request, error$1, errorInfo) {
          var errorDigest = request.onError(error$1, errorInfo);
          if (errorDigest != null && typeof errorDigest !== "string") {
            {
              error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "%s" instead', typeof errorDigest);
            }
            return;
          }
          return errorDigest;
        }
        function fatalError(request, error2) {
          var onShellError = request.onShellError;
          onShellError(error2);
          var onFatalError = request.onFatalError;
          onFatalError(error2);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error2);
          } else {
            request.status = CLOSING;
            request.fatalError = error2;
          }
        }
        function renderSuspenseBoundary(request, someTask, keyPath, props) {
          if (someTask.replay !== null) {
            var _prevKeyPath = someTask.keyPath;
            someTask.keyPath = keyPath;
            var _content = props.children;
            try {
              renderNode(request, someTask, _content, -1);
            } finally {
              someTask.keyPath = _prevKeyPath;
            }
            return;
          }
          var task = someTask;
          var previousComponentStack = task.componentStack;
          var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, "Suspense");
          var prevKeyPath = task.keyPath;
          var parentBoundary = task.blockedBoundary;
          var parentHoistableState = task.hoistableState;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          if (request.trackedPostpones !== null) {
            newBoundary.trackedContentKeyPath = keyPath;
          }
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(
            request,
            insertionIndex,
            newBoundary,
            task.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          parentSegment.children.push(boundarySegment);
          parentSegment.lastPushedText = false;
          var contentRootSegment = createPendingSegment(
            request,
            0,
            null,
            task.formatContext,
            // boundaries never require text embedding at their edges because comment nodes bound them
            false,
            false
          );
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.hoistableState = newBoundary.contentState;
          task.blockedSegment = contentRootSegment;
          task.keyPath = keyPath;
          try {
            renderNode(request, task, content, -1);
            pushSegmentFinale(contentRootSegment.chunks, request.renderState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0 && newBoundary.status === PENDING) {
              newBoundary.status = COMPLETED;
              task.componentStack = previousComponentStack;
              return;
            }
          } catch (error2) {
            contentRootSegment.status = ERRORED;
            newBoundary.status = CLIENT_RENDERED;
            var thrownInfo = getThrownInfo(request, task.componentStack);
            var errorDigest;
            if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
              var postponeInstance = error2;
              logPostpone(request, postponeInstance.message, thrownInfo);
              errorDigest = "POSTPONE";
            } else {
              errorDigest = logRecoverableError(request, error2, thrownInfo);
            }
            encodeErrorForBoundary(newBoundary, errorDigest, error2, thrownInfo, false);
            untrackBoundary(request, newBoundary);
          } finally {
            task.blockedBoundary = parentBoundary;
            task.hoistableState = parentHoistableState;
            task.blockedSegment = parentSegment;
            task.keyPath = prevKeyPath;
            task.componentStack = previousComponentStack;
          }
          var fallbackKeyPath = [keyPath[0], "Suspense Fallback", keyPath[2]];
          var trackedPostpones = request.trackedPostpones;
          if (trackedPostpones !== null) {
            var fallbackReplayNode = [fallbackKeyPath[1], fallbackKeyPath[2], [], null];
            trackedPostpones.workingMap.set(fallbackKeyPath, fallbackReplayNode);
            if (newBoundary.status === POSTPONED) {
              var boundaryReplayNode = trackedPostpones.workingMap.get(keyPath);
              boundaryReplayNode[4] = fallbackReplayNode;
            } else {
              newBoundary.trackedFallbackNode = fallbackReplayNode;
            }
          }
          var suspendedFallbackTask = createRenderTask(
            request,
            null,
            fallback,
            -1,
            parentBoundary,
            boundarySegment,
            newBoundary.fallbackState,
            fallbackAbortSet,
            fallbackKeyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // This stack should be the Suspense boundary stack because while the fallback is actually a child segment
            // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself
            suspenseComponentStack,
            true
          );
          request.pingedTasks.push(suspendedFallbackTask);
        }
        function replaySuspenseBoundary(request, task, keyPath, props, id, childNodes, childSlots, fallbackNodes, fallbackSlots) {
          var previousComponentStack = task.componentStack;
          var suspenseComponentStack = task.componentStack = createBuiltInComponentStack(task, "Suspense");
          var prevKeyPath = task.keyPath;
          var previousReplaySet = task.replay;
          var parentBoundary = task.blockedBoundary;
          var parentHoistableState = task.hoistableState;
          var content = props.children;
          var fallback = props.fallback;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var resumedBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          resumedBoundary.parentFlushed = true;
          resumedBoundary.rootSegmentID = id;
          task.blockedBoundary = resumedBoundary;
          task.hoistableState = resumedBoundary.contentState;
          task.replay = {
            nodes: childNodes,
            slots: childSlots,
            pendingTasks: 1
          };
          try {
            renderNode(request, task, content, -1);
            if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
              throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
            }
            task.replay.pendingTasks--;
            if (resumedBoundary.pendingTasks === 0 && resumedBoundary.status === PENDING) {
              resumedBoundary.status = COMPLETED;
              request.completedBoundaries.push(resumedBoundary);
              return;
            }
          } catch (error2) {
            resumedBoundary.status = CLIENT_RENDERED;
            var thrownInfo = getThrownInfo(request, task.componentStack);
            var errorDigest;
            if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
              var postponeInstance = error2;
              logPostpone(request, postponeInstance.message, thrownInfo);
              errorDigest = "POSTPONE";
            } else {
              errorDigest = logRecoverableError(request, error2, thrownInfo);
            }
            encodeErrorForBoundary(resumedBoundary, errorDigest, error2, thrownInfo, false);
            task.replay.pendingTasks--;
            request.clientRenderedBoundaries.push(resumedBoundary);
          } finally {
            task.blockedBoundary = parentBoundary;
            task.hoistableState = parentHoistableState;
            task.replay = previousReplaySet;
            task.keyPath = prevKeyPath;
            task.componentStack = previousComponentStack;
          }
          var fallbackKeyPath = [keyPath[0], "Suspense Fallback", keyPath[2]];
          var fallbackReplay = {
            nodes: fallbackNodes,
            slots: fallbackSlots,
            pendingTasks: 0
          };
          var suspendedFallbackTask = createReplayTask(
            request,
            null,
            fallbackReplay,
            fallback,
            -1,
            parentBoundary,
            resumedBoundary.fallbackState,
            fallbackAbortSet,
            fallbackKeyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // This stack should be the Suspense boundary stack because while the fallback is actually a child segment
            // of the parent boundary from a component standpoint the fallback is a child of the Suspense boundary itself
            suspenseComponentStack,
            true
          );
          request.pingedTasks.push(suspendedFallbackTask);
        }
        function renderHostElement(request, task, keyPath, type, props) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createBuiltInComponentStack(task, type);
          var segment = task.blockedSegment;
          if (segment === null) {
            var children = props.children;
            var prevContext = task.formatContext;
            var prevKeyPath = task.keyPath;
            task.formatContext = getChildFormatContext(prevContext, type, props);
            task.keyPath = keyPath;
            renderNode(request, task, children, -1);
            task.formatContext = prevContext;
            task.keyPath = prevKeyPath;
          } else {
            var _children = pushStartInstance(segment.chunks, type, props, request.resumableState, request.renderState, task.hoistableState, task.formatContext, segment.lastPushedText, task.isFallback);
            segment.lastPushedText = false;
            var _prevContext = task.formatContext;
            var _prevKeyPath2 = task.keyPath;
            task.formatContext = getChildFormatContext(_prevContext, type, props);
            task.keyPath = keyPath;
            renderNode(request, task, _children, -1);
            task.formatContext = _prevContext;
            task.keyPath = _prevKeyPath2;
            pushEndInstance(segment.chunks, type, props, request.resumableState, _prevContext);
            segment.lastPushedText = false;
          }
          task.componentStack = previousComponentStack;
        }
        function shouldConstruct(Component) {
          return Component.prototype && Component.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, keyPath, Component, props, secondArg) {
          var prevThenableState = task.thenableState;
          task.thenableState = null;
          var componentIdentity = {};
          prepareToUseHooks(request, task, keyPath, componentIdentity, prevThenableState);
          var result = Component(props, secondArg);
          return finishHooks(Component, props, result, secondArg);
        }
        function finishClassComponent(request, task, keyPath, instance, Component, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, nextChildren, -1);
          task.keyPath = prevKeyPath;
        }
        function resolveClassComponentProps(Component, baseProps) {
          var newProps = baseProps;
          {
            if ("ref" in baseProps) {
              newProps = {};
              for (var propName in baseProps) {
                if (propName !== "ref") {
                  newProps[propName] = baseProps[propName];
                }
              }
            }
          }
          var defaultProps = Component.defaultProps;
          if (defaultProps && // If disableDefaultPropsExceptForClasses is true, we always resolve
          // default props here, rather than in the JSX runtime.
          disableDefaultPropsExceptForClasses) {
            if (newProps === baseProps) {
              newProps = assign({}, newProps, baseProps);
            }
            for (var _propName in defaultProps) {
              if (newProps[_propName] === void 0) {
                newProps[_propName] = defaultProps[_propName];
              }
            }
          }
          return newProps;
        }
        function renderClassComponent(request, task, keyPath, Component, props) {
          var resolvedProps = resolveClassComponentProps(Component, props);
          var previousComponentStack = task.componentStack;
          task.componentStack = createClassComponentStack(task, Component);
          var maskedContext = void 0;
          var instance = constructClassInstance(Component, resolvedProps);
          mountClassInstance(instance, Component, resolvedProps, maskedContext);
          finishClassComponent(request, task, keyPath, instance, Component, resolvedProps);
          task.componentStack = previousComponentStack;
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        function renderFunctionComponent(request, task, keyPath, Component, props) {
          var legacyContext;
          var previousComponentStack = task.componentStack;
          task.componentStack = createFunctionComponentStack(task, Component);
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value = renderWithHooks(request, task, keyPath, Component, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          var actionStateCount = getActionStateCount();
          var actionStateMatchingIndex2 = getActionStateMatchingIndex();
          {
            if (Component.contextTypes) {
              error("%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead.", getComponentNameFromType(Component) || "Unknown");
            }
          }
          {
            validateFunctionComponentInDev(Component);
          }
          finishFunctionComponent(request, task, keyPath, value, hasId, actionStateCount, actionStateMatchingIndex2);
          task.componentStack = previousComponentStack;
        }
        function finishFunctionComponent(request, task, keyPath, children, hasId, actionStateCount, actionStateMatchingIndex2) {
          var didEmitActionStateMarkers = false;
          if (actionStateCount !== 0 && request.formState !== null) {
            var segment = task.blockedSegment;
            if (segment === null)
              ;
            else {
              didEmitActionStateMarkers = true;
              var target = segment.chunks;
              for (var i = 0; i < actionStateCount; i++) {
                if (i === actionStateMatchingIndex2) {
                  pushFormStateMarkerIsMatching(target);
                } else {
                  pushFormStateMarkerIsNotMatching(target);
                }
              }
            }
          }
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index);
            renderNode(request, task, children, -1);
            task.treeContext = prevTreeContext;
          } else if (didEmitActionStateMarkers) {
            renderNode(request, task, children, -1);
          } else {
            renderNodeDestructive(request, task, children, -1);
          }
          task.keyPath = prevKeyPath;
        }
        function validateFunctionComponentInDev(Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...", Component.displayName || Component.name || "Component");
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName2]) {
                error("%s: Function components do not support contextType.", _componentName2);
                didWarnAboutContextTypeOnFunctionComponent[_componentName2] = true;
              }
            }
          }
        }
        function resolveDefaultPropsOnNonClassComponent(Component, baseProps) {
          {
            return baseProps;
          }
        }
        function renderForwardRef(request, task, keyPath, type, props, ref) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createFunctionComponentStack(task, type.render);
          var propsWithoutRef;
          if ("ref" in props) {
            propsWithoutRef = {};
            for (var key in props) {
              if (key !== "ref") {
                propsWithoutRef[key] = props[key];
              }
            }
          } else {
            propsWithoutRef = props;
          }
          var children = renderWithHooks(request, task, keyPath, type.render, propsWithoutRef, ref);
          var hasId = checkDidRenderIdHook();
          var actionStateCount = getActionStateCount();
          var actionStateMatchingIndex2 = getActionStateMatchingIndex();
          finishFunctionComponent(request, task, keyPath, children, hasId, actionStateCount, actionStateMatchingIndex2);
          task.componentStack = previousComponentStack;
        }
        function renderMemo(request, task, keyPath, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultPropsOnNonClassComponent(innerType, props);
          renderElement(request, task, keyPath, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, keyPath, context, props) {
          var render = props.children;
          {
            if (typeof render !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext$1(context);
          var newChildren = render(newValue);
          var prevKeyPath = task.keyPath;
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, newChildren, -1);
          task.keyPath = prevKeyPath;
        }
        function renderContextProvider(request, task, keyPath, context, props) {
          var value = props.value;
          var children = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          var prevKeyPath = task.keyPath;
          task.context = pushProvider(context, value);
          task.keyPath = keyPath;
          renderNodeDestructive(request, task, children, -1);
          task.context = popProvider(context);
          task.keyPath = prevKeyPath;
          {
            if (prevSnapshot !== task.context) {
              error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, keyPath, lazyComponent, props, ref) {
          var previousComponentStack = task.componentStack;
          task.componentStack = createBuiltInComponentStack(task, "Lazy");
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          var resolvedProps = resolveDefaultPropsOnNonClassComponent(Component, props);
          renderElement(request, task, keyPath, Component, resolvedProps, ref);
          task.componentStack = previousComponentStack;
        }
        function renderOffscreen(request, task, keyPath, props) {
          var mode = props.mode;
          if (mode === "hidden")
            ;
          else {
            var prevKeyPath = task.keyPath;
            task.keyPath = keyPath;
            renderNodeDestructive(request, task, props.children, -1);
            task.keyPath = prevKeyPath;
          }
        }
        function renderElement(request, task, keyPath, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct(type)) {
              renderClassComponent(request, task, keyPath, type, props);
              return;
            } else {
              renderFunctionComponent(request, task, keyPath, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, keyPath, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              var prevKeyPath = task.keyPath;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, props.children, -1);
              task.keyPath = prevKeyPath;
              return;
            }
            case REACT_OFFSCREEN_TYPE: {
              renderOffscreen(request, task, keyPath, props);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              var preiousComponentStack = task.componentStack;
              task.componentStack = createBuiltInComponentStack(task, "SuspenseList");
              var _prevKeyPath3 = task.keyPath;
              task.keyPath = keyPath;
              renderNodeDestructive(request, task, props.children, -1);
              task.keyPath = _prevKeyPath3;
              task.componentStack = preiousComponentStack;
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, keyPath, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, keyPath, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, keyPath, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE:
              case REACT_CONTEXT_TYPE: {
                {
                  var _context = type;
                  renderContextProvider(request, task, keyPath, _context, props);
                  return;
                }
              }
              case REACT_CONSUMER_TYPE: {
                {
                  var _context3 = type._context;
                  renderContextConsumer(request, task, keyPath, _context3, props);
                  return;
                }
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, keyPath, type, props);
                return;
              }
            }
          }
          var info = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        function resumeNode(request, task, segmentId, node, childIndex) {
          var prevReplay = task.replay;
          var blockedBoundary = task.blockedBoundary;
          var resumedSegment = createPendingSegment(request, 0, null, task.formatContext, false, false);
          resumedSegment.id = segmentId;
          resumedSegment.parentFlushed = true;
          try {
            var renderTask = task;
            renderTask.replay = null;
            renderTask.blockedSegment = resumedSegment;
            renderNode(request, task, node, childIndex);
            resumedSegment.status = COMPLETED;
            if (blockedBoundary === null) {
              request.completedRootSegment = resumedSegment;
            } else {
              queueCompletedSegment(blockedBoundary, resumedSegment);
              if (blockedBoundary.parentFlushed) {
                request.partialBoundaries.push(blockedBoundary);
              }
            }
          } finally {
            task.replay = prevReplay;
            task.blockedSegment = null;
          }
        }
        function replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, replay) {
          var replayNodes = replay.nodes;
          for (var i = 0; i < replayNodes.length; i++) {
            var node = replayNodes[i];
            if (keyOrIndex !== node[1]) {
              continue;
            }
            if (node.length === 4) {
              if (name !== null && name !== node[0]) {
                throw new Error("Expected the resume to render <" + node[0] + "> in this slot but instead it rendered <" + name + ">. The tree doesn't match so React will fallback to client rendering.");
              }
              var childNodes = node[2];
              var childSlots = node[3];
              var currentNode = task.node;
              task.replay = {
                nodes: childNodes,
                slots: childSlots,
                pendingTasks: 1
              };
              try {
                renderElement(request, task, keyPath, type, props, ref);
                if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
                  throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
                }
                task.replay.pendingTasks--;
              } catch (x) {
                if (typeof x === "object" && x !== null && (x === SuspenseException || typeof x.then === "function")) {
                  if (task.node === currentNode) {
                    task.replay = replay;
                  }
                  throw x;
                }
                task.replay.pendingTasks--;
                var thrownInfo = getThrownInfo(request, task.componentStack);
                erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);
              }
              task.replay = replay;
            } else {
              if (type !== REACT_SUSPENSE_TYPE) {
                var expectedType = "Suspense";
                throw new Error("Expected the resume to render <" + expectedType + "> in this slot but instead it rendered <" + (getComponentNameFromType(type) || "Unknown") + ">. The tree doesn't match so React will fallback to client rendering.");
              }
              replaySuspenseBoundary(request, task, keyPath, props, node[5], node[2], node[3], node[4] === null ? [] : node[4][2], node[4] === null ? null : node[4][3]);
            }
            replayNodes.splice(i, 1);
            return;
          }
        }
        function validateIterable(task, iterable, childIndex, iterator, iteratorFn) {
          {
            if (iterator === iterable) {
              var isGeneratorComponent = childIndex === -1 && // Only the root child is valid
              task.componentStack !== null && task.componentStack.tag === 1 && // FunctionComponent
              // $FlowFixMe[method-unbinding]
              Object.prototype.toString.call(task.componentStack.type) === "[object GeneratorFunction]" && // $FlowFixMe[method-unbinding]
              Object.prototype.toString.call(iterator) === "[object Generator]";
              if (!isGeneratorComponent) {
                if (!didWarnAboutGenerators) {
                  error("Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items.");
                }
                didWarnAboutGenerators = true;
              }
            } else if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
              }
            }
          }
        }
        function validateAsyncIterable(task, iterable, childIndex, iterator) {
          {
            if (iterator === iterable) {
              var isGeneratorComponent = childIndex === -1 && // Only the root child is valid
              task.componentStack !== null && task.componentStack.tag === 1 && // FunctionComponent
              // $FlowFixMe[method-unbinding]
              Object.prototype.toString.call(task.componentStack.type) === "[object AsyncGeneratorFunction]" && // $FlowFixMe[method-unbinding]
              Object.prototype.toString.call(iterator) === "[object AsyncGenerator]";
              if (!isGeneratorComponent) {
                if (!didWarnAboutGenerators) {
                  error("Using AsyncIterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You can use an AsyncIterable that can iterate multiple times over the same items.");
                }
                didWarnAboutGenerators = true;
              }
            }
          }
        }
        function warnOnFunctionType(invalidChild) {
          {
            var name = invalidChild.displayName || invalidChild.name || "Component";
            error("Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.", name, name);
          }
        }
        function warnOnSymbolType(invalidChild) {
          {
            var name = String(invalidChild);
            error("Symbols are not valid as a React child.\n  %s", name);
          }
        }
        function renderNodeDestructive(request, task, node, childIndex) {
          if (task.replay !== null && typeof task.replay.slots === "number") {
            var resumeSegmentID = task.replay.slots;
            resumeNode(request, task, resumeSegmentID, node, childIndex);
            return;
          }
          task.node = node;
          task.childIndex = childIndex;
          if (node === null) {
            return;
          }
          if (typeof node === "object") {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element = node;
                var type = element.type;
                var key = element.key;
                var props = element.props;
                var ref;
                {
                  var refProp = props.ref;
                  ref = refProp !== void 0 ? refProp : null;
                }
                var name = getComponentNameFromType(type);
                var keyOrIndex = key == null ? childIndex === -1 ? 0 : childIndex : key;
                var keyPath = [task.keyPath, name, keyOrIndex];
                if (task.replay !== null) {
                  replayElement(request, task, keyPath, name, keyOrIndex, childIndex, type, props, ref, task.replay);
                } else {
                  renderElement(request, task, keyPath, type, props, ref);
                }
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var previousComponentStack = task.componentStack;
                task.componentStack = createBuiltInComponentStack(task, "Lazy");
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init = lazyNode._init;
                var resolvedNode = init(payload);
                task.componentStack = previousComponentStack;
                renderNodeDestructive(request, task, resolvedNode, childIndex);
                return;
              }
            }
            if (isArray(node)) {
              renderChildrenArray(request, task, node, childIndex);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              var iterator = iteratorFn.call(node);
              if (iterator) {
                {
                  validateIterable(task, node, childIndex, iterator, iteratorFn);
                }
                var step = iterator.next();
                if (!step.done) {
                  var children = [];
                  do {
                    children.push(step.value);
                    step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, children, childIndex);
                }
                return;
              }
            }
            if (typeof node[ASYNC_ITERATOR] === "function") {
              var _iterator = node[ASYNC_ITERATOR]();
              if (_iterator) {
                {
                  validateAsyncIterable(task, node, childIndex, _iterator);
                }
                var _previousComponentStack = task.componentStack;
                task.componentStack = createBuiltInComponentStack(task, "AsyncIterable");
                var prevThenableState = task.thenableState;
                task.thenableState = null;
                prepareToUseThenableState(prevThenableState);
                var _children2 = [];
                var done = false;
                if (_iterator === node) {
                  var _step = readPreviousThenableFromState();
                  while (_step !== void 0) {
                    if (_step.done) {
                      done = true;
                      break;
                    }
                    _children2.push(_step.value);
                    _step = readPreviousThenableFromState();
                  }
                }
                if (!done) {
                  var _step2 = unwrapThenable(_iterator.next());
                  while (!_step2.done) {
                    _children2.push(_step2.value);
                    _step2 = unwrapThenable(_iterator.next());
                  }
                }
                task.componentStack = _previousComponentStack;
                renderChildrenArray(request, task, _children2, childIndex);
                return;
              }
            }
            var maybeUsable = node;
            if (typeof maybeUsable.then === "function") {
              task.thenableState = null;
              var thenable = maybeUsable;
              return renderNodeDestructive(request, task, unwrapThenable(thenable), childIndex);
            }
            if (maybeUsable.$$typeof === REACT_CONTEXT_TYPE) {
              var context = maybeUsable;
              return renderNodeDestructive(request, task, readContext$1(context), childIndex);
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            if (segment === null)
              ;
            else {
              segment.lastPushedText = pushTextInstance(segment.chunks, node, request.renderState, segment.lastPushedText);
            }
            return;
          }
          if (typeof node === "number" || typeof node === "bigint") {
            var _segment = task.blockedSegment;
            if (_segment === null)
              ;
            else {
              _segment.lastPushedText = pushTextInstance(_segment.chunks, "" + node, request.renderState, _segment.lastPushedText);
            }
            return;
          }
          {
            if (typeof node === "function") {
              warnOnFunctionType(node);
            }
            if (typeof node === "symbol") {
              warnOnSymbolType(node);
            }
          }
        }
        function replayFragment(request, task, children, childIndex) {
          var replay = task.replay;
          var replayNodes = replay.nodes;
          for (var j = 0; j < replayNodes.length; j++) {
            var node = replayNodes[j];
            if (node[1] !== childIndex) {
              continue;
            }
            var childNodes = node[2];
            var childSlots = node[3];
            task.replay = {
              nodes: childNodes,
              slots: childSlots,
              pendingTasks: 1
            };
            try {
              renderChildrenArray(request, task, children, -1);
              if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
                throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
              }
              task.replay.pendingTasks--;
            } catch (x) {
              if (typeof x === "object" && x !== null && (x === SuspenseException || typeof x.then === "function")) {
                throw x;
              }
              task.replay.pendingTasks--;
              var thrownInfo = getThrownInfo(request, task.componentStack);
              erroredReplay(request, task.blockedBoundary, x, thrownInfo, childNodes, childSlots);
            }
            task.replay = replay;
            replayNodes.splice(j, 1);
            break;
          }
        }
        function renderChildrenArray(request, task, children, childIndex) {
          var prevKeyPath = task.keyPath;
          if (childIndex !== -1) {
            task.keyPath = [task.keyPath, "Fragment", childIndex];
            if (task.replay !== null) {
              replayFragment(
                request,
                // $FlowFixMe: Refined.
                task,
                children,
                childIndex
              );
              task.keyPath = prevKeyPath;
              return;
            }
          }
          var prevTreeContext = task.treeContext;
          var totalChildren = children.length;
          if (task.replay !== null) {
            var resumeSlots = task.replay.slots;
            if (resumeSlots !== null && typeof resumeSlots === "object") {
              for (var i = 0; i < totalChildren; i++) {
                var node = children[i];
                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
                var resumeSegmentID = resumeSlots[i];
                if (typeof resumeSegmentID === "number") {
                  resumeNode(request, task, resumeSegmentID, node, i);
                  delete resumeSlots[i];
                } else {
                  renderNode(request, task, node, i);
                }
              }
              task.treeContext = prevTreeContext;
              task.keyPath = prevKeyPath;
              return;
            }
          }
          for (var _i = 0; _i < totalChildren; _i++) {
            var _node = children[_i];
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, _i);
            renderNode(request, task, _node, _i);
          }
          task.treeContext = prevTreeContext;
          task.keyPath = prevKeyPath;
        }
        function trackPostpone(request, trackedPostpones, task, segment) {
          segment.status = POSTPONED;
          var keyPath = task.keyPath;
          var boundary = task.blockedBoundary;
          if (boundary === null) {
            segment.id = request.nextSegmentId++;
            trackedPostpones.rootSlots = segment.id;
            if (request.completedRootSegment !== null) {
              request.completedRootSegment.status = POSTPONED;
            }
            return;
          }
          if (boundary !== null && boundary.status === PENDING) {
            boundary.status = POSTPONED;
            boundary.rootSegmentID = request.nextSegmentId++;
            var boundaryKeyPath = boundary.trackedContentKeyPath;
            if (boundaryKeyPath === null) {
              throw new Error("It should not be possible to postpone at the root. This is a bug in React.");
            }
            var fallbackReplayNode = boundary.trackedFallbackNode;
            var children = [];
            if (boundaryKeyPath === keyPath && task.childIndex === -1) {
              if (segment.id === -1) {
                if (segment.parentFlushed) {
                  segment.id = boundary.rootSegmentID;
                } else {
                  segment.id = request.nextSegmentId++;
                }
              }
              var boundaryNode = [boundaryKeyPath[1], boundaryKeyPath[2], children, segment.id, fallbackReplayNode, boundary.rootSegmentID];
              trackedPostpones.workingMap.set(boundaryKeyPath, boundaryNode);
              addToReplayParent(boundaryNode, boundaryKeyPath[0], trackedPostpones);
              return;
            } else {
              var _boundaryNode = trackedPostpones.workingMap.get(boundaryKeyPath);
              if (_boundaryNode === void 0) {
                _boundaryNode = [boundaryKeyPath[1], boundaryKeyPath[2], children, null, fallbackReplayNode, boundary.rootSegmentID];
                trackedPostpones.workingMap.set(boundaryKeyPath, _boundaryNode);
                addToReplayParent(_boundaryNode, boundaryKeyPath[0], trackedPostpones);
              } else {
                var suspenseBoundary = _boundaryNode;
                suspenseBoundary[4] = fallbackReplayNode;
                suspenseBoundary[5] = boundary.rootSegmentID;
              }
            }
          }
          if (segment.id === -1) {
            if (segment.parentFlushed && boundary !== null) {
              segment.id = boundary.rootSegmentID;
            } else {
              segment.id = request.nextSegmentId++;
            }
          }
          if (task.childIndex === -1) {
            if (keyPath === null) {
              trackedPostpones.rootSlots = segment.id;
            } else {
              var workingMap = trackedPostpones.workingMap;
              var resumableNode = workingMap.get(keyPath);
              if (resumableNode === void 0) {
                resumableNode = [keyPath[1], keyPath[2], [], segment.id];
                addToReplayParent(resumableNode, keyPath[0], trackedPostpones);
              } else {
                resumableNode[3] = segment.id;
              }
            }
          } else {
            var slots;
            if (keyPath === null) {
              slots = trackedPostpones.rootSlots;
              if (slots === null) {
                slots = trackedPostpones.rootSlots = {};
              } else if (typeof slots === "number") {
                throw new Error("It should not be possible to postpone both at the root of an element as well as a slot below. This is a bug in React.");
              }
            } else {
              var _workingMap = trackedPostpones.workingMap;
              var _resumableNode = _workingMap.get(keyPath);
              if (_resumableNode === void 0) {
                slots = {};
                _resumableNode = [keyPath[1], keyPath[2], [], slots];
                _workingMap.set(keyPath, _resumableNode);
                addToReplayParent(_resumableNode, keyPath[0], trackedPostpones);
              } else {
                slots = _resumableNode[3];
                if (slots === null) {
                  slots = _resumableNode[3] = {};
                } else if (typeof slots === "number") {
                  throw new Error("It should not be possible to postpone both at the root of an element as well as a slot below. This is a bug in React.");
                }
              }
            }
            slots[task.childIndex] = segment.id;
          }
        }
        function untrackBoundary(request, boundary) {
          var trackedPostpones = request.trackedPostpones;
          if (trackedPostpones === null) {
            return;
          }
          var boundaryKeyPath = boundary.trackedContentKeyPath;
          if (boundaryKeyPath === null) {
            return;
          }
          var boundaryNode = trackedPostpones.workingMap.get(boundaryKeyPath);
          if (boundaryNode === void 0) {
            return;
          }
          boundaryNode.length = 4;
          boundaryNode[2] = [];
          boundaryNode[3] = null;
        }
        function injectPostponedHole(request, task, reason, thrownInfo) {
          logPostpone(request, reason, thrownInfo);
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            task.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          return newSegment;
        }
        function spawnNewSuspendedReplayTask(request, task, thenableState2, x) {
          var newTask = createReplayTask(
            request,
            thenableState2,
            task.replay,
            task.node,
            task.childIndex,
            task.blockedBoundary,
            task.hoistableState,
            task.abortSet,
            task.keyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // We pop one task off the stack because the node that suspended will be tried again,
            // which will add it back onto the stack.
            task.componentStack !== null ? task.componentStack.parent : null,
            task.isFallback
          );
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function spawnNewSuspendedRenderTask(request, task, thenableState2, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(
            request,
            insertionIndex,
            null,
            task.formatContext,
            // Adopt the parent segment's leading text embed
            segment.lastPushedText,
            // Assume we are text embedded at the trailing edge
            true
          );
          segment.children.push(newSegment);
          segment.lastPushedText = false;
          var newTask = createRenderTask(
            request,
            thenableState2,
            task.node,
            task.childIndex,
            task.blockedBoundary,
            newSegment,
            task.hoistableState,
            task.abortSet,
            task.keyPath,
            task.formatContext,
            task.legacyContext,
            task.context,
            task.treeContext,
            // We pop one task off the stack because the node that suspended will be tried again,
            // which will add it back onto the stack.
            task.componentStack !== null ? task.componentStack.parent : null,
            task.isFallback
          );
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node, childIndex) {
          var previousFormatContext = task.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousKeyPath = task.keyPath;
          var previousTreeContext = task.treeContext;
          var previousComponentStack = task.componentStack;
          var x;
          var segment = task.blockedSegment;
          if (segment === null) {
            try {
              return renderNodeDestructive(request, task, node, childIndex);
            } catch (thrownValue) {
              resetHooksState();
              x = thrownValue === SuspenseException ? (
                // This is a special type of exception used for Suspense. For historical
                // reasons, the rest of the Suspense implementation expects the thrown
                // value to be a thenable, because before `use` existed that was the
                // (unstable) API for suspending. This implementation detail can change
                // later, once we deprecate the old API in favor of `use`.
                getSuspendedThenable()
              ) : thrownValue;
              if (typeof x === "object" && x !== null) {
                if (typeof x.then === "function") {
                  var wakeable = x;
                  var thenableState2 = getThenableStateAfterSuspending();
                  spawnNewSuspendedReplayTask(
                    request,
                    // $FlowFixMe: Refined.
                    task,
                    thenableState2,
                    wakeable
                  );
                  task.formatContext = previousFormatContext;
                  task.legacyContext = previousLegacyContext;
                  task.context = previousContext;
                  task.keyPath = previousKeyPath;
                  task.treeContext = previousTreeContext;
                  task.componentStack = previousComponentStack;
                  switchContext(previousContext);
                  return;
                }
              }
            }
          } else {
            var childrenLength = segment.children.length;
            var chunkLength = segment.chunks.length;
            try {
              return renderNodeDestructive(request, task, node, childIndex);
            } catch (thrownValue) {
              resetHooksState();
              segment.children.length = childrenLength;
              segment.chunks.length = chunkLength;
              x = thrownValue === SuspenseException ? (
                // This is a special type of exception used for Suspense. For historical
                // reasons, the rest of the Suspense implementation expects the thrown
                // value to be a thenable, because before `use` existed that was the
                // (unstable) API for suspending. This implementation detail can change
                // later, once we deprecate the old API in favor of `use`.
                getSuspendedThenable()
              ) : thrownValue;
              if (typeof x === "object" && x !== null) {
                if (typeof x.then === "function") {
                  var _wakeable = x;
                  var _thenableState = getThenableStateAfterSuspending();
                  spawnNewSuspendedRenderTask(
                    request,
                    // $FlowFixMe: Refined.
                    task,
                    _thenableState,
                    _wakeable
                  );
                  task.formatContext = previousFormatContext;
                  task.legacyContext = previousLegacyContext;
                  task.context = previousContext;
                  task.keyPath = previousKeyPath;
                  task.treeContext = previousTreeContext;
                  task.componentStack = previousComponentStack;
                  switchContext(previousContext);
                  return;
                }
                if (x.$$typeof === REACT_POSTPONE_TYPE && request.trackedPostpones !== null && task.blockedBoundary !== null) {
                  var trackedPostpones = request.trackedPostpones;
                  var postponeInstance = x;
                  var thrownInfo = getThrownInfo(request, task.componentStack);
                  var postponedSegment = injectPostponedHole(
                    request,
                    task,
                    // We don't use ReplayTasks in prerenders.
                    postponeInstance.message,
                    thrownInfo
                  );
                  trackPostpone(request, trackedPostpones, task, postponedSegment);
                  task.formatContext = previousFormatContext;
                  task.legacyContext = previousLegacyContext;
                  task.context = previousContext;
                  task.keyPath = previousKeyPath;
                  task.treeContext = previousTreeContext;
                  task.componentStack = previousComponentStack;
                  switchContext(previousContext);
                  return;
                }
              }
            }
          }
          task.formatContext = previousFormatContext;
          task.legacyContext = previousLegacyContext;
          task.context = previousContext;
          task.keyPath = previousKeyPath;
          task.treeContext = previousTreeContext;
          switchContext(previousContext);
          throw x;
        }
        function erroredReplay(request, boundary, error2, errorInfo, replayNodes, resumeSlots) {
          var errorDigest;
          if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
            var postponeInstance = error2;
            logPostpone(request, postponeInstance.message, errorInfo);
            errorDigest = "POSTPONE";
          } else {
            errorDigest = logRecoverableError(request, error2, errorInfo);
          }
          abortRemainingReplayNodes(request, boundary, replayNodes, resumeSlots, error2, errorDigest, errorInfo, false);
        }
        function erroredTask(request, boundary, error2, errorInfo) {
          var errorDigest;
          if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
            var postponeInstance = error2;
            logPostpone(request, postponeInstance.message, errorInfo);
            errorDigest = "POSTPONE";
          } else {
            errorDigest = logRecoverableError(request, error2, errorInfo);
          }
          if (boundary === null) {
            fatalError(request, error2);
          } else {
            boundary.pendingTasks--;
            if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              encodeErrorForBoundary(boundary, errorDigest, error2, errorInfo, false);
              untrackBoundary(request, boundary);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          if (segment !== null) {
            segment.status = ABORTED;
            finishedTask(request, boundary, segment);
          }
        }
        function abortRemainingSuspenseBoundary(request, rootSegmentID, error2, errorDigest, errorInfo, wasAborted) {
          var resumedBoundary = createSuspenseBoundary(request, /* @__PURE__ */ new Set());
          resumedBoundary.parentFlushed = true;
          resumedBoundary.rootSegmentID = rootSegmentID;
          resumedBoundary.status = CLIENT_RENDERED;
          encodeErrorForBoundary(resumedBoundary, errorDigest, error2, errorInfo, wasAborted);
          if (resumedBoundary.parentFlushed) {
            request.clientRenderedBoundaries.push(resumedBoundary);
          }
        }
        function abortRemainingReplayNodes(request, boundary, nodes, slots, error2, errorDigest, errorInfo, aborted) {
          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if (node.length === 4) {
              abortRemainingReplayNodes(request, boundary, node[2], node[3], error2, errorDigest, errorInfo, aborted);
            } else {
              var boundaryNode = node;
              var rootSegmentID = boundaryNode[5];
              abortRemainingSuspenseBoundary(request, rootSegmentID, error2, errorDigest, errorInfo, aborted);
            }
          }
          nodes.length = 0;
          if (slots !== null) {
            if (boundary === null) {
              throw new Error("We should not have any resumable nodes in the shell. This is a bug in React.");
            } else if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              encodeErrorForBoundary(boundary, errorDigest, error2, errorInfo, aborted);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            if (typeof slots === "object") {
              for (var index in slots) {
                delete slots[index];
              }
            }
          }
        }
        function abortTask(task, request, error2) {
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          if (segment !== null) {
            segment.status = ABORTED;
          }
          if (boundary === null) {
            var errorInfo = {};
            if (request.status !== CLOSING && request.status !== CLOSED) {
              var replay = task.replay;
              if (replay === null) {
                if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
                  var postponeInstance = error2;
                  var fatal = new Error("The render was aborted with postpone when the shell is incomplete. Reason: " + postponeInstance.message);
                  logRecoverableError(request, fatal, errorInfo);
                  fatalError(request, fatal);
                } else {
                  logRecoverableError(request, error2, errorInfo);
                  fatalError(request, error2);
                }
                return;
              } else {
                replay.pendingTasks--;
                if (replay.pendingTasks === 0 && replay.nodes.length > 0) {
                  var errorDigest;
                  if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
                    var _postponeInstance = error2;
                    logPostpone(request, _postponeInstance.message, errorInfo);
                    errorDigest = "POSTPONE";
                  } else {
                    errorDigest = logRecoverableError(request, error2, errorInfo);
                  }
                  abortRemainingReplayNodes(request, null, replay.nodes, replay.slots, error2, errorDigest, errorInfo, true);
                }
                request.pendingRootTasks--;
                if (request.pendingRootTasks === 0) {
                  completeShell(request);
                }
              }
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.status !== CLIENT_RENDERED) {
              boundary.status = CLIENT_RENDERED;
              var _errorInfo = getThrownInfo(request, task.componentStack);
              var _errorDigest;
              if (typeof error2 === "object" && error2 !== null && error2.$$typeof === REACT_POSTPONE_TYPE) {
                var _postponeInstance2 = error2;
                logPostpone(request, _postponeInstance2.message, _errorInfo);
                _errorDigest = "POSTPONE";
              } else {
                _errorDigest = logRecoverableError(request, error2, _errorInfo);
              }
              encodeErrorForBoundary(boundary, _errorDigest, error2, _errorInfo, true);
              untrackBoundary(request, boundary);
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
              return abortTask(fallbackTask, request, error2);
            });
            boundary.fallbackAbortableTasks.clear();
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function safelyEmitEarlyPreloads(request, shellComplete) {
          try {
            emitEarlyPreloads(request.renderState, request.resumableState, shellComplete);
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
          }
        }
        function completeShell(request) {
          if (request.trackedPostpones === null) {
            var shellComplete = true;
            safelyEmitEarlyPreloads(request, shellComplete);
          }
          request.onShellError = noop;
          var onShellReady = request.onShellReady;
          onShellReady();
        }
        function completeAll(request) {
          var shellComplete = request.trackedPostpones === null ? (
            // Render, we assume it is completed
            true
          ) : (
            // Prerender Request, we use the state of the root segment
            request.completedRootSegment === null || request.completedRootSegment.status !== POSTPONED
          );
          safelyEmitEarlyPreloads(request, shellComplete);
          var onAllReady = request.onAllReady;
          onAllReady();
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null && segment.children[0].id === -1) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment !== null && segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              completeShell(request);
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.status === CLIENT_RENDERED)
              ;
            else if (boundary.pendingTasks === 0) {
              if (boundary.status === PENDING) {
                boundary.status = COMPLETED;
              }
              if (segment !== null && segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              if (boundary.status === COMPLETED) {
                boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
                boundary.fallbackAbortableTasks.clear();
              }
            } else {
              if (segment !== null && segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            completeAll(request);
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment === null) {
            retryReplayTask(
              request,
              // $FlowFixMe: Refined.
              task
            );
          } else {
            retryRenderTask(
              request,
              // $FlowFixMe: Refined.
              task,
              segment
            );
          }
        }
        function retryRenderTask(request, task, segment) {
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          var childrenLength = segment.children.length;
          var chunkLength = segment.chunks.length;
          try {
            renderNodeDestructive(request, task, task.node, task.childIndex);
            pushSegmentFinale(segment.chunks, request.renderState, segment.lastPushedText, segment.textEmbedded);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (thrownValue) {
            resetHooksState();
            segment.children.length = childrenLength;
            segment.chunks.length = chunkLength;
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null) {
              if (typeof x.then === "function") {
                var ping = task.ping;
                x.then(ping, ping);
                task.thenableState = getThenableStateAfterSuspending();
                if (task.componentStack !== null) {
                  task.componentStack = task.componentStack.parent;
                }
                return;
              } else if (request.trackedPostpones !== null && x.$$typeof === REACT_POSTPONE_TYPE) {
                var trackedPostpones = request.trackedPostpones;
                task.abortSet.delete(task);
                var postponeInstance = x;
                var postponeInfo = getThrownInfo(request, task.componentStack);
                logPostpone(request, postponeInstance.message, postponeInfo);
                trackPostpone(request, trackedPostpones, task, segment);
                finishedTask(request, task.blockedBoundary, segment);
                return;
              }
            }
            var errorInfo = getThrownInfo(request, task.componentStack);
            task.abortSet.delete(task);
            segment.status = ERRORED;
            erroredTask(request, task.blockedBoundary, x, errorInfo);
            return;
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function retryReplayTask(request, task) {
          if (task.replay.pendingTasks === 0) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node, task.childIndex);
            if (task.replay.pendingTasks === 1 && task.replay.nodes.length > 0) {
              throw new Error("Couldn't find all resumable slots by key/index during replaying. The tree doesn't match so React will fallback to client rendering.");
            }
            task.replay.pendingTasks--;
            task.abortSet.delete(task);
            finishedTask(request, task.blockedBoundary, null);
          } catch (thrownValue) {
            resetHooksState();
            var x = thrownValue === SuspenseException ? (
              // This is a special type of exception used for Suspense. For historical
              // reasons, the rest of the Suspense implementation expects the thrown
              // value to be a thenable, because before `use` existed that was the
              // (unstable) API for suspending. This implementation detail can change
              // later, once we deprecate the old API in favor of `use`.
              getSuspendedThenable()
            ) : thrownValue;
            if (typeof x === "object" && x !== null) {
              if (typeof x.then === "function") {
                var ping = task.ping;
                x.then(ping, ping);
                task.thenableState = getThenableStateAfterSuspending();
                if (task.componentStack !== null) {
                  task.componentStack = task.componentStack.parent;
                }
                return;
              }
            }
            task.replay.pendingTasks--;
            task.abortSet.delete(task);
            var errorInfo = getThrownInfo(request, task.componentStack);
            erroredReplay(request, task.blockedBoundary, x, errorInfo, task.replay.nodes, task.replay.slots);
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              completeShell(request);
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              completeAll(request);
            }
            return;
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactSharedInternals.H;
          ReactSharedInternals.H = HooksDispatcher;
          var prevAsyncDispatcher = null;
          {
            prevAsyncDispatcher = ReactSharedInternals.A;
            ReactSharedInternals.A = DefaultAsyncDispatcher;
          }
          var prevRequest = currentRequest;
          currentRequest = request;
          var prevGetCurrentStackImpl = null;
          {
            prevGetCurrentStackImpl = ReactSharedInternals.getCurrentStack;
            ReactSharedInternals.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResumableState = currentResumableState;
          setCurrentResumableState(request.resumableState);
          try {
            var pingedTasks = request.pingedTasks;
            var i;
            for (i = 0; i < pingedTasks.length; i++) {
              var task = pingedTasks[i];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
            fatalError(request, error2);
          } finally {
            setCurrentResumableState(prevResumableState);
            ReactSharedInternals.H = prevDispatcher;
            {
              ReactSharedInternals.A = prevAsyncDispatcher;
            }
            {
              ReactSharedInternals.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === HooksDispatcher) {
              switchContext(prevContext);
            }
            currentRequest = prevRequest;
          }
        }
        function flushPreamble(request, destination, rootSegment) {
          var willFlushAllSegments = request.allPendingTasks === 0 && request.trackedPostpones === null;
          writePreamble(destination, request.resumableState, request.renderState, willFlushAllSegments);
        }
        function flushSubtree(request, destination, segment, hoistableState) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              segment.id = request.nextSegmentId++;
            }
            case POSTPONED: {
              var segmentID = segment.id;
              segment.lastPushedText = false;
              segment.textEmbedded = false;
              return writePlaceholder(destination, request.renderState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children = segment.children;
              for (var childIdx = 0; childIdx < children.length; childIdx++) {
                var nextChild = children[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild, hoistableState);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment, hoistableState) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment, hoistableState);
          }
          boundary.parentFlushed = true;
          if (boundary.status === CLIENT_RENDERED) {
            {
              writeStartClientRenderedSuspenseBoundary(destination, request.renderState, boundary.errorDigest, boundary.errorMessage, boundary.errorStack, boundary.errorComponentStack);
            }
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndClientRenderedSuspenseBoundary(destination);
          } else if (boundary.status !== COMPLETED) {
            if (boundary.status === PENDING) {
              boundary.rootSegmentID = request.nextSegmentId++;
            }
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id = boundary.rootSegmentID;
            writeStartPendingSuspenseBoundary(destination, request.renderState, id);
            if (hoistableState) {
              hoistHoistables(hoistableState, boundary.fallbackState);
            }
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndPendingSuspenseBoundary(destination);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.renderState, boundary.rootSegmentID);
            flushSubtree(request, destination, segment, hoistableState);
            return writeEndPendingSuspenseBoundary(destination);
          } else {
            if (hoistableState) {
              hoistHoistables(hoistableState, boundary.contentState);
            }
            writeStartCompletedSuspenseBoundary(destination);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment, hoistableState);
            return writeEndCompletedSuspenseBoundary(destination);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          {
            return writeClientRenderBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.errorDigest, boundary.errorMessage, boundary.errorStack, boundary.errorComponentStack);
          }
        }
        function flushSegmentContainer(request, destination, segment, hoistableState) {
          writeStartSegment(destination, request.renderState, segment.parentFormatContext, segment.id);
          flushSegment(request, destination, segment, hoistableState);
          return writeEndSegment(destination, segment.parentFormatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);
          return writeCompletedBoundaryInstruction(destination, request.resumableState, request.renderState, boundary.rootSegmentID, boundary.contentState);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i = 0;
          for (; i < completedSegments.length; i++) {
            var segment = completedSegments[i];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i++;
              completedSegments.splice(0, i);
              return false;
            }
          }
          completedSegments.splice(0, i);
          return writeHoistablesForBoundary(destination, boundary.contentState, request.renderState);
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var hoistableState = boundary.contentState;
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment, hoistableState);
          } else if (segmentID === boundary.rootSegmentID) {
            return flushSegmentContainer(request, destination, segment, hoistableState);
          } else {
            flushSegmentContainer(request, destination, segment, hoistableState);
            return writeCompletedSegmentInstruction(destination, request.resumableState, request.renderState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          beginWriting();
          try {
            if (request.pendingRootTasks > 0) {
              return;
            }
            var i;
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null) {
              if (completedRootSegment.status === POSTPONED) {
                return;
              }
              flushPreamble(request, destination, completedRootSegment);
              flushSegment(request, destination, completedRootSegment, null);
              request.completedRootSegment = null;
              writeCompletedRoot(destination, request.renderState);
            }
            writeHoistables(destination, request.resumableState, request.renderState);
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            for (i = 0; i < clientRenderedBoundaries.length; i++) {
              var boundary = clientRenderedBoundaries[i];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i++;
                clientRenderedBoundaries.splice(0, i);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i);
            var completedBoundaries = request.completedBoundaries;
            for (i = 0; i < completedBoundaries.length; i++) {
              var _boundary = completedBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i++;
                completedBoundaries.splice(0, i);
                return;
              }
            }
            completedBoundaries.splice(0, i);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i = 0; i < partialBoundaries.length; i++) {
              var _boundary2 = partialBoundaries[i];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i++;
                partialBoundaries.splice(0, i);
                return;
              }
            }
            partialBoundaries.splice(0, i);
            var largeBoundaries = request.completedBoundaries;
            for (i = 0; i < largeBoundaries.length; i++) {
              var _boundary3 = largeBoundaries[i];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i++;
                largeBoundaries.splice(0, i);
                return;
              }
            }
            largeBoundaries.splice(0, i);
          } finally {
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              request.flushScheduled = false;
              if (request.trackedPostpones === null) {
                writePostamble(destination, request.resumableState);
              }
              completeWriting(destination);
              flushBuffered(destination);
              {
                if (request.abortableTasks.size !== 0) {
                  error("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close(destination);
              stopFlowing(request);
            } else {
              completeWriting(destination);
              flushBuffered(destination);
            }
          }
        }
        function startWork(request) {
          request.flushScheduled = request.destination !== null;
          {
            scheduleWork(function() {
              return requestStorage.run(request, performWork, request);
            });
          }
          if (request.trackedPostpones === null) {
            {
              scheduleWork(function() {
                return requestStorage.run(request, enqueueEarlyPreloadsAfterInitialWork, request);
              });
            }
          }
        }
        function enqueueEarlyPreloadsAfterInitialWork(request) {
          var shellComplete = request.pendingRootTasks === 0;
          safelyEmitEarlyPreloads(request, shellComplete);
        }
        function enqueueFlush(request) {
          if (request.flushScheduled === false && // If there are pinged tasks we are going to flush anyway after work completes
          request.pingedTasks.length === 0 && // If there is no destination there is nothing we can flush to. A flush will
          // happen when we start flowing again
          request.destination !== null) {
            request.flushScheduled = true;
            scheduleWork(function() {
              var destination = request.destination;
              if (destination) {
                flushCompletedQueues(request, destination);
              } else {
                request.flushScheduled = false;
              }
            });
          }
        }
        function prepareForStartFlowingIfBeforeAllReady(request) {
          var shellComplete = request.trackedPostpones === null ? (
            // Render Request, we define shell complete by the pending root tasks
            request.pendingRootTasks === 0
          ) : (
            // Prerender Request, we define shell complete by completedRootSegemtn
            request.completedRootSegment === null ? request.pendingRootTasks === 0 : request.completedRootSegment.status !== POSTPONED
          );
          safelyEmitEarlyPreloads(request, shellComplete);
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error2) {
            var errorInfo = {};
            logRecoverableError(request, error2, errorInfo);
            fatalError(request, error2);
          }
        }
        function stopFlowing(request) {
          request.destination = null;
        }
        function abort(request, reason) {
          try {
            var abortableTasks = request.abortableTasks;
            if (abortableTasks.size > 0) {
              var error2 = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
              abortableTasks.forEach(function(task) {
                return abortTask(task, request, error2);
              });
              abortableTasks.clear();
            }
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error3) {
            var errorInfo = {};
            logRecoverableError(request, error3, errorInfo);
            fatalError(request, error3);
          }
        }
        function flushResources(request) {
          enqueueFlush(request);
        }
        function getFormState(request) {
          return request.formState;
        }
        function getResumableState(request) {
          return request.resumableState;
        }
        function getRenderState(request) {
          return request.renderState;
        }
        function addToReplayParent(node, parentKeyPath, trackedPostpones) {
          if (parentKeyPath === null) {
            trackedPostpones.rootNodes.push(node);
          } else {
            var workingMap = trackedPostpones.workingMap;
            var parentNode = workingMap.get(parentKeyPath);
            if (parentNode === void 0) {
              parentNode = [parentKeyPath[1], parentKeyPath[2], [], null];
              workingMap.set(parentKeyPath, parentNode);
              addToReplayParent(parentNode, parentKeyPath[0], trackedPostpones);
            }
            parentNode[2].push(node);
          }
        }
        function getPostponedState(request) {
          var trackedPostpones = request.trackedPostpones;
          if (trackedPostpones === null || trackedPostpones.rootNodes.length === 0 && trackedPostpones.rootSlots === null) {
            request.trackedPostpones = null;
            return null;
          }
          if (request.completedRootSegment !== null && request.completedRootSegment.status === POSTPONED) {
            resetResumableState(request.resumableState, request.renderState);
          } else {
            completeResumableState(request.resumableState);
          }
          return {
            nextSegmentId: request.nextSegmentId,
            rootFormatContext: request.rootFormatContext,
            progressiveChunkSize: request.progressiveChunkSize,
            resumableState: request.resumableState,
            replayNodes: trackedPostpones.rootNodes,
            replaySlots: trackedPostpones.rootSlots
          };
        }
        function createDrainHandler(destination, request) {
          return function() {
            return startFlowing(request, destination);
          };
        }
        function createCancelHandler(request, reason) {
          return function() {
            stopFlowing(request);
            abort(request, new Error(reason));
          };
        }
        function createRequestImpl(children, options) {
          var resumableState = createResumableState(options ? options.identifierPrefix : void 0, options ? options.unstable_externalRuntimeSrc : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0);
          return createRequest(children, resumableState, createRenderState(resumableState, options ? options.nonce : void 0, options ? options.unstable_externalRuntimeSrc : void 0, options ? options.importMap : void 0, options ? options.onHeaders : void 0, options ? options.maxHeadersLength : void 0), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, options ? options.onAllReady : void 0, options ? options.onShellReady : void 0, options ? options.onShellError : void 0, void 0, options ? options.onPostpone : void 0, options ? options.formState : void 0);
        }
        function renderToPipeableStream2(children, options) {
          var request = createRequestImpl(children, options);
          var hasStartedFlowing = false;
          startWork(request);
          return {
            pipe: function(destination) {
              if (hasStartedFlowing) {
                throw new Error("React currently only supports piping to one writable stream.");
              }
              hasStartedFlowing = true;
              prepareForStartFlowingIfBeforeAllReady(request);
              startFlowing(request, destination);
              destination.on("drain", createDrainHandler(destination, request));
              destination.on("error", createCancelHandler(request, "The destination stream errored while writing data."));
              destination.on("close", createCancelHandler(request, "The destination stream closed early."));
              return destination;
            },
            abort: function(reason) {
              abort(request, reason);
            }
          };
        }
        function resumeRequestImpl(children, postponedState, options) {
          return resumeRequest(children, postponedState, resumeRenderState(postponedState.resumableState, options ? options.nonce : void 0), options ? options.onError : void 0, options ? options.onAllReady : void 0, options ? options.onShellReady : void 0, options ? options.onShellError : void 0, void 0, options ? options.onPostpone : void 0);
        }
        function resumeToPipeableStream(children, postponedState, options) {
          var request = resumeRequestImpl(children, postponedState, options);
          var hasStartedFlowing = false;
          startWork(request);
          return {
            pipe: function(destination) {
              if (hasStartedFlowing) {
                throw new Error("React currently only supports piping to one writable stream.");
              }
              hasStartedFlowing = true;
              startFlowing(request, destination);
              destination.on("drain", createDrainHandler(destination, request));
              destination.on("error", createCancelHandler(request, "The destination stream errored while writing data."));
              destination.on("close", createCancelHandler(request, "The destination stream closed early."));
              return destination;
            },
            abort: function(reason) {
              abort(request, reason);
            }
          };
        }
        function createFakeWritable(readable) {
          return {
            write: function(chunk) {
              return readable.push(chunk);
            },
            end: function() {
              readable.push(null);
            },
            destroy: function(error2) {
              readable.destroy(error2);
            }
          };
        }
        function prerenderToNodeStream(children, options) {
          return new Promise(function(resolve, reject) {
            var onFatalError = reject;
            function onAllReady() {
              var readable = new stream.Readable({
                read: function() {
                  startFlowing(request, writable);
                }
              });
              var writable = createFakeWritable(readable);
              var result = {
                postponed: getPostponedState(request),
                prelude: readable
              };
              resolve(result);
            }
            var resumableState = createResumableState(options ? options.identifierPrefix : void 0, options ? options.unstable_externalRuntimeSrc : void 0, options ? options.bootstrapScriptContent : void 0, options ? options.bootstrapScripts : void 0, options ? options.bootstrapModules : void 0);
            var request = createPrerenderRequest(children, resumableState, createRenderState(
              resumableState,
              void 0,
              // nonce is not compatible with prerendered bootstrap scripts
              options ? options.unstable_externalRuntimeSrc : void 0,
              options ? options.importMap : void 0,
              options ? options.onHeaders : void 0,
              options ? options.maxHeadersLength : void 0
            ), createRootFormatContext(options ? options.namespaceURI : void 0), options ? options.progressiveChunkSize : void 0, options ? options.onError : void 0, onAllReady, void 0, void 0, onFatalError, options ? options.onPostpone : void 0);
            if (options && options.signal) {
              var signal = options.signal;
              if (signal.aborted) {
                abort(request, signal.reason);
              } else {
                var listener = function() {
                  abort(request, signal.reason);
                  signal.removeEventListener("abort", listener);
                };
                signal.addEventListener("abort", listener);
              }
            }
            startWork(request);
          });
        }
        exports2.prerenderToNodeStream = prerenderToNodeStream;
        exports2.renderToPipeableStream = renderToPipeableStream2;
        exports2.resumeToPipeableStream = resumeToPipeableStream;
        exports2.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/server.node.js
var require_server_node = __commonJS({
  "node_modules/react-dom/server.node.js"(exports2) {
    "use strict";
    var l;
    var s;
    if (process.env.NODE_ENV === "production") {
      l = require_react_dom_server_legacy_node_production();
      s = require_react_dom_server_node_production();
    } else {
      l = require_react_dom_server_legacy_node_development();
      s = require_react_dom_server_node_development();
    }
    exports2.version = l.version;
    exports2.renderToString = l.renderToString;
    exports2.renderToStaticMarkup = l.renderToStaticMarkup;
    exports2.renderToPipeableStream = s.renderToPipeableStream;
    if (s.resumeToPipeableStream) {
      exports2.resumeToPipeableStream = s.resumeToPipeableStream;
    }
  }
});

// node_modules/react/cjs/react-jsx-runtime.production.js
var require_react_jsx_runtime_production = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.production.js"(exports2) {
    "use strict";
    var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
    var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
    function jsxProd(type, config, maybeKey) {
      var key = null;
      void 0 !== maybeKey && (key = "" + maybeKey);
      void 0 !== config.key && (key = "" + config.key);
      if ("key" in config) {
        maybeKey = {};
        for (var propName in config)
          "key" !== propName && (maybeKey[propName] = config[propName]);
      } else
        maybeKey = config;
      config = maybeKey.ref;
      return {
        $$typeof: REACT_ELEMENT_TYPE,
        type,
        key,
        ref: void 0 !== config ? config : null,
        props: maybeKey
      };
    }
    exports2.Fragment = REACT_FRAGMENT_TYPE;
    exports2.jsx = jsxProd;
    exports2.jsxs = jsxProd;
  }
});

// node_modules/react/cjs/react-jsx-runtime.development.js
var require_react_jsx_runtime_development = __commonJS({
  "node_modules/react/cjs/react-jsx-runtime.development.js"(exports2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React = require_react();
        var enableScopeAPI = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableRefAsProp = true;
        var enableRenderableContext = true;
        var enableDebugTracing = false;
        var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var stack = ReactSharedInternals.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        var REACT_CLIENT_REFERENCE$2 = Symbol.for("react.client.reference");
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          if (typeof type === "function") {
            if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {
              return null;
            }
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE: {
                return null;
              }
              case REACT_CONTEXT_TYPE:
                var context = type;
                {
                  return getContextName(context) + ".Provider";
                }
              case REACT_CONSUMER_TYPE: {
                var consumer = type;
                return getContextName(consumer._context) + ".Consumer";
              }
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var assign = Object.assign;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference");
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || !enableRenderableContext || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
            // types supported by any Flight configuration anywhere since
            // we don't know which Flight build this will end up being used
            // with.
            type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        var isArrayImpl = Array.isArray;
        function isArray(a) {
          return isArrayImpl(a);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var prefix;
        function describeBuiltInComponentFrame(name) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher = null;
          {
            previousDispatcher = ReactSharedInternals.H;
            ReactSharedInternals.H = null;
            disableLogs();
          }
          var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
              var control;
              try {
                if (construct) {
                  var Fake = function() {
                    throw Error();
                  };
                  Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  });
                  if (typeof Reflect === "object" && Reflect.construct) {
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x) {
                      control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x) {
                      control = x;
                    }
                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x) {
                    control = x;
                  }
                  var maybePromise = fn();
                  if (maybePromise && typeof maybePromise.catch === "function") {
                    maybePromise.catch(function() {
                    });
                  }
                }
              } catch (sample) {
                if (sample && control && typeof sample.stack === "string") {
                  return [sample.stack, control.stack];
                }
              }
              return [null, null];
            }
          };
          RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
          if (namePropDescriptor && namePropDescriptor.configurable) {
            Object.defineProperty(
              RunInRootFrame.DetermineComponentFrameRoot,
              // Configurable properties can be updated even if its writable descriptor
              // is set to `false`.
              // $FlowFixMe[cannot-write]
              "name",
              {
                value: "DetermineComponentFrameRoot"
              }
            );
          }
          try {
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
              var sampleLines = sampleStack.split("\n");
              var controlLines = controlStack.split("\n");
              var s = 0;
              var c = 0;
              while (s < sampleLines.length && !sampleLines[s].includes("DetermineComponentFrameRoot")) {
                s++;
              }
              while (c < controlLines.length && !controlLines[c].includes("DetermineComponentFrameRoot")) {
                c++;
              }
              if (s === sampleLines.length || c === controlLines.length) {
                s = sampleLines.length - 1;
                c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
              }
              for (; s >= 1 && c >= 0; s--, c--) {
                if (sampleLines[s] !== controlLines[c]) {
                  if (s !== 1 || c !== 1) {
                    do {
                      s--;
                      c--;
                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        if (true) {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactSharedInternals.H = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload));
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
        function getOwner() {
          {
            var dispatcher = ReactSharedInternals.A;
            if (dispatcher === null) {
              return null;
            }
            return dispatcher.getOwner();
          }
        }
        var specialPropKeyWarningShown;
        var didWarnAboutElementRef;
        {
          didWarnAboutElementRef = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName);
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
        }
        function elementRefGetterWithDeprecationWarning() {
          {
            var componentName = getComponentNameFromType(this.type);
            if (!didWarnAboutElementRef[componentName]) {
              didWarnAboutElementRef[componentName] = true;
              error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.");
            }
            var refProp = this.props.ref;
            return refProp !== void 0 ? refProp : null;
          }
        }
        function ReactElement(type, key, _ref, self, source, owner, props) {
          var ref;
          {
            var refProp = props.ref;
            ref = refProp !== void 0 ? refProp : null;
          }
          var element;
          {
            element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            if (ref !== null) {
              Object.defineProperty(element, "ref", {
                enumerable: false,
                get: elementRefGetterWithDeprecationWarning
              });
            } else {
              Object.defineProperty(element, "ref", {
                enumerable: false,
                value: null
              });
            }
          }
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_debugInfo", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: null
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        }
        function jsxProdSignatureRunningInDevWithDynamicChildren(type, config, maybeKey, source, self) {
          {
            var isStaticChildren = false;
            return jsxDEV(type, config, maybeKey, isStaticChildren, source, self);
          }
        }
        function jsxProdSignatureRunningInDevWithStaticChildren(type, config, maybeKey, source, self) {
          {
            var isStaticChildren = true;
            return jsxDEV(type, config, maybeKey, isStaticChildren, source, self);
          }
        }
        var didWarnAboutKeySpread = {};
        function jsxDEV(type, config, maybeKey, isStaticChildren, source, self) {
          {
            if (!isValidElementType(type)) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            } else {
              var children = config.children;
              if (children !== void 0) {
                if (isStaticChildren) {
                  if (isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                      validateChildKeys(children[i], type);
                    }
                    if (Object.freeze) {
                      Object.freeze(children);
                    }
                  } else {
                    error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                  }
                } else {
                  validateChildKeys(children, type);
                }
              }
            }
            if (hasOwnProperty.call(config, "key")) {
              var componentName = getComponentNameFromType(type);
              var keys = Object.keys(config).filter(function(k) {
                return k !== "key";
              });
              var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
              if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                didWarnAboutKeySpread[componentName + beforeExample] = true;
              }
            }
            var key = null;
            var ref = null;
            if (maybeKey !== void 0) {
              {
                checkKeyStringCoercion(maybeKey);
              }
              key = "" + maybeKey;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            if (hasValidRef(config))
              ;
            var props;
            if (!("key" in config)) {
              props = config;
            } else {
              props = {};
              for (var propName in config) {
                if (propName !== "key" && enableRefAsProp) {
                  {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            if (key || !enableRefAsProp) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
            }
            var element = ReactElement(type, key, ref, self, source, getOwner(), props);
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            }
            return element;
          }
        }
        function getDeclarationErrorAddendum() {
          {
            var owner = getOwner();
            if (owner) {
              var name = getComponentNameFromType(owner.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
        }
        function validateChildKeys(node, parentType) {
          {
            if (typeof node !== "object" || !node) {
              return;
            }
            if (node.$$typeof === REACT_CLIENT_REFERENCE)
              ;
            else if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  if (iterator !== node) {
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        function isValidElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var ownerHasKeyUseWarning = {};
        function validateExplicitKey(element, parentType) {
          {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner != null && element._owner !== getOwner()) {
              var ownerName = null;
              if (typeof element._owner.tag === "number") {
                ownerName = getComponentNameFromType(element._owner.type);
              } else if (typeof element._owner.name === "string") {
                ownerName = element._owner.name;
              }
              childOwner = " It was passed a child from " + ownerName + ".";
            }
            setCurrentlyValidatingElement(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement(null);
          }
        }
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var stack = describeUnknownElementTypeFrameInDEV(element.type);
              ReactSharedInternals.setExtraStackFrame(stack);
            } else {
              ReactSharedInternals.setExtraStackFrame(null);
            }
          }
        }
        function getCurrentComponentErrorInfo(parentType) {
          {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = getComponentNameFromType(parentType);
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement(null);
                break;
              }
            }
          }
        }
        var jsx4 = jsxProdSignatureRunningInDevWithDynamicChildren;
        var jsxs3 = jsxProdSignatureRunningInDevWithStaticChildren;
        exports2.Fragment = REACT_FRAGMENT_TYPE;
        exports2.jsx = jsx4;
        exports2.jsxs = jsxs3;
      })();
    }
  }
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS({
  "node_modules/react/jsx-runtime.js"(exports2, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_jsx_runtime_production();
    } else {
      module2.exports = require_react_jsx_runtime_development();
    }
  }
});

// src/server.jsx
var import_promises = require("fs/promises");
var import_server = __toESM(require_server_node());

// src/App.jsx
var import_react2 = __toESM(require_react());

// src/List.jsx
var import_react = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var List = () => {
  const data = (0, import_react.use)(
    new Promise((resolve) => {
      setTimeout(() => {
        console.log("Hello!");
        resolve([
          { name: "TypeScript", mark: (/* @__PURE__ */ new Date()).getSeconds() },
          // { name: 'TypeScript', mark: '4.9' },
          { name: "JavaScript", mark: "4.8" },
          { name: "Go", mark: "4.7" }
        ]);
      }, 2e3);
    })
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("ul", { children: data.map(({ name, mark }) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("li", { children: [
    name,
    " - ",
    mark
  ] }, name)) });
};

// src/App.jsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var App = () => {
  const [count, setCount] = (0, import_react2.useState)(0);
  return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("html", { children: [
    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("head", { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("title", { children: "Striming API" }) }),
    /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("body", { children: /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { children: [
      "Count = ",
      count,
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("button", { onClick: () => setCount((prevCount) => prevCount + 1), children: "Click" }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_react2.Suspense, { fallback: "Loading...", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(List, {}) })
    ] }) })
  ] });
};

// src/server.jsx
var import_http = __toESM(require("http"));
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
import_http.default.createServer(async (req, res) => {
  if (req.url === "/bundle.js") {
    const bundle = await (0, import_promises.readFile)("./dist/bundle.js");
    res.writeHead(200, { "Content-Type": "text/javascript" });
    res.end(bundle);
    return;
  }
  const stream = (0, import_server.renderToPipeableStream)(/* @__PURE__ */ (0, import_jsx_runtime3.jsx)(App, {}), {
    bootstrapScripts: ["bundle.js"],
    onShellReady: () => {
      stream.pipe(res);
    }
  });
}).listen(3e3);
/*! Bundled license information:

react/cjs/react.production.js:
  (**
   * @license React
   * react.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.js:
  (**
   * @license React
   * react-dom.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server-legacy.node.production.js:
  (**
   * @license React
   * react-dom-server-legacy.node.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server.node.production.js:
  (**
   * @license React
   * react-dom-server.node.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server-legacy.node.development.js:
  (**
   * @license React
   * react-dom-server-legacy.node.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * @license
   *
   * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)
   *
   * Copyright (c) 2011 Gary Court
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   *)

react-dom/cjs/react-dom-server.node.development.js:
  (**
   * @license React
   * react-dom-server.node.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.production.js:
  (**
   * @license React
   * react-jsx-runtime.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
